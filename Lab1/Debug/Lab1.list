
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b64  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08006d00  08006d00  00016d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f30  08006f30  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f30  08006f30  00016f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f38  08006f38  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f38  08006f38  00016f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f3c  08006f3c  00016f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08006f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000002c  08006f6c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08006f6c  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f7e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b64  00000000  00000000  00033fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00036b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a0  00000000  00000000  00037cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bb6  00000000  00000000  00038d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001655b  00000000  00000000  00051946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094a3e  00000000  00000000  00067ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc8df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed4  00000000  00000000  000fc930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006ce4 	.word	0x08006ce4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000030 	.word	0x20000030
 80001d4:	08006ce4 	.word	0x08006ce4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b974 	b.w	8000e74 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9d08      	ldr	r5, [sp, #32]
 8000baa:	4604      	mov	r4, r0
 8000bac:	468e      	mov	lr, r1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d14d      	bne.n	8000c4e <__udivmoddi4+0xaa>
 8000bb2:	428a      	cmp	r2, r1
 8000bb4:	4694      	mov	ip, r2
 8000bb6:	d969      	bls.n	8000c8c <__udivmoddi4+0xe8>
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	b152      	cbz	r2, 8000bd4 <__udivmoddi4+0x30>
 8000bbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc2:	f1c2 0120 	rsb	r1, r2, #32
 8000bc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000bca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bce:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd2:	4094      	lsls	r4, r2
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	0c21      	lsrs	r1, r4, #16
 8000bda:	fbbe f6f8 	udiv	r6, lr, r8
 8000bde:	fa1f f78c 	uxth.w	r7, ip
 8000be2:	fb08 e316 	mls	r3, r8, r6, lr
 8000be6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bea:	fb06 f107 	mul.w	r1, r6, r7
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x64>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfa:	f080 811f 	bcs.w	8000e3c <__udivmoddi4+0x298>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 811c 	bls.w	8000e3c <__udivmoddi4+0x298>
 8000c04:	3e02      	subs	r6, #2
 8000c06:	4463      	add	r3, ip
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c10:	fb08 3310 	mls	r3, r8, r0, r3
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	fb00 f707 	mul.w	r7, r0, r7
 8000c1c:	42a7      	cmp	r7, r4
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x92>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c28:	f080 810a 	bcs.w	8000e40 <__udivmoddi4+0x29c>
 8000c2c:	42a7      	cmp	r7, r4
 8000c2e:	f240 8107 	bls.w	8000e40 <__udivmoddi4+0x29c>
 8000c32:	4464      	add	r4, ip
 8000c34:	3802      	subs	r0, #2
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	1be4      	subs	r4, r4, r7
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	b11d      	cbz	r5, 8000c48 <__udivmoddi4+0xa4>
 8000c40:	40d4      	lsrs	r4, r2
 8000c42:	2300      	movs	r3, #0
 8000c44:	e9c5 4300 	strd	r4, r3, [r5]
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0xc2>
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	f000 80ef 	beq.w	8000e36 <__udivmoddi4+0x292>
 8000c58:	2600      	movs	r6, #0
 8000c5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5e:	4630      	mov	r0, r6
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f683 	clz	r6, r3
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d14a      	bne.n	8000d04 <__udivmoddi4+0x160>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xd4>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 80f9 	bhi.w	8000e6a <__udivmoddi4+0x2c6>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	469e      	mov	lr, r3
 8000c82:	2d00      	cmp	r5, #0
 8000c84:	d0e0      	beq.n	8000c48 <__udivmoddi4+0xa4>
 8000c86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c8a:	e7dd      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000c8c:	b902      	cbnz	r2, 8000c90 <__udivmoddi4+0xec>
 8000c8e:	deff      	udf	#255	; 0xff
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f040 8092 	bne.w	8000dbe <__udivmoddi4+0x21a>
 8000c9a:	eba1 010c 	sub.w	r1, r1, ip
 8000c9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca2:	fa1f fe8c 	uxth.w	lr, ip
 8000ca6:	2601      	movs	r6, #1
 8000ca8:	0c20      	lsrs	r0, r4, #16
 8000caa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cae:	fb07 1113 	mls	r1, r7, r3, r1
 8000cb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb6:	fb0e f003 	mul.w	r0, lr, r3
 8000cba:	4288      	cmp	r0, r1
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x12c>
 8000cbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x12a>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f200 80cb 	bhi.w	8000e64 <__udivmoddi4+0x2c0>
 8000cce:	4643      	mov	r3, r8
 8000cd0:	1a09      	subs	r1, r1, r0
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd8:	fb07 1110 	mls	r1, r7, r0, r1
 8000cdc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x156>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x154>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80bb 	bhi.w	8000e6e <__udivmoddi4+0x2ca>
 8000cf8:	4608      	mov	r0, r1
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d02:	e79c      	b.n	8000c3e <__udivmoddi4+0x9a>
 8000d04:	f1c6 0720 	rsb	r7, r6, #32
 8000d08:	40b3      	lsls	r3, r6
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa20 f407 	lsr.w	r4, r0, r7
 8000d16:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1a:	431c      	orrs	r4, r3
 8000d1c:	40f9      	lsrs	r1, r7
 8000d1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d22:	fa00 f306 	lsl.w	r3, r0, r6
 8000d26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d2a:	0c20      	lsrs	r0, r4, #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fb09 1118 	mls	r1, r9, r8, r1
 8000d34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d38:	fb08 f00e 	mul.w	r0, r8, lr
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b8>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2bc>
 8000d50:	4288      	cmp	r0, r1
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2bc>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4461      	add	r1, ip
 8000d5c:	1a09      	subs	r1, r1, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d64:	fb09 1110 	mls	r1, r9, r0, r1
 8000d68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d70:	458e      	cmp	lr, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1e2>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2b4>
 8000d7e:	458e      	cmp	lr, r1
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2b4>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d8e:	eba1 010e 	sub.w	r1, r1, lr
 8000d92:	42a1      	cmp	r1, r4
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46a6      	mov	lr, r4
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x2a4>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x2a0>
 8000d9c:	b15d      	cbz	r5, 8000db6 <__udivmoddi4+0x212>
 8000d9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000da2:	eb61 010e 	sbc.w	r1, r1, lr
 8000da6:	fa01 f707 	lsl.w	r7, r1, r7
 8000daa:	fa22 f306 	lsr.w	r3, r2, r6
 8000dae:	40f1      	lsrs	r1, r6
 8000db0:	431f      	orrs	r7, r3
 8000db2:	e9c5 7100 	strd	r7, r1, [r5]
 8000db6:	2600      	movs	r6, #0
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	f1c2 0320 	rsb	r3, r2, #32
 8000dc2:	40d8      	lsrs	r0, r3
 8000dc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dcc:	4091      	lsls	r1, r2
 8000dce:	4301      	orrs	r1, r0
 8000dd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ddc:	fb07 3610 	mls	r6, r7, r0, r3
 8000de0:	0c0b      	lsrs	r3, r1, #16
 8000de2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000de6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dea:	429e      	cmp	r6, r3
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x260>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b8>
 8000dfc:	429e      	cmp	r6, r3
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b8>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	1b9b      	subs	r3, r3, r6
 8000e06:	b289      	uxth	r1, r1
 8000e08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb06 f30e 	mul.w	r3, r6, lr
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x28a>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2b0>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2b0>
 8000e2a:	3e02      	subs	r6, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	1ac9      	subs	r1, r1, r3
 8000e30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0x104>
 8000e36:	462e      	mov	r6, r5
 8000e38:	4628      	mov	r0, r5
 8000e3a:	e705      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000e3c:	4606      	mov	r6, r0
 8000e3e:	e6e3      	b.n	8000c08 <__udivmoddi4+0x64>
 8000e40:	4618      	mov	r0, r3
 8000e42:	e6f8      	b.n	8000c36 <__udivmoddi4+0x92>
 8000e44:	454b      	cmp	r3, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f8>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e50:	3801      	subs	r0, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f8>
 8000e54:	4646      	mov	r6, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x28a>
 8000e58:	4620      	mov	r0, r4
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1e2>
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x260>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b8>
 8000e64:	3b02      	subs	r3, #2
 8000e66:	4461      	add	r1, ip
 8000e68:	e732      	b.n	8000cd0 <__udivmoddi4+0x12c>
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	e709      	b.n	8000c82 <__udivmoddi4+0xde>
 8000e6e:	4464      	add	r4, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e742      	b.n	8000cfa <__udivmoddi4+0x156>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <Error>:
extern UART_HandleTypeDef huart1;
uint8_t buf2[14]={0};
char str1[30]={0};
//—————————————————————————————————————————————————————————————————

static void Error(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	LED_R1_ON;
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2120      	movs	r1, #32
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <Error+0x14>)
 8000e82:	f001 fdf9 	bl	8002a78 <HAL_GPIO_WritePin>
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40020c00 	.word	0x40020c00

08000e90 <Accel_Ini>:

void Accel_Ini(void) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
	uint16_t ctrl = 0x0000;
 8000e96:	2300      	movs	r3, #0
 8000e98:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(1000);
 8000e9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e9e:	f001 fb31 	bl	8002504 <HAL_Delay>
	if (Accel_ReadID() == 0x33) {
 8000ea2:	f000 f888 	bl	8000fb6 <Accel_ReadID>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b33      	cmp	r3, #51	; 0x33
 8000eaa:	d10b      	bne.n	8000ec4 <Accel_Ini+0x34>
		LED_G_ON;
 8000eac:	2201      	movs	r2, #1
 8000eae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb2:	4813      	ldr	r0, [pc, #76]	; (8000f00 <Accel_Ini+0x70>)
 8000eb4:	f001 fde0 	bl	8002a78 <HAL_GPIO_WritePin>
		LED_R1_OFF;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2120      	movs	r1, #32
 8000ebc:	4810      	ldr	r0, [pc, #64]	; (8000f00 <Accel_Ini+0x70>)
 8000ebe:	f001 fddb 	bl	8002a78 <HAL_GPIO_WritePin>
 8000ec2:	e001      	b.n	8000ec8 <Accel_Ini+0x38>
	} else
		Error();
 8000ec4:	f7ff ffd8 	bl	8000e78 <Error>
	ctrl |= (LSM303DLHC_NORMAL_MODE | LSM303DLHC_ODR_50_HZ
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8000ece:	80fb      	strh	r3, [r7, #6]
			| LSM303DLHC_AXES_ENABLE);
	ctrl |= ((LSM303DLHC_BlockUpdate_Continous | LSM303DLHC_BLE_LSB
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ed6:	80fb      	strh	r3, [r7, #6]
			| LSM303DLHC_HR_ENABLE) << 8);
	AccInit(ctrl);
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f812 	bl	8000f04 <AccInit>

	ctrl = (uint8_t) (LSM303DLHC_HPM_NORMAL_MODE | LSM303DLHC_HPFCF_16
 8000ee0:	2390      	movs	r3, #144	; 0x90
 8000ee2:	80fb      	strh	r3, [r7, #6]
			| LSM303DLHC_HPF_AOI1_DISABLE | LSM303DLHC_HPF_AOI2_DISABLE);
	Accel_AccFilterConfig(ctrl);
 8000ee4:	88fb      	ldrh	r3, [r7, #6]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f8af 	bl	800104a <Accel_AccFilterConfig>
	LED_B_ON;
 8000eec:	2201      	movs	r2, #1
 8000eee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef2:	4803      	ldr	r0, [pc, #12]	; (8000f00 <Accel_Ini+0x70>)
 8000ef4:	f001 fdc0 	bl	8002a78 <HAL_GPIO_WritePin>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40020c00 	.word	0x40020c00

08000f04 <AccInit>:

void AccInit(uint16_t InitStruct) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]
	uint8_t ctrl = 0x00;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]
	ctrl = (uint8_t) InitStruct;
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	73fb      	strb	r3, [r7, #15]
	Accel_IO_Write(0x32, LSM303DLHC_CTRL_REG1_A, ctrl);
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	2120      	movs	r1, #32
 8000f1c:	2032      	movs	r0, #50	; 0x32
 8000f1e:	f000 f881 	bl	8001024 <Accel_IO_Write>
	ctrl = (uint8_t) (InitStruct << 8);
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]
	Accel_IO_Write(0x32, LSM303DLHC_CTRL_REG4_A, ctrl);
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	2123      	movs	r1, #35	; 0x23
 8000f2c:	2032      	movs	r0, #50	; 0x32
 8000f2e:	f000 f879 	bl	8001024 <Accel_IO_Write>
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <I2C1_ReadData>:

static uint8_t I2C1_ReadData(uint16_t Addr, uint8_t Reg) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af04      	add	r7, sp, #16
 8000f42:	4603      	mov	r3, r0
 8000f44:	460a      	mov	r2, r1
 8000f46:	80fb      	strh	r3, [r7, #6]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]
	uint8_t value = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value,
 8000f54:	797b      	ldrb	r3, [r7, #5]
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	88f9      	ldrh	r1, [r7, #6]
 8000f5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	2301      	movs	r3, #1
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	f107 030e 	add.w	r3, r7, #14
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	4807      	ldr	r0, [pc, #28]	; (8000f8c <I2C1_ReadData+0x50>)
 8000f6e:	f001 ffdb 	bl	8002f28 <HAL_I2C_Mem_Read>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]
			1, 0x10000);
	if (status != HAL_OK) {
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <I2C1_ReadData+0x44>
		/* Execute user timeout callback */
		Error();
 8000f7c:	f7ff ff7c 	bl	8000e78 <Error>
	}
	return value;
 8000f80:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000150 	.word	0x20000150

08000f90 <Accel_IO_Read>:

uint8_t Accel_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	460a      	mov	r2, r1
 8000f9a:	80fb      	strh	r3, [r7, #6]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	717b      	strb	r3, [r7, #5]
	return I2C1_ReadData(DeviceAddr, RegisterAddr);
 8000fa0:	797a      	ldrb	r2, [r7, #5]
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ffc8 	bl	8000f3c <I2C1_ReadData>
 8000fac:	4603      	mov	r3, r0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <Accel_ReadID>:

uint8_t Accel_ReadID(void) {
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
	uint8_t ctrl = 0x00;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	71fb      	strb	r3, [r7, #7]
	ctrl = Accel_IO_Read(0x32, 0x0F);
 8000fc0:	210f      	movs	r1, #15
 8000fc2:	2032      	movs	r0, #50	; 0x32
 8000fc4:	f7ff ffe4 	bl	8000f90 <Accel_IO_Read>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	71fb      	strb	r3, [r7, #7]
	return ctrl;
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <I2C1_WriteData>:

static void I2C1_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80fb      	strh	r3, [r7, #6]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	717b      	strb	r3, [r7, #5]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t) Reg,
 8000fee:	797b      	ldrb	r3, [r7, #5]
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	88f9      	ldrh	r1, [r7, #6]
 8000ff4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff8:	9302      	str	r3, [sp, #8]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2301      	movs	r3, #1
 8001004:	4806      	ldr	r0, [pc, #24]	; (8001020 <I2C1_WriteData+0x48>)
 8001006:	f001 fe95 	bl	8002d34 <HAL_I2C_Mem_Write>
 800100a:	4603      	mov	r3, r0
 800100c:	73fb      	strb	r3, [r7, #15]
	I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
	/* Check the communication status */
	if (status != HAL_OK) {
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <I2C1_WriteData+0x40>
		/* Execute user timeout callback */
		Error();
 8001014:	f7ff ff30 	bl	8000e78 <Error>
	}
}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000150 	.word	0x20000150

08001024 <Accel_IO_Write>:

void Accel_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
 800102e:	460b      	mov	r3, r1
 8001030:	717b      	strb	r3, [r7, #5]
 8001032:	4613      	mov	r3, r2
 8001034:	713b      	strb	r3, [r7, #4]
	I2C1_WriteData(DeviceAddr, RegisterAddr, Value);
 8001036:	793a      	ldrb	r2, [r7, #4]
 8001038:	7979      	ldrb	r1, [r7, #5]
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ffcb 	bl	8000fd8 <I2C1_WriteData>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <Accel_AccFilterConfig>:

void Accel_AccFilterConfig(uint8_t FilterStruct) {
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	71fb      	strb	r3, [r7, #7]
	uint8_t tmpreg;
	/* Read CTRL_REG2 register */
	tmpreg = Accel_IO_Read(0x32, LSM303DLHC_CTRL_REG2_A);
 8001054:	2121      	movs	r1, #33	; 0x21
 8001056:	2032      	movs	r0, #50	; 0x32
 8001058:	f7ff ff9a 	bl	8000f90 <Accel_IO_Read>
 800105c:	4603      	mov	r3, r0
 800105e:	73fb      	strb	r3, [r7, #15]
	tmpreg &= 0x0C;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	f003 030c 	and.w	r3, r3, #12
 8001066:	73fb      	strb	r3, [r7, #15]
	tmpreg |= FilterStruct;
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	4313      	orrs	r3, r2
 800106e:	73fb      	strb	r3, [r7, #15]
	/* Write value to ACC MEMS CTRL_REG2 register */
	Accel_IO_Write(0x32, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	461a      	mov	r2, r3
 8001074:	2121      	movs	r1, #33	; 0x21
 8001076:	2032      	movs	r0, #50	; 0x32
 8001078:	f7ff ffd4 	bl	8001024 <Accel_IO_Write>
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <Accel_GetXYZ>:

//——————————————————————————————————————————————————————————————————————————————
void Accel_GetXYZ(int16_t *pData) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	int16_t pnRawData[3];
	uint8_t ctrlx[2] = { 0, 0 };
 800108c:	2300      	movs	r3, #0
 800108e:	82bb      	strh	r3, [r7, #20]
	int8_t buffer[6];
	uint8_t i = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	77fb      	strb	r3, [r7, #31]
	uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001094:	2301      	movs	r3, #1
 8001096:	77bb      	strb	r3, [r7, #30]

	/* Read the acceleration control register content */
	ctrlx[0] = Accel_IO_Read(0x32, LSM303DLHC_CTRL_REG4_A);
 8001098:	2123      	movs	r1, #35	; 0x23
 800109a:	2032      	movs	r0, #50	; 0x32
 800109c:	f7ff ff78 	bl	8000f90 <Accel_IO_Read>
 80010a0:	4603      	mov	r3, r0
 80010a2:	753b      	strb	r3, [r7, #20]
	ctrlx[1] = Accel_IO_Read(0x32, LSM303DLHC_CTRL_REG5_A);
 80010a4:	2124      	movs	r1, #36	; 0x24
 80010a6:	2032      	movs	r0, #50	; 0x32
 80010a8:	f7ff ff72 	bl	8000f90 <Accel_IO_Read>
 80010ac:	4603      	mov	r3, r0
 80010ae:	757b      	strb	r3, [r7, #21]

	/* Read output register X, Y & Z acceleration */
	buffer[0] = Accel_IO_Read(0x32, LSM303DLHC_OUT_X_L_A);
 80010b0:	2128      	movs	r1, #40	; 0x28
 80010b2:	2032      	movs	r0, #50	; 0x32
 80010b4:	f7ff ff6c 	bl	8000f90 <Accel_IO_Read>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b25b      	sxtb	r3, r3
 80010bc:	733b      	strb	r3, [r7, #12]
	buffer[1] = Accel_IO_Read(0x32, LSM303DLHC_OUT_X_H_A);
 80010be:	2129      	movs	r1, #41	; 0x29
 80010c0:	2032      	movs	r0, #50	; 0x32
 80010c2:	f7ff ff65 	bl	8000f90 <Accel_IO_Read>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	737b      	strb	r3, [r7, #13]
	buffer[2] = Accel_IO_Read(0x32, LSM303DLHC_OUT_Y_L_A);
 80010cc:	212a      	movs	r1, #42	; 0x2a
 80010ce:	2032      	movs	r0, #50	; 0x32
 80010d0:	f7ff ff5e 	bl	8000f90 <Accel_IO_Read>
 80010d4:	4603      	mov	r3, r0
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	73bb      	strb	r3, [r7, #14]
	buffer[3] = Accel_IO_Read(0x32, LSM303DLHC_OUT_Y_H_A);
 80010da:	212b      	movs	r1, #43	; 0x2b
 80010dc:	2032      	movs	r0, #50	; 0x32
 80010de:	f7ff ff57 	bl	8000f90 <Accel_IO_Read>
 80010e2:	4603      	mov	r3, r0
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	73fb      	strb	r3, [r7, #15]
	buffer[4] = Accel_IO_Read(0x32, LSM303DLHC_OUT_Z_L_A);
 80010e8:	212c      	movs	r1, #44	; 0x2c
 80010ea:	2032      	movs	r0, #50	; 0x32
 80010ec:	f7ff ff50 	bl	8000f90 <Accel_IO_Read>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	743b      	strb	r3, [r7, #16]
	buffer[5] = Accel_IO_Read(0x32, LSM303DLHC_OUT_Z_H_A);
 80010f6:	212d      	movs	r1, #45	; 0x2d
 80010f8:	2032      	movs	r0, #50	; 0x32
 80010fa:	f7ff ff49 	bl	8000f90 <Accel_IO_Read>
 80010fe:	4603      	mov	r3, r0
 8001100:	b25b      	sxtb	r3, r3
 8001102:	747b      	strb	r3, [r7, #17]

	/* Check in the control register4 the data alignment*/
	if (!(ctrlx[0] & LSM303DLHC_BLE_MSB)) {
 8001104:	7d3b      	ldrb	r3, [r7, #20]
 8001106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800110a:	2b00      	cmp	r3, #0
 800110c:	d123      	bne.n	8001156 <Accel_GetXYZ+0xd2>
		for (i = 0; i < 3; i++) {
 800110e:	2300      	movs	r3, #0
 8001110:	77fb      	strb	r3, [r7, #31]
 8001112:	e01c      	b.n	800114e <Accel_GetXYZ+0xca>
			pnRawData[i] = ((int16_t) ((uint16_t) buffer[2 * i + 1] << 8)
 8001114:	7ffb      	ldrb	r3, [r7, #31]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	3301      	adds	r3, #1
 800111a:	3320      	adds	r3, #32
 800111c:	443b      	add	r3, r7
 800111e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001122:	b29b      	uxth	r3, r3
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	b29a      	uxth	r2, r3
					+ buffer[2 * i]);
 8001128:	7ffb      	ldrb	r3, [r7, #31]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	3320      	adds	r3, #32
 800112e:	443b      	add	r3, r7
 8001130:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001134:	b29b      	uxth	r3, r3
 8001136:	4413      	add	r3, r2
 8001138:	b29a      	uxth	r2, r3
			pnRawData[i] = ((int16_t) ((uint16_t) buffer[2 * i + 1] << 8)
 800113a:	7ffb      	ldrb	r3, [r7, #31]
					+ buffer[2 * i]);
 800113c:	b212      	sxth	r2, r2
			pnRawData[i] = ((int16_t) ((uint16_t) buffer[2 * i + 1] << 8)
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	3320      	adds	r3, #32
 8001142:	443b      	add	r3, r7
 8001144:	f823 2c08 	strh.w	r2, [r3, #-8]
		for (i = 0; i < 3; i++) {
 8001148:	7ffb      	ldrb	r3, [r7, #31]
 800114a:	3301      	adds	r3, #1
 800114c:	77fb      	strb	r3, [r7, #31]
 800114e:	7ffb      	ldrb	r3, [r7, #31]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d9df      	bls.n	8001114 <Accel_GetXYZ+0x90>
 8001154:	e022      	b.n	800119c <Accel_GetXYZ+0x118>
		}
	} else /* Big Endian Mode */
	{
		for (i = 0; i < 3; i++) {
 8001156:	2300      	movs	r3, #0
 8001158:	77fb      	strb	r3, [r7, #31]
 800115a:	e01c      	b.n	8001196 <Accel_GetXYZ+0x112>
			pnRawData[i] = ((int16_t) ((uint16_t) buffer[2 * i] << 8)
 800115c:	7ffb      	ldrb	r3, [r7, #31]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	3320      	adds	r3, #32
 8001162:	443b      	add	r3, r7
 8001164:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001168:	b29b      	uxth	r3, r3
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	b29a      	uxth	r2, r3
					+ buffer[2 * i + 1]);
 800116e:	7ffb      	ldrb	r3, [r7, #31]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	3301      	adds	r3, #1
 8001174:	3320      	adds	r3, #32
 8001176:	443b      	add	r3, r7
 8001178:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800117c:	b29b      	uxth	r3, r3
 800117e:	4413      	add	r3, r2
 8001180:	b29a      	uxth	r2, r3
			pnRawData[i] = ((int16_t) ((uint16_t) buffer[2 * i] << 8)
 8001182:	7ffb      	ldrb	r3, [r7, #31]
					+ buffer[2 * i + 1]);
 8001184:	b212      	sxth	r2, r2
			pnRawData[i] = ((int16_t) ((uint16_t) buffer[2 * i] << 8)
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	3320      	adds	r3, #32
 800118a:	443b      	add	r3, r7
 800118c:	f823 2c08 	strh.w	r2, [r3, #-8]
		for (i = 0; i < 3; i++) {
 8001190:	7ffb      	ldrb	r3, [r7, #31]
 8001192:	3301      	adds	r3, #1
 8001194:	77fb      	strb	r3, [r7, #31]
 8001196:	7ffb      	ldrb	r3, [r7, #31]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d9df      	bls.n	800115c <Accel_GetXYZ+0xd8>
		}
	}
	/* Normal mode */

	/* Switch the sensitivity value set in the CRTL4 */
	switch (ctrlx[0] & LSM303DLHC_FULLSCALE_16G) {
 800119c:	7d3b      	ldrb	r3, [r7, #20]
 800119e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80011a2:	2b30      	cmp	r3, #48	; 0x30
 80011a4:	d013      	beq.n	80011ce <Accel_GetXYZ+0x14a>
 80011a6:	2b30      	cmp	r3, #48	; 0x30
 80011a8:	dc14      	bgt.n	80011d4 <Accel_GetXYZ+0x150>
 80011aa:	2b20      	cmp	r3, #32
 80011ac:	d00c      	beq.n	80011c8 <Accel_GetXYZ+0x144>
 80011ae:	2b20      	cmp	r3, #32
 80011b0:	dc10      	bgt.n	80011d4 <Accel_GetXYZ+0x150>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <Accel_GetXYZ+0x138>
 80011b6:	2b10      	cmp	r3, #16
 80011b8:	d003      	beq.n	80011c2 <Accel_GetXYZ+0x13e>
 80011ba:	e00b      	b.n	80011d4 <Accel_GetXYZ+0x150>
	case LSM303DLHC_FULLSCALE_2G:
		sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 80011bc:	2301      	movs	r3, #1
 80011be:	77bb      	strb	r3, [r7, #30]
		break;
 80011c0:	e008      	b.n	80011d4 <Accel_GetXYZ+0x150>

	case LSM303DLHC_FULLSCALE_4G:
		sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 80011c2:	2302      	movs	r3, #2
 80011c4:	77bb      	strb	r3, [r7, #30]
		break;
 80011c6:	e005      	b.n	80011d4 <Accel_GetXYZ+0x150>

	case LSM303DLHC_FULLSCALE_8G:
		sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 80011c8:	2304      	movs	r3, #4
 80011ca:	77bb      	strb	r3, [r7, #30]
		break;
 80011cc:	e002      	b.n	80011d4 <Accel_GetXYZ+0x150>

	case LSM303DLHC_FULLSCALE_16G:
		sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 80011ce:	230c      	movs	r3, #12
 80011d0:	77bb      	strb	r3, [r7, #30]
		break;
 80011d2:	bf00      	nop
	}

	/* Obtain the mg value for the three axis */
	for (i = 0; i < 3; i++) {
 80011d4:	2300      	movs	r3, #0
 80011d6:	77fb      	strb	r3, [r7, #31]
 80011d8:	e014      	b.n	8001204 <Accel_GetXYZ+0x180>
		pData[i] = (pnRawData[i] * sensitivity);
 80011da:	7ffb      	ldrb	r3, [r7, #31]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	3320      	adds	r3, #32
 80011e0:	443b      	add	r3, r7
 80011e2:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	7fbb      	ldrb	r3, [r7, #30]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	fb12 f303 	smulbb	r3, r2, r3
 80011f0:	b299      	uxth	r1, r3
 80011f2:	7ffb      	ldrb	r3, [r7, #31]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	b20a      	sxth	r2, r1
 80011fc:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 3; i++) {
 80011fe:	7ffb      	ldrb	r3, [r7, #31]
 8001200:	3301      	adds	r3, #1
 8001202:	77fb      	strb	r3, [r7, #31]
 8001204:	7ffb      	ldrb	r3, [r7, #31]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d9e7      	bls.n	80011da <Accel_GetXYZ+0x156>
	}
}
 800120a:	bf00      	nop
 800120c:	bf00      	nop
 800120e:	3720      	adds	r7, #32
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <Accel_ReadAcc>:
//——————————————————————————————————————————————————————————————————————————————

void Accel_ReadAcc(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
	int16_t buffer[3] = { 0 };
 800121a:	463b      	mov	r3, r7
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	809a      	strh	r2, [r3, #4]
	int16_t xval, yval, zval = 0x00;
 8001222:	2300      	movs	r3, #0
 8001224:	81fb      	strh	r3, [r7, #14]
	uint16_t tmp16 = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	81bb      	strh	r3, [r7, #12]

	Accel_GetXYZ(buffer);
 800122a:	463b      	mov	r3, r7
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff29 	bl	8001084 <Accel_GetXYZ>
	xval = buffer[0];
 8001232:	883b      	ldrh	r3, [r7, #0]
 8001234:	817b      	strh	r3, [r7, #10]
	x_acc = xval;
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <Accel_ReadAcc+0x44>)
 8001238:	897b      	ldrh	r3, [r7, #10]
 800123a:	8013      	strh	r3, [r2, #0]
	yval = buffer[1];
 800123c:	887b      	ldrh	r3, [r7, #2]
 800123e:	813b      	strh	r3, [r7, #8]
	y_acc = yval;
 8001240:	4a06      	ldr	r2, [pc, #24]	; (800125c <Accel_ReadAcc+0x48>)
 8001242:	893b      	ldrh	r3, [r7, #8]
 8001244:	8013      	strh	r3, [r2, #0]
	zval = buffer[2];
 8001246:	88bb      	ldrh	r3, [r7, #4]
 8001248:	81fb      	strh	r3, [r7, #14]
	z_acc = zval;
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <Accel_ReadAcc+0x4c>)
 800124c:	89fb      	ldrh	r3, [r7, #14]
 800124e:	8013      	strh	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000048 	.word	0x20000048
 800125c:	2000004a 	.word	0x2000004a
 8001260:	2000004c 	.word	0x2000004c

08001264 <disp1color_FillScreenbuff>:

//==============================================================================
// Процедура заполняет буфер кадра значением FillValue
//==============================================================================
void disp1color_FillScreenbuff(uint8_t FillValue)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  memset(disp1color_buff, FillValue, sizeof(disp1color_buff));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2240      	movs	r2, #64	; 0x40
 8001272:	4619      	mov	r1, r3
 8001274:	4803      	ldr	r0, [pc, #12]	; (8001284 <disp1color_FillScreenbuff+0x20>)
 8001276:	f004 faeb 	bl	8005850 <memset>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200000d0 	.word	0x200000d0

08001288 <disp1color_UpdateFromBuff>:

//==============================================================================
// Процедура обновляет состояние индикаторов в соответствии с буфером кадра disp1color_buff
//==============================================================================
void disp1color_UpdateFromBuff(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  DMD_1COLOR_DisplayFullUpdate(disp1color_buff, sizeof(disp1color_buff));
 800128c:	2140      	movs	r1, #64	; 0x40
 800128e:	4802      	ldr	r0, [pc, #8]	; (8001298 <disp1color_UpdateFromBuff+0x10>)
 8001290:	f000 f97e 	bl	8001590 <DMD_1COLOR_DisplayFullUpdate>

  //printf("BUF horz:\n");
  //print_buf(DMD_1COLOR_Buff, sizeof(DMD_1COLOR_Buff));
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200000d0 	.word	0x200000d0

0800129c <disp1color_DrawPixel>:

//==============================================================================
// Процедура устанавливает состояние 1 пикселя дисплея
//==============================================================================
void disp1color_DrawPixel(int16_t X, int16_t Y, uint8_t State)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
 80012a6:	460b      	mov	r3, r1
 80012a8:	80bb      	strh	r3, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	70fb      	strb	r3, [r7, #3]
  //Х и У координаты пикселя, отсчитываются слева направо (Х) сверху вниз (У) с 0
  // Проверяем, находится ли точка в поле отрисовки дисплея
  if ((X >= DISP1COLOR_Width) || (Y >= DISP1COLOR_Height) || (X < 0) || (Y < 0))
 80012ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b2:	2b1f      	cmp	r3, #31
 80012b4:	dc48      	bgt.n	8001348 <disp1color_DrawPixel+0xac>
 80012b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012ba:	2b0f      	cmp	r3, #15
 80012bc:	dc44      	bgt.n	8001348 <disp1color_DrawPixel+0xac>
 80012be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db40      	blt.n	8001348 <disp1color_DrawPixel+0xac>
 80012c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db3c      	blt.n	8001348 <disp1color_DrawPixel+0xac>
    return;
  
  //Байты относительно матрицы расположены вертикально, в 2 ряда
  uint16_t ByteIdx = Y >> 3;
 80012ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012d2:	10db      	asrs	r3, r3, #3
 80012d4:	b21b      	sxth	r3, r3
 80012d6:	81fb      	strh	r3, [r7, #14]
  uint8_t BitIdx = Y - (ByteIdx << 3); // Высота относительно строки байт (0<=Y<=7)
 80012d8:	88bb      	ldrh	r3, [r7, #4]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	89fb      	ldrh	r3, [r7, #14]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	737b      	strb	r3, [r7, #13]
  ByteIdx *= DISP1COLOR_Width;  
 80012e8:	89fb      	ldrh	r3, [r7, #14]
 80012ea:	015b      	lsls	r3, r3, #5
 80012ec:	81fb      	strh	r3, [r7, #14]
  ByteIdx += X;
 80012ee:	88fa      	ldrh	r2, [r7, #6]
 80012f0:	89fb      	ldrh	r3, [r7, #14]
 80012f2:	4413      	add	r3, r2
 80012f4:	81fb      	strh	r3, [r7, #14]
  
  //Заполнение буфера данных для отрисовки
  if (State)
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00f      	beq.n	800131c <disp1color_DrawPixel+0x80>
    disp1color_buff[ByteIdx] |= (1 << BitIdx);
 80012fc:	89fb      	ldrh	r3, [r7, #14]
 80012fe:	4a15      	ldr	r2, [pc, #84]	; (8001354 <disp1color_DrawPixel+0xb8>)
 8001300:	5cd3      	ldrb	r3, [r2, r3]
 8001302:	b25a      	sxtb	r2, r3
 8001304:	7b7b      	ldrb	r3, [r7, #13]
 8001306:	2101      	movs	r1, #1
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	b25b      	sxtb	r3, r3
 800130e:	4313      	orrs	r3, r2
 8001310:	b25a      	sxtb	r2, r3
 8001312:	89fb      	ldrh	r3, [r7, #14]
 8001314:	b2d1      	uxtb	r1, r2
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <disp1color_DrawPixel+0xb8>)
 8001318:	54d1      	strb	r1, [r2, r3]
 800131a:	e010      	b.n	800133e <disp1color_DrawPixel+0xa2>
  else
    disp1color_buff[ByteIdx] &= ~(1 << BitIdx);
 800131c:	89fb      	ldrh	r3, [r7, #14]
 800131e:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <disp1color_DrawPixel+0xb8>)
 8001320:	5cd3      	ldrb	r3, [r2, r3]
 8001322:	b25a      	sxtb	r2, r3
 8001324:	7b7b      	ldrb	r3, [r7, #13]
 8001326:	2101      	movs	r1, #1
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	b25b      	sxtb	r3, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	b25b      	sxtb	r3, r3
 8001332:	4013      	ands	r3, r2
 8001334:	b25a      	sxtb	r2, r3
 8001336:	89fb      	ldrh	r3, [r7, #14]
 8001338:	b2d1      	uxtb	r1, r2
 800133a:	4a06      	ldr	r2, [pc, #24]	; (8001354 <disp1color_DrawPixel+0xb8>)
 800133c:	54d1      	strb	r1, [r2, r3]

 // printf("PIX:%d%s", disp1color_buff[ByteIdx], "\n");
  uint8_t buf = disp1color_buff[ByteIdx];
 800133e:	89fb      	ldrh	r3, [r7, #14]
 8001340:	4a04      	ldr	r2, [pc, #16]	; (8001354 <disp1color_DrawPixel+0xb8>)
 8001342:	5cd3      	ldrb	r3, [r2, r3]
 8001344:	733b      	strb	r3, [r7, #12]
 8001346:	e000      	b.n	800134a <disp1color_DrawPixel+0xae>
    return;
 8001348:	bf00      	nop
//  for (int i = 0; i < 8; i++) {
//	  printf("%c", (buf & 0x80) ? '1' : '0');
//	  buf <<= 1;
//  }
//  printf("\n");
}
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	200000d0 	.word	0x200000d0

08001358 <disp1color_DrawLine>:

//==============================================================================
// Процедура рисует прямую линию в буфере кадра дисплея
//==============================================================================
void disp1color_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2) 
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	4604      	mov	r4, r0
 8001360:	4608      	mov	r0, r1
 8001362:	4611      	mov	r1, r2
 8001364:	461a      	mov	r2, r3
 8001366:	4623      	mov	r3, r4
 8001368:	80fb      	strh	r3, [r7, #6]
 800136a:	4603      	mov	r3, r0
 800136c:	80bb      	strh	r3, [r7, #4]
 800136e:	460b      	mov	r3, r1
 8001370:	807b      	strh	r3, [r7, #2]
 8001372:	4613      	mov	r3, r2
 8001374:	803b      	strh	r3, [r7, #0]
  const int16_t deltaX = abs(x2 - x1);
 8001376:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800137a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	bfb8      	it	lt
 8001384:	425b      	neglt	r3, r3
 8001386:	82bb      	strh	r3, [r7, #20]
  const int16_t deltaY = abs(y2 - y1);
 8001388:	f9b7 2000 	ldrsh.w	r2, [r7]
 800138c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	bfb8      	it	lt
 8001396:	425b      	neglt	r3, r3
 8001398:	827b      	strh	r3, [r7, #18]
  const int16_t signX = x1 < x2 ? 1 : -1;
 800139a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800139e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	da01      	bge.n	80013aa <disp1color_DrawLine+0x52>
 80013a6:	2301      	movs	r3, #1
 80013a8:	e001      	b.n	80013ae <disp1color_DrawLine+0x56>
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	823b      	strh	r3, [r7, #16]
  const int16_t signY = y1 < y2 ? 1 : -1;
 80013b0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013b4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	da01      	bge.n	80013c0 <disp1color_DrawLine+0x68>
 80013bc:	2301      	movs	r3, #1
 80013be:	e001      	b.n	80013c4 <disp1color_DrawLine+0x6c>
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	81fb      	strh	r3, [r7, #14]

  int16_t error = deltaX - deltaY;
 80013c6:	8aba      	ldrh	r2, [r7, #20]
 80013c8:	8a7b      	ldrh	r3, [r7, #18]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	82fb      	strh	r3, [r7, #22]

  disp1color_DrawPixel(x2, y2, 1);
 80013d0:	f9b7 1000 	ldrsh.w	r1, [r7]
 80013d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013d8:	2201      	movs	r2, #1
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff5e 	bl	800129c <disp1color_DrawPixel>

  while (x1 != x2 || y1 != y2) 
 80013e0:	e02c      	b.n	800143c <disp1color_DrawLine+0xe4>
  {
    disp1color_DrawPixel(x1, y1, 1);
 80013e2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80013e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ea:	2201      	movs	r2, #1
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff55 	bl	800129c <disp1color_DrawPixel>
    const int16_t error2 = error * 2;
 80013f2:	8afb      	ldrh	r3, [r7, #22]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	81bb      	strh	r3, [r7, #12]
 
    if (error2 > -deltaY) 
 80013fa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80013fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001402:	425b      	negs	r3, r3
 8001404:	429a      	cmp	r2, r3
 8001406:	dd09      	ble.n	800141c <disp1color_DrawLine+0xc4>
    {
      error -= deltaY;
 8001408:	8afa      	ldrh	r2, [r7, #22]
 800140a:	8a7b      	ldrh	r3, [r7, #18]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	b29b      	uxth	r3, r3
 8001410:	82fb      	strh	r3, [r7, #22]
      x1 += signX;
 8001412:	88fa      	ldrh	r2, [r7, #6]
 8001414:	8a3b      	ldrh	r3, [r7, #16]
 8001416:	4413      	add	r3, r2
 8001418:	b29b      	uxth	r3, r3
 800141a:	80fb      	strh	r3, [r7, #6]
    }
    if (error2 < deltaX)
 800141c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001420:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001424:	429a      	cmp	r2, r3
 8001426:	da09      	bge.n	800143c <disp1color_DrawLine+0xe4>
    {
      error += deltaX;
 8001428:	8afa      	ldrh	r2, [r7, #22]
 800142a:	8abb      	ldrh	r3, [r7, #20]
 800142c:	4413      	add	r3, r2
 800142e:	b29b      	uxth	r3, r3
 8001430:	82fb      	strh	r3, [r7, #22]
      y1 += signY;
 8001432:	88ba      	ldrh	r2, [r7, #4]
 8001434:	89fb      	ldrh	r3, [r7, #14]
 8001436:	4413      	add	r3, r2
 8001438:	b29b      	uxth	r3, r3
 800143a:	80bb      	strh	r3, [r7, #4]
  while (x1 != x2 || y1 != y2) 
 800143c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001440:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001444:	429a      	cmp	r2, r3
 8001446:	d1cc      	bne.n	80013e2 <disp1color_DrawLine+0x8a>
 8001448:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800144c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001450:	429a      	cmp	r2, r3
 8001452:	d1c6      	bne.n	80013e2 <disp1color_DrawLine+0x8a>
    }
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	371c      	adds	r7, #28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd90      	pop	{r4, r7, pc}

0800145e <disp1color_DrawCircle>:

//==============================================================================
// Процедура рисует окружность в буфере кадра дисплея. x0 и y0 - координаты центра окружности
//==============================================================================
void disp1color_DrawCircle(int16_t x0, int16_t y0, int16_t radius) 
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b086      	sub	sp, #24
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	80fb      	strh	r3, [r7, #6]
 8001468:	460b      	mov	r3, r1
 800146a:	80bb      	strh	r3, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	807b      	strh	r3, [r7, #2]
  int x = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  int y = radius;
 8001474:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001478:	613b      	str	r3, [r7, #16]
  int delta = 1 - 2 * radius;
 800147a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	f1c3 0301 	rsb	r3, r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
  int error = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]

  while (y >= 0)
 800148a:	e079      	b.n	8001580 <disp1color_DrawCircle+0x122>
  {
    disp1color_DrawPixel(x0 + x, y0 + y, 1);
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	b29a      	uxth	r2, r3
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	4413      	add	r3, r2
 8001494:	b29b      	uxth	r3, r3
 8001496:	b218      	sxth	r0, r3
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	b29a      	uxth	r2, r3
 800149c:	88bb      	ldrh	r3, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	2201      	movs	r2, #1
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff fef8 	bl	800129c <disp1color_DrawPixel>
    disp1color_DrawPixel(x0 + x, y0 - y, 1);
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	4413      	add	r3, r2
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	b218      	sxth	r0, r3
 80014b8:	88ba      	ldrh	r2, [r7, #4]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	2201      	movs	r2, #1
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fee8 	bl	800129c <disp1color_DrawPixel>
    disp1color_DrawPixel(x0 - x, y0 + y, 1);
 80014cc:	88fa      	ldrh	r2, [r7, #6]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	b218      	sxth	r0, r3
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	b29a      	uxth	r2, r3
 80014dc:	88bb      	ldrh	r3, [r7, #4]
 80014de:	4413      	add	r3, r2
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	2201      	movs	r2, #1
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fed8 	bl	800129c <disp1color_DrawPixel>
    disp1color_DrawPixel(x0 - x, y0 - y, 1);
 80014ec:	88fa      	ldrh	r2, [r7, #6]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b218      	sxth	r0, r3
 80014f8:	88ba      	ldrh	r2, [r7, #4]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	b29b      	uxth	r3, r3
 8001502:	b21b      	sxth	r3, r3
 8001504:	2201      	movs	r2, #1
 8001506:	4619      	mov	r1, r3
 8001508:	f7ff fec8 	bl	800129c <disp1color_DrawPixel>
    error = 2 * (delta + y) - 1;
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4413      	add	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	3b01      	subs	r3, #1
 8001516:	60bb      	str	r3, [r7, #8]

    if (delta < 0 && error <= 0) 
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	da0c      	bge.n	8001538 <disp1color_DrawCircle+0xda>
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	dc09      	bgt.n	8001538 <disp1color_DrawCircle+0xda>
    {
      ++x;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	3301      	adds	r3, #1
 8001528:	617b      	str	r3, [r7, #20]
      delta += 2 * x + 1;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	3301      	adds	r3, #1
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
      continue;
 8001536:	e023      	b.n	8001580 <disp1color_DrawCircle+0x122>
    }
	
    error = 2 * (delta - x) - 1;
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	3b01      	subs	r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
		
    if (delta > 0 && error > 0) 
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	dd0d      	ble.n	8001566 <disp1color_DrawCircle+0x108>
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	dd0a      	ble.n	8001566 <disp1color_DrawCircle+0x108>
    {
      --y;
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	3b01      	subs	r3, #1
 8001554:	613b      	str	r3, [r7, #16]
      delta += 1 - 2 * y;
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	f1c3 0301 	rsb	r3, r3, #1
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4413      	add	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]
      continue;
 8001564:	e00c      	b.n	8001580 <disp1color_DrawCircle+0x122>
    }
	
    ++x;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3301      	adds	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
    delta += 2 * (x - y);
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	4413      	add	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
    --y;
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	3b01      	subs	r3, #1
 800157e:	613b      	str	r3, [r7, #16]
  while (y >= 0)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	2b00      	cmp	r3, #0
 8001584:	da82      	bge.n	800148c <disp1color_DrawCircle+0x2e>
  }
}
 8001586:	bf00      	nop
 8001588:	bf00      	nop
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <DMD_1COLOR_DisplayFullUpdate>:

//==============================================================================
// Процедура подготавливает буфер на передачу в экран в соответствии с буфером pBuff графической бибилиотеки
//==============================================================================
void DMD_1COLOR_DisplayFullUpdate(uint8_t *pBuff, uint16_t BuffLen)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
	DMD_1COLOR_UpdateRow4(0, pBuff, BuffLen);
 800159c:	887b      	ldrh	r3, [r7, #2]
 800159e:	461a      	mov	r2, r3
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	2000      	movs	r0, #0
 80015a4:	f000 f816 	bl	80015d4 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(1, pBuff, BuffLen);
 80015a8:	887b      	ldrh	r3, [r7, #2]
 80015aa:	461a      	mov	r2, r3
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	2001      	movs	r0, #1
 80015b0:	f000 f810 	bl	80015d4 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(2, pBuff, BuffLen);
 80015b4:	887b      	ldrh	r3, [r7, #2]
 80015b6:	461a      	mov	r2, r3
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	2002      	movs	r0, #2
 80015bc:	f000 f80a 	bl	80015d4 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(3, pBuff, BuffLen);
 80015c0:	887b      	ldrh	r3, [r7, #2]
 80015c2:	461a      	mov	r2, r3
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	2003      	movs	r0, #3
 80015c8:	f000 f804 	bl	80015d4 <DMD_1COLOR_UpdateRow4>
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <DMD_1COLOR_UpdateRow4>:

//==============================================================================
// Процедура обновляет поочерёдно все матрицы экрана
//==============================================================================
void DMD_1COLOR_UpdateRow4(uint8_t Row4, uint8_t *pBuff, uint16_t BuffLen)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
 80015e0:	4613      	mov	r3, r2
 80015e2:	80bb      	strh	r3, [r7, #4]
	// Подготавливаем данные для передачи
	uint16_t MatrixInRow = DMD_1COLOR_ScreenWidth / DMD_1COLOR_MatrixWidth;
 80015e4:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <DMD_1COLOR_UpdateRow4+0xcc>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	095b      	lsrs	r3, r3, #5
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	81bb      	strh	r3, [r7, #12]
	uint16_t MatrixInCol = DMD_1COLOR_ScreenHeight / DMD_1COLOR_MatrixHeight;
 80015ee:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <DMD_1COLOR_UpdateRow4+0xd0>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	817b      	strh	r3, [r7, #10]
	uint8_t MatrixLines8 = DMD_1COLOR_MatrixHeight >> 3;
 80015f8:	2302      	movs	r3, #2
 80015fa:	727b      	strb	r3, [r7, #9]
	uint16_t StartIdxRow = 0, StartIdxCol = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	83fb      	strh	r3, [r7, #30]
 8001600:	2300      	movs	r3, #0
 8001602:	83bb      	strh	r3, [r7, #28]

	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 8001604:	2300      	movs	r3, #0
 8001606:	76fb      	strb	r3, [r7, #27]
 8001608:	e040      	b.n	800168c <DMD_1COLOR_UpdateRow4+0xb8>
	{
		StartIdxCol = StartIdxRow;
 800160a:	8bfb      	ldrh	r3, [r7, #30]
 800160c:	83bb      	strh	r3, [r7, #28]

		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 800160e:	2300      	movs	r3, #0
 8001610:	76bb      	strb	r3, [r7, #26]
 8001612:	e028      	b.n	8001666 <DMD_1COLOR_UpdateRow4+0x92>
		{
			// Копируем буфер кадра одной матрицы
			uint8_t *pDst = DMD_1COLOR_MatrixBuff;
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <DMD_1COLOR_UpdateRow4+0xd4>)
 8001616:	617b      	str	r3, [r7, #20]
			uint8_t *pSrc = &pBuff[StartIdxCol];
 8001618:	8bbb      	ldrh	r3, [r7, #28]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	4413      	add	r3, r2
 800161e:	613b      	str	r3, [r7, #16]

			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 8001620:	2300      	movs	r3, #0
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	e015      	b.n	8001652 <DMD_1COLOR_UpdateRow4+0x7e>
			{
				memcpy(pDst, pSrc, DMD_1COLOR_MatrixWidth);
 8001626:	2220      	movs	r2, #32
 8001628:	6939      	ldr	r1, [r7, #16]
 800162a:	6978      	ldr	r0, [r7, #20]
 800162c:	f004 f902 	bl	8005834 <memcpy>
				DMD_1COLOR_SendFromMatrixBuff(Row4, DMD_1COLOR_MatrixBuff);
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	491d      	ldr	r1, [pc, #116]	; (80016a8 <DMD_1COLOR_UpdateRow4+0xd4>)
 8001634:	4618      	mov	r0, r3
 8001636:	f000 f839 	bl	80016ac <DMD_1COLOR_SendFromMatrixBuff>
				pDst += DMD_1COLOR_MatrixWidth;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3320      	adds	r3, #32
 800163e:	617b      	str	r3, [r7, #20]
				pSrc += DMD_1COLOR_ScreenWidth;
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <DMD_1COLOR_UpdateRow4+0xcc>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4413      	add	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	3301      	adds	r3, #1
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	7a7b      	ldrb	r3, [r7, #9]
 8001656:	429a      	cmp	r2, r3
 8001658:	d3e5      	bcc.n	8001626 <DMD_1COLOR_UpdateRow4+0x52>
			}

			StartIdxCol += DMD_1COLOR_MatrixWidth;
 800165a:	8bbb      	ldrh	r3, [r7, #28]
 800165c:	3320      	adds	r3, #32
 800165e:	83bb      	strh	r3, [r7, #28]
		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 8001660:	7ebb      	ldrb	r3, [r7, #26]
 8001662:	3301      	adds	r3, #1
 8001664:	76bb      	strb	r3, [r7, #26]
 8001666:	7ebb      	ldrb	r3, [r7, #26]
 8001668:	b29b      	uxth	r3, r3
 800166a:	897a      	ldrh	r2, [r7, #10]
 800166c:	429a      	cmp	r2, r3
 800166e:	d8d1      	bhi.n	8001614 <DMD_1COLOR_UpdateRow4+0x40>
		}
		StartIdxRow += MatrixLines8 * DMD_1COLOR_ScreenWidth;
 8001670:	7a7b      	ldrb	r3, [r7, #9]
 8001672:	b29a      	uxth	r2, r3
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <DMD_1COLOR_UpdateRow4+0xcc>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b29b      	uxth	r3, r3
 800167a:	fb12 f303 	smulbb	r3, r2, r3
 800167e:	b29a      	uxth	r2, r3
 8001680:	8bfb      	ldrh	r3, [r7, #30]
 8001682:	4413      	add	r3, r2
 8001684:	83fb      	strh	r3, [r7, #30]
	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 8001686:	7efb      	ldrb	r3, [r7, #27]
 8001688:	3301      	adds	r3, #1
 800168a:	76fb      	strb	r3, [r7, #27]
 800168c:	7efb      	ldrb	r3, [r7, #27]
 800168e:	b29b      	uxth	r3, r3
 8001690:	89ba      	ldrh	r2, [r7, #12]
 8001692:	429a      	cmp	r2, r3
 8001694:	d8b9      	bhi.n	800160a <DMD_1COLOR_UpdateRow4+0x36>
	}
}
 8001696:	bf00      	nop
 8001698:	bf00      	nop
 800169a:	3720      	adds	r7, #32
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000001 	.word	0x20000001
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20000050 	.word	0x20000050

080016ac <DMD_1COLOR_SendFromMatrixBuff>:


//==============================================================================
// Процедура обновляет 1 матрицу
//==============================================================================
void DMD_1COLOR_SendFromMatrixBuff(uint8_t Row4, uint8_t *pBuff) {
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b087      	sub	sp, #28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	6039      	str	r1, [r7, #0]
 80016b6:	71fb      	strb	r3, [r7, #7]
	uint8_t MatrixRows8bit = DMD_1COLOR_MatrixHeight >> 3;
 80016b8:	2302      	movs	r3, #2
 80016ba:	747b      	strb	r3, [r7, #17]
	uint8_t MatrixCols8bit = DMD_1COLOR_MatrixWidth >> 3;
 80016bc:	2304      	movs	r3, #4
 80016be:	743b      	strb	r3, [r7, #16]
	uint8_t *pPart = (uint8_t*) &(DMD_1COLOR_Buff[Row4][0]);
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	4a22      	ldr	r2, [pc, #136]	; (8001750 <DMD_1COLOR_SendFromMatrixBuff+0xa4>)
 80016c6:	4413      	add	r3, r2
 80016c8:	617b      	str	r3, [r7, #20]

	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	74fb      	strb	r3, [r7, #19]
 80016ce:	e035      	b.n	800173c <DMD_1COLOR_SendFromMatrixBuff+0x90>
		for (uint8_t Row = MatrixRows8bit; Row; Row--) {
 80016d0:	7c7b      	ldrb	r3, [r7, #17]
 80016d2:	74bb      	strb	r3, [r7, #18]
 80016d4:	e02c      	b.n	8001730 <DMD_1COLOR_SendFromMatrixBuff+0x84>
			uint8_t *p8Bytes = pBuff + ((Row - 1) * DMD_1COLOR_MatrixWidth);
 80016d6:	7cbb      	ldrb	r3, [r7, #18]
 80016d8:	3b01      	subs	r3, #1
 80016da:	015b      	lsls	r3, r3, #5
 80016dc:	461a      	mov	r2, r3
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	4413      	add	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]
			p8Bytes += (Col << 3);
 80016e4:	7cfb      	ldrb	r3, [r7, #19]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	461a      	mov	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4413      	add	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]

			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << (Row4 + 4),
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	3304      	adds	r3, #4
 80016f4:	2201      	movs	r2, #1
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	697c      	ldr	r4, [r7, #20]
 80016fe:	1c63      	adds	r3, r4, #1
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	68f9      	ldr	r1, [r7, #12]
 8001704:	4610      	mov	r0, r2
 8001706:	f000 f825 	bl	8001754 <DMD_1COLOR_GetFrom8ScreenBytes>
 800170a:	4603      	mov	r3, r0
 800170c:	7023      	strb	r3, [r4, #0]
					p8Bytes);
			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << Row4, p8Bytes);
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2201      	movs	r2, #1
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	b2da      	uxtb	r2, r3
 8001718:	697c      	ldr	r4, [r7, #20]
 800171a:	1c63      	adds	r3, r4, #1
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	68f9      	ldr	r1, [r7, #12]
 8001720:	4610      	mov	r0, r2
 8001722:	f000 f817 	bl	8001754 <DMD_1COLOR_GetFrom8ScreenBytes>
 8001726:	4603      	mov	r3, r0
 8001728:	7023      	strb	r3, [r4, #0]
		for (uint8_t Row = MatrixRows8bit; Row; Row--) {
 800172a:	7cbb      	ldrb	r3, [r7, #18]
 800172c:	3b01      	subs	r3, #1
 800172e:	74bb      	strb	r3, [r7, #18]
 8001730:	7cbb      	ldrb	r3, [r7, #18]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1cf      	bne.n	80016d6 <DMD_1COLOR_SendFromMatrixBuff+0x2a>
	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++) {
 8001736:	7cfb      	ldrb	r3, [r7, #19]
 8001738:	3301      	adds	r3, #1
 800173a:	74fb      	strb	r3, [r7, #19]
 800173c:	7cfa      	ldrb	r2, [r7, #19]
 800173e:	7c3b      	ldrb	r3, [r7, #16]
 8001740:	429a      	cmp	r2, r3
 8001742:	d3c5      	bcc.n	80016d0 <DMD_1COLOR_SendFromMatrixBuff+0x24>
		}
	}
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	371c      	adds	r7, #28
 800174a:	46bd      	mov	sp, r7
 800174c:	bd90      	pop	{r4, r7, pc}
 800174e:	bf00      	nop
 8001750:	20000090 	.word	0x20000090

08001754 <DMD_1COLOR_GetFrom8ScreenBytes>:
//==============================================================================
// Функция возвращает байт (строку из 8 светодиодов) по 8-байтному фрагменту буфера
// графической библиотеки и маске соответствующей строки светодиодов во фрагменте
//==============================================================================
uint8_t DMD_1COLOR_GetFrom8ScreenBytes(uint8_t Mask, uint8_t *pBuff)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
	uint8_t Byte = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]
	//Переводим "вертикальные" байты из массива в горизонтальные
	//в соответствии с текущей строкой.
	//В итоге получается массив, где биты расположены горизонтально,
	//Первый бит слева внизу, счет увеличивается вверх и вправо.
	//Но строки в секторе расположены сверху вниз
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	73bb      	strb	r3, [r7, #14]
 8001768:	e010      	b.n	800178c <DMD_1COLOR_GetFrom8ScreenBytes+0x38>
	{
		if (*pBuff & Mask)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	781a      	ldrb	r2, [r3, #0]
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	4013      	ands	r3, r2
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <DMD_1COLOR_GetFrom8ScreenBytes+0x2c>
			Byte |= BitMask;
 8001778:	7bfa      	ldrb	r2, [r7, #15]
 800177a:	7bbb      	ldrb	r3, [r7, #14]
 800177c:	4313      	orrs	r3, r2
 800177e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 8001780:	7bbb      	ldrb	r3, [r7, #14]
 8001782:	085b      	lsrs	r3, r3, #1
 8001784:	73bb      	strb	r3, [r7, #14]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	3301      	adds	r3, #1
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	7bbb      	ldrb	r3, [r7, #14]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1eb      	bne.n	800176a <DMD_1COLOR_GetFrom8ScreenBytes+0x16>
	}

//#if (DMD_1COLOR_Inverse == 1)
	//Инвертируем данные (так как LED панель горит при 0)
	Byte ^= 0xFF;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	43db      	mvns	r3, r3
 8001796:	73fb      	strb	r3, [r7, #15]
//#endif

	return Byte;
 8001798:	7bfb      	ldrb	r3, [r7, #15]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <prepare_data>:
//==============================================================================


//Копирование из подготовленного буфера в массивиы для построчного вводы в матрицу
void prepare_data() {
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
	//Идем по строкам
	for (uint8_t i = 0; i < sizeof(DMD_1COLOR_Buff) / sizeof(DMD_1COLOR_Buff[0]); i++) {
 80017ae:	2300      	movs	r3, #0
 80017b0:	71fb      	strb	r3, [r7, #7]
 80017b2:	e042      	b.n	800183a <prepare_data+0x92>
		//По столбцам
		for (uint8_t k = 0; k < sizeof(DMD_1COLOR_Buff[0]); k++) {
 80017b4:	2300      	movs	r3, #0
 80017b6:	71bb      	strb	r3, [r7, #6]
 80017b8:	e039      	b.n	800182e <prepare_data+0x86>
			if (i == 0) {
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10a      	bne.n	80017d6 <prepare_data+0x2e>
				data1[k] = DMD_1COLOR_Buff[i][k];
 80017c0:	79f9      	ldrb	r1, [r7, #7]
 80017c2:	79ba      	ldrb	r2, [r7, #6]
 80017c4:	79bb      	ldrb	r3, [r7, #6]
 80017c6:	4822      	ldr	r0, [pc, #136]	; (8001850 <prepare_data+0xa8>)
 80017c8:	0109      	lsls	r1, r1, #4
 80017ca:	4401      	add	r1, r0
 80017cc:	440a      	add	r2, r1
 80017ce:	7811      	ldrb	r1, [r2, #0]
 80017d0:	4a20      	ldr	r2, [pc, #128]	; (8001854 <prepare_data+0xac>)
 80017d2:	54d1      	strb	r1, [r2, r3]
 80017d4:	e028      	b.n	8001828 <prepare_data+0x80>
			}
			else if (i == 1) {
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d10a      	bne.n	80017f2 <prepare_data+0x4a>
				data2[k] = DMD_1COLOR_Buff[i][k];
 80017dc:	79f9      	ldrb	r1, [r7, #7]
 80017de:	79ba      	ldrb	r2, [r7, #6]
 80017e0:	79bb      	ldrb	r3, [r7, #6]
 80017e2:	481b      	ldr	r0, [pc, #108]	; (8001850 <prepare_data+0xa8>)
 80017e4:	0109      	lsls	r1, r1, #4
 80017e6:	4401      	add	r1, r0
 80017e8:	440a      	add	r2, r1
 80017ea:	7811      	ldrb	r1, [r2, #0]
 80017ec:	4a1a      	ldr	r2, [pc, #104]	; (8001858 <prepare_data+0xb0>)
 80017ee:	54d1      	strb	r1, [r2, r3]
 80017f0:	e01a      	b.n	8001828 <prepare_data+0x80>
			}
			else if (i == 2) {
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d10a      	bne.n	800180e <prepare_data+0x66>
				data3[k] = DMD_1COLOR_Buff[i][k];
 80017f8:	79f9      	ldrb	r1, [r7, #7]
 80017fa:	79ba      	ldrb	r2, [r7, #6]
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	4814      	ldr	r0, [pc, #80]	; (8001850 <prepare_data+0xa8>)
 8001800:	0109      	lsls	r1, r1, #4
 8001802:	4401      	add	r1, r0
 8001804:	440a      	add	r2, r1
 8001806:	7811      	ldrb	r1, [r2, #0]
 8001808:	4a14      	ldr	r2, [pc, #80]	; (800185c <prepare_data+0xb4>)
 800180a:	54d1      	strb	r1, [r2, r3]
 800180c:	e00c      	b.n	8001828 <prepare_data+0x80>
			}
			else if (i == 3) {
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	2b03      	cmp	r3, #3
 8001812:	d109      	bne.n	8001828 <prepare_data+0x80>
				data4[k] = DMD_1COLOR_Buff[i][k];
 8001814:	79f9      	ldrb	r1, [r7, #7]
 8001816:	79ba      	ldrb	r2, [r7, #6]
 8001818:	79bb      	ldrb	r3, [r7, #6]
 800181a:	480d      	ldr	r0, [pc, #52]	; (8001850 <prepare_data+0xa8>)
 800181c:	0109      	lsls	r1, r1, #4
 800181e:	4401      	add	r1, r0
 8001820:	440a      	add	r2, r1
 8001822:	7811      	ldrb	r1, [r2, #0]
 8001824:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <prepare_data+0xb8>)
 8001826:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(DMD_1COLOR_Buff[0]); k++) {
 8001828:	79bb      	ldrb	r3, [r7, #6]
 800182a:	3301      	adds	r3, #1
 800182c:	71bb      	strb	r3, [r7, #6]
 800182e:	79bb      	ldrb	r3, [r7, #6]
 8001830:	2b0f      	cmp	r3, #15
 8001832:	d9c2      	bls.n	80017ba <prepare_data+0x12>
	for (uint8_t i = 0; i < sizeof(DMD_1COLOR_Buff) / sizeof(DMD_1COLOR_Buff[0]); i++) {
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	3301      	adds	r3, #1
 8001838:	71fb      	strb	r3, [r7, #7]
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	2b03      	cmp	r3, #3
 800183e:	d9b9      	bls.n	80017b4 <prepare_data+0xc>
			}
		}
	}
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000090 	.word	0x20000090
 8001854:	20000110 	.word	0x20000110
 8001858:	20000120 	.word	0x20000120
 800185c:	20000130 	.word	0x20000130
 8001860:	20000140 	.word	0x20000140

08001864 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	4b3e      	ldr	r3, [pc, #248]	; (8001978 <MX_GPIO_Init+0x114>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a3d      	ldr	r2, [pc, #244]	; (8001978 <MX_GPIO_Init+0x114>)
 8001884:	f043 0310 	orr.w	r3, r3, #16
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <MX_GPIO_Init+0x114>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <MX_GPIO_Init+0x114>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a36      	ldr	r2, [pc, #216]	; (8001978 <MX_GPIO_Init+0x114>)
 80018a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b34      	ldr	r3, [pc, #208]	; (8001978 <MX_GPIO_Init+0x114>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	4b30      	ldr	r3, [pc, #192]	; (8001978 <MX_GPIO_Init+0x114>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a2f      	ldr	r2, [pc, #188]	; (8001978 <MX_GPIO_Init+0x114>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <MX_GPIO_Init+0x114>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	4b29      	ldr	r3, [pc, #164]	; (8001978 <MX_GPIO_Init+0x114>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a28      	ldr	r2, [pc, #160]	; (8001978 <MX_GPIO_Init+0x114>)
 80018d8:	f043 0308 	orr.w	r3, r3, #8
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b26      	ldr	r3, [pc, #152]	; (8001978 <MX_GPIO_Init+0x114>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	4b22      	ldr	r3, [pc, #136]	; (8001978 <MX_GPIO_Init+0x114>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a21      	ldr	r2, [pc, #132]	; (8001978 <MX_GPIO_Init+0x114>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <MX_GPIO_Init+0x114>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nOE_Pin|A_Pin|B_Pin|SCLK_Pin, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	215c      	movs	r1, #92	; 0x5c
 800190a:	481c      	ldr	r0, [pc, #112]	; (800197c <MX_GPIO_Init+0x118>)
 800190c:	f001 f8b4 	bl	8002a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_G_Pin|LED_O_Pin|LED_R2_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001916:	481a      	ldr	r0, [pc, #104]	; (8001980 <MX_GPIO_Init+0x11c>)
 8001918:	f001 f8ae 	bl	8002a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Accel_DRDY_Pin;
 800191c:	2304      	movs	r3, #4
 800191e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001920:	2300      	movs	r3, #0
 8001922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Accel_DRDY_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	4815      	ldr	r0, [pc, #84]	; (8001984 <MX_GPIO_Init+0x120>)
 8001930:	f000 ff1e 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = nOE_Pin|A_Pin|B_Pin|SCLK_Pin;
 8001934:	235c      	movs	r3, #92	; 0x5c
 8001936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001938:	2301      	movs	r3, #1
 800193a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4619      	mov	r1, r3
 800194a:	480c      	ldr	r0, [pc, #48]	; (800197c <MX_GPIO_Init+0x118>)
 800194c:	f000 ff10 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_O_Pin|LED_R2_Pin|LED_B_Pin;
 8001950:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001956:	2301      	movs	r3, #1
 8001958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800195a:	2302      	movs	r3, #2
 800195c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_GPIO_Init+0x11c>)
 800196a:	f000 ff01 	bl	8002770 <HAL_GPIO_Init>

}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	; 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40020000 	.word	0x40020000
 8001980:	40020c00 	.word	0x40020c00
 8001984:	40021000 	.word	0x40021000

08001988 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <MX_I2C1_Init+0x50>)
 800198e:	4a13      	ldr	r2, [pc, #76]	; (80019dc <MX_I2C1_Init+0x54>)
 8001990:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <MX_I2C1_Init+0x50>)
 8001994:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <MX_I2C1_Init+0x58>)
 8001996:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <MX_I2C1_Init+0x50>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <MX_I2C1_Init+0x50>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <MX_I2C1_Init+0x50>)
 80019a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <MX_I2C1_Init+0x50>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <MX_I2C1_Init+0x50>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019b8:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <MX_I2C1_Init+0x50>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <MX_I2C1_Init+0x50>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019c4:	4804      	ldr	r0, [pc, #16]	; (80019d8 <MX_I2C1_Init+0x50>)
 80019c6:	f001 f871 	bl	8002aac <HAL_I2C_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019d0:	f000 fa82 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000150 	.word	0x20000150
 80019dc:	40005400 	.word	0x40005400
 80019e0:	000186a0 	.word	0x000186a0

080019e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a19      	ldr	r2, [pc, #100]	; (8001a68 <HAL_I2C_MspInit+0x84>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d12c      	bne.n	8001a60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a17      	ldr	r2, [pc, #92]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001a22:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a28:	2312      	movs	r3, #18
 8001a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a30:	2303      	movs	r3, #3
 8001a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a34:	2304      	movs	r3, #4
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	480c      	ldr	r0, [pc, #48]	; (8001a70 <HAL_I2C_MspInit+0x8c>)
 8001a40:	f000 fe96 	bl	8002770 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a52:	6413      	str	r3, [r2, #64]	; 0x40
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	; 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40005400 	.word	0x40005400
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020400 	.word	0x40020400

08001a74 <disp_row>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void disp_row(int row) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	if (row == 0) {
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d120      	bne.n	8001ac4 <disp_row+0x50>
		HAL_SPI_Transmit(&hspi1, data1, 16, 10);
 8001a82:	230a      	movs	r3, #10
 8001a84:	2210      	movs	r2, #16
 8001a86:	4947      	ldr	r1, [pc, #284]	; (8001ba4 <disp_row+0x130>)
 8001a88:	4847      	ldr	r0, [pc, #284]	; (8001ba8 <disp_row+0x134>)
 8001a8a:	f002 fcb0 	bl	80043ee <HAL_SPI_Transmit>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8001a8e:	bf00      	nop
 8001a90:	4845      	ldr	r0, [pc, #276]	; (8001ba8 <disp_row+0x134>)
 8001a92:	f002 fde8 	bl	8004666 <HAL_SPI_GetState>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d1f9      	bne.n	8001a90 <disp_row+0x1c>
		}

		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2140      	movs	r1, #64	; 0x40
 8001aa0:	4842      	ldr	r0, [pc, #264]	; (8001bac <disp_row+0x138>)
 8001aa2:	f000 ffe9 	bl	8002a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	2140      	movs	r1, #64	; 0x40
 8001aaa:	4840      	ldr	r0, [pc, #256]	; (8001bac <disp_row+0x138>)
 8001aac:	f000 ffe4 	bl	8002a78 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2108      	movs	r1, #8
 8001ab4:	483d      	ldr	r0, [pc, #244]	; (8001bac <disp_row+0x138>)
 8001ab6:	f000 ffdf 	bl	8002a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2110      	movs	r1, #16
 8001abe:	483b      	ldr	r0, [pc, #236]	; (8001bac <disp_row+0x138>)
 8001ac0:	f000 ffda 	bl	8002a78 <HAL_GPIO_WritePin>
	}
	if (row == 1) {
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d120      	bne.n	8001b0c <disp_row+0x98>
		HAL_SPI_Transmit(&hspi1, data2, 16, 10);
 8001aca:	230a      	movs	r3, #10
 8001acc:	2210      	movs	r2, #16
 8001ace:	4938      	ldr	r1, [pc, #224]	; (8001bb0 <disp_row+0x13c>)
 8001ad0:	4835      	ldr	r0, [pc, #212]	; (8001ba8 <disp_row+0x134>)
 8001ad2:	f002 fc8c 	bl	80043ee <HAL_SPI_Transmit>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8001ad6:	bf00      	nop
 8001ad8:	4833      	ldr	r0, [pc, #204]	; (8001ba8 <disp_row+0x134>)
 8001ada:	f002 fdc4 	bl	8004666 <HAL_SPI_GetState>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d1f9      	bne.n	8001ad8 <disp_row+0x64>
		}

		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2140      	movs	r1, #64	; 0x40
 8001ae8:	4830      	ldr	r0, [pc, #192]	; (8001bac <disp_row+0x138>)
 8001aea:	f000 ffc5 	bl	8002a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001aee:	2201      	movs	r2, #1
 8001af0:	2140      	movs	r1, #64	; 0x40
 8001af2:	482e      	ldr	r0, [pc, #184]	; (8001bac <disp_row+0x138>)
 8001af4:	f000 ffc0 	bl	8002a78 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	2108      	movs	r1, #8
 8001afc:	482b      	ldr	r0, [pc, #172]	; (8001bac <disp_row+0x138>)
 8001afe:	f000 ffbb 	bl	8002a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2110      	movs	r1, #16
 8001b06:	4829      	ldr	r0, [pc, #164]	; (8001bac <disp_row+0x138>)
 8001b08:	f000 ffb6 	bl	8002a78 <HAL_GPIO_WritePin>
	}

	if (row == 2) {
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d120      	bne.n	8001b54 <disp_row+0xe0>
		HAL_SPI_Transmit(&hspi1, data3, 16, 10);
 8001b12:	230a      	movs	r3, #10
 8001b14:	2210      	movs	r2, #16
 8001b16:	4927      	ldr	r1, [pc, #156]	; (8001bb4 <disp_row+0x140>)
 8001b18:	4823      	ldr	r0, [pc, #140]	; (8001ba8 <disp_row+0x134>)
 8001b1a:	f002 fc68 	bl	80043ee <HAL_SPI_Transmit>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8001b1e:	bf00      	nop
 8001b20:	4821      	ldr	r0, [pc, #132]	; (8001ba8 <disp_row+0x134>)
 8001b22:	f002 fda0 	bl	8004666 <HAL_SPI_GetState>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d1f9      	bne.n	8001b20 <disp_row+0xac>
		}

		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2140      	movs	r1, #64	; 0x40
 8001b30:	481e      	ldr	r0, [pc, #120]	; (8001bac <disp_row+0x138>)
 8001b32:	f000 ffa1 	bl	8002a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001b36:	2201      	movs	r2, #1
 8001b38:	2140      	movs	r1, #64	; 0x40
 8001b3a:	481c      	ldr	r0, [pc, #112]	; (8001bac <disp_row+0x138>)
 8001b3c:	f000 ff9c 	bl	8002a78 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2108      	movs	r1, #8
 8001b44:	4819      	ldr	r0, [pc, #100]	; (8001bac <disp_row+0x138>)
 8001b46:	f000 ff97 	bl	8002a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	2110      	movs	r1, #16
 8001b4e:	4817      	ldr	r0, [pc, #92]	; (8001bac <disp_row+0x138>)
 8001b50:	f000 ff92 	bl	8002a78 <HAL_GPIO_WritePin>
	}

	if (row == 3) {
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d120      	bne.n	8001b9c <disp_row+0x128>
		HAL_SPI_Transmit(&hspi1, data4, 16, 10);
 8001b5a:	230a      	movs	r3, #10
 8001b5c:	2210      	movs	r2, #16
 8001b5e:	4916      	ldr	r1, [pc, #88]	; (8001bb8 <disp_row+0x144>)
 8001b60:	4811      	ldr	r0, [pc, #68]	; (8001ba8 <disp_row+0x134>)
 8001b62:	f002 fc44 	bl	80043ee <HAL_SPI_Transmit>
		while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8001b66:	bf00      	nop
 8001b68:	480f      	ldr	r0, [pc, #60]	; (8001ba8 <disp_row+0x134>)
 8001b6a:	f002 fd7c 	bl	8004666 <HAL_SPI_GetState>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d1f9      	bne.n	8001b68 <disp_row+0xf4>
		}

		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2140      	movs	r1, #64	; 0x40
 8001b78:	480c      	ldr	r0, [pc, #48]	; (8001bac <disp_row+0x138>)
 8001b7a:	f000 ff7d 	bl	8002a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8001b7e:	2201      	movs	r2, #1
 8001b80:	2140      	movs	r1, #64	; 0x40
 8001b82:	480a      	ldr	r0, [pc, #40]	; (8001bac <disp_row+0x138>)
 8001b84:	f000 ff78 	bl	8002a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	2108      	movs	r1, #8
 8001b8c:	4807      	ldr	r0, [pc, #28]	; (8001bac <disp_row+0x138>)
 8001b8e:	f000 ff73 	bl	8002a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8001b92:	2201      	movs	r2, #1
 8001b94:	2110      	movs	r1, #16
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <disp_row+0x138>)
 8001b98:	f000 ff6e 	bl	8002a78 <HAL_GPIO_WritePin>
	}
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000110 	.word	0x20000110
 8001ba8:	200001ac 	.word	0x200001ac
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	20000120 	.word	0x20000120
 8001bb4:	20000130 	.word	0x20000130
 8001bb8:	20000140 	.word	0x20000140

08001bbc <expRunningAverage>:


// бегущее среднее
float expRunningAverage(float newVal) {
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	ed87 0a01 	vstr	s0, [r7, #4]
  static float filVal = 0;
  filVal += (newVal - filVal) * k;
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <expRunningAverage+0x48>)
 8001bc8:	edd3 7a00 	vldr	s15, [r3]
 8001bcc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <expRunningAverage+0x4c>)
 8001bd6:	edd3 7a00 	vldr	s15, [r3]
 8001bda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <expRunningAverage+0x48>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <expRunningAverage+0x48>)
 8001bea:	edc3 7a00 	vstr	s15, [r3]
  return filVal;
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <expRunningAverage+0x48>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	ee07 3a90 	vmov	s15, r3
}
 8001bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	200001a8 	.word	0x200001a8
 8001c08:	2000001c 	.word	0x2000001c

08001c0c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001c0c:	b5b0      	push	{r4, r5, r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001c10:	f000 fc06 	bl	8002420 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001c14:	f000 f8f8 	bl	8001e08 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001c18:	f7ff fe24 	bl	8001864 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001c1c:	f7ff feb4 	bl	8001988 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8001c20:	f000 fb62 	bl	80022e8 <MX_USART1_UART_Init>
	MX_SPI1_Init();
 8001c24:	f000 f9cc 	bl	8001fc0 <MX_SPI1_Init>
	MX_TIM1_Init();
 8001c28:	f000 fab6 	bl	8002198 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	Accel_Ini();
 8001c2c:	f7ff f930 	bl	8000e90 <Accel_Ini>
	HAL_TIM_Base_Start_IT(&htim1);
 8001c30:	486d      	ldr	r0, [pc, #436]	; (8001de8 <main+0x1dc>)
 8001c32:	f002 fdf1 	bl	8004818 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2104      	movs	r1, #4
 8001c3a:	486c      	ldr	r0, [pc, #432]	; (8001dec <main+0x1e0>)
 8001c3c:	f000 ff1c 	bl	8002a78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, 1);
 8001c40:	2201      	movs	r2, #1
 8001c42:	2104      	movs	r1, #4
 8001c44:	4869      	ldr	r0, [pc, #420]	; (8001dec <main+0x1e0>)
 8001c46:	f000 ff17 	bl	8002a78 <HAL_GPIO_WritePin>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Accel_ReadAcc();
 8001c4a:	f7ff fae3 	bl	8001214 <Accel_ReadAcc>
		AccConstrain();
 8001c4e:	f000 f949 	bl	8001ee4 <AccConstrain>
		angle = weightCoordinatesCalc();
 8001c52:	f000 f97f 	bl	8001f54 <weightCoordinatesCalc>
 8001c56:	eef0 7a40 	vmov.f32	s15, s0
 8001c5a:	4b65      	ldr	r3, [pc, #404]	; (8001df0 <main+0x1e4>)
 8001c5c:	edc3 7a00 	vstr	s15, [r3]
		angleFiltred = expRunningAverage(angle);
 8001c60:	4b63      	ldr	r3, [pc, #396]	; (8001df0 <main+0x1e4>)
 8001c62:	edd3 7a00 	vldr	s15, [r3]
 8001c66:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6a:	f7ff ffa7 	bl	8001bbc <expRunningAverage>
 8001c6e:	eef0 7a40 	vmov.f32	s15, s0
 8001c72:	4b60      	ldr	r3, [pc, #384]	; (8001df4 <main+0x1e8>)
 8001c74:	edc3 7a00 	vstr	s15, [r3]
		weight.x = RopeLength * cos(angleFiltred);
 8001c78:	4b5f      	ldr	r3, [pc, #380]	; (8001df8 <main+0x1ec>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fc0f 	bl	80004a0 <__aeabi_f2d>
 8001c82:	4604      	mov	r4, r0
 8001c84:	460d      	mov	r5, r1
 8001c86:	4b5b      	ldr	r3, [pc, #364]	; (8001df4 <main+0x1e8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fc08 	bl	80004a0 <__aeabi_f2d>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	ec43 2b10 	vmov	d0, r2, r3
 8001c98:	f003 ff82 	bl	8005ba0 <cos>
 8001c9c:	ec53 2b10 	vmov	r2, r3, d0
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	4629      	mov	r1, r5
 8001ca4:	f7fe fc54 	bl	8000550 <__aeabi_dmul>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f7fe ff10 	bl	8000ad4 <__aeabi_d2f>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4a51      	ldr	r2, [pc, #324]	; (8001dfc <main+0x1f0>)
 8001cb8:	6013      	str	r3, [r2, #0]
		weight.y = RopeLength * sin(angleFiltred) + 7;
 8001cba:	4b4f      	ldr	r3, [pc, #316]	; (8001df8 <main+0x1ec>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe fbee 	bl	80004a0 <__aeabi_f2d>
 8001cc4:	4604      	mov	r4, r0
 8001cc6:	460d      	mov	r5, r1
 8001cc8:	4b4a      	ldr	r3, [pc, #296]	; (8001df4 <main+0x1e8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fbe7 	bl	80004a0 <__aeabi_f2d>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	ec43 2b10 	vmov	d0, r2, r3
 8001cda:	f003 ffc1 	bl	8005c60 <sin>
 8001cde:	ec53 2b10 	vmov	r2, r3, d0
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	f7fe fc33 	bl	8000550 <__aeabi_dmul>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	4b42      	ldr	r3, [pc, #264]	; (8001e00 <main+0x1f4>)
 8001cf8:	f7fe fa74 	bl	80001e4 <__adddf3>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7fe fee6 	bl	8000ad4 <__aeabi_d2f>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4a3c      	ldr	r2, [pc, #240]	; (8001dfc <main+0x1f0>)
 8001d0c:	6053      	str	r3, [r2, #4]

		disp1color_FillScreenbuff(0);
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f7ff faa8 	bl	8001264 <disp1color_FillScreenbuff>
		disp1color_DrawPixel((int) anchor.x, (int) anchor.y, 1);
 8001d14:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <main+0x1f8>)
 8001d16:	edd3 7a00 	vldr	s15, [r3]
 8001d1a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001d1e:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <main+0x1f8>)
 8001d20:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d28:	2201      	movs	r2, #1
 8001d2a:	ee17 1a90 	vmov	r1, s15
 8001d2e:	ee17 0a10 	vmov	r0, s14
 8001d32:	f7ff fab3 	bl	800129c <disp1color_DrawPixel>
		disp1color_DrawPixel((int) weight.x, (int) weight.y, 1);
 8001d36:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <main+0x1f0>)
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001d40:	4b2e      	ldr	r3, [pc, #184]	; (8001dfc <main+0x1f0>)
 8001d42:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	ee17 1a90 	vmov	r1, s15
 8001d50:	ee17 0a10 	vmov	r0, s14
 8001d54:	f7ff faa2 	bl	800129c <disp1color_DrawPixel>
		disp1color_DrawLine((int) anchor.x, (int) anchor.y, (int) weight.x,
 8001d58:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <main+0x1f8>)
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d62:	ee17 3a90 	vmov	r3, s15
 8001d66:	b218      	sxth	r0, r3
 8001d68:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <main+0x1f8>)
 8001d6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d72:	ee17 3a90 	vmov	r3, s15
 8001d76:	b219      	sxth	r1, r3
 8001d78:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <main+0x1f0>)
 8001d7a:	edd3 7a00 	vldr	s15, [r3]
 8001d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d82:	ee17 3a90 	vmov	r3, s15
 8001d86:	b21a      	sxth	r2, r3
				(int) weight.y);
 8001d88:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <main+0x1f0>)
 8001d8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		disp1color_DrawLine((int) anchor.x, (int) anchor.y, (int) weight.x,
 8001d92:	ee17 3a90 	vmov	r3, s15
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	f7ff fade 	bl	8001358 <disp1color_DrawLine>
		disp1color_DrawCircle((int) weight.x, (int) weight.y, 2);
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <main+0x1f0>)
 8001d9e:	edd3 7a00 	vldr	s15, [r3]
 8001da2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001da6:	ee17 3a90 	vmov	r3, s15
 8001daa:	b21b      	sxth	r3, r3
 8001dac:	4a13      	ldr	r2, [pc, #76]	; (8001dfc <main+0x1f0>)
 8001dae:	edd2 7a01 	vldr	s15, [r2, #4]
 8001db2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001db6:	ee17 2a90 	vmov	r2, s15
 8001dba:	b211      	sxth	r1, r2
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fb4d 	bl	800145e <disp1color_DrawCircle>

		disp1color_UpdateFromBuff(); //Перевод рассчитанных данных в массив
 8001dc4:	f7ff fa60 	bl	8001288 <disp1color_UpdateFromBuff>
		prepare_data(); //Разбиение массива на массивы под каждую строку
 8001dc8:	f7ff fcee 	bl	80017a8 <prepare_data>

		disp_row(0);
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7ff fe51 	bl	8001a74 <disp_row>
		disp_row(1);
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	f7ff fe4e 	bl	8001a74 <disp_row>
		disp_row(2);
 8001dd8:	2002      	movs	r0, #2
 8001dda:	f7ff fe4b 	bl	8001a74 <disp_row>
		disp_row(3);
 8001dde:	2003      	movs	r0, #3
 8001de0:	f7ff fe48 	bl	8001a74 <disp_row>
	while (1) {
 8001de4:	e731      	b.n	8001c4a <main+0x3e>
 8001de6:	bf00      	nop
 8001de8:	20000204 	.word	0x20000204
 8001dec:	40020000 	.word	0x40020000
 8001df0:	20000014 	.word	0x20000014
 8001df4:	200001a4 	.word	0x200001a4
 8001df8:	20000018 	.word	0x20000018
 8001dfc:	2000000c 	.word	0x2000000c
 8001e00:	401c0000 	.word	0x401c0000
 8001e04:	20000004 	.word	0x20000004

08001e08 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b094      	sub	sp, #80	; 0x50
 8001e0c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001e0e:	f107 0320 	add.w	r3, r7, #32
 8001e12:	2230      	movs	r2, #48	; 0x30
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 fd1a 	bl	8005850 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001e1c:	f107 030c 	add.w	r3, r7, #12
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <SystemClock_Config+0xc8>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	4a26      	ldr	r2, [pc, #152]	; (8001ed0 <SystemClock_Config+0xc8>)
 8001e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3c:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <SystemClock_Config+0xc8>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e48:	2300      	movs	r3, #0
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	4b21      	ldr	r3, [pc, #132]	; (8001ed4 <SystemClock_Config+0xcc>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a20      	ldr	r2, [pc, #128]	; (8001ed4 <SystemClock_Config+0xcc>)
 8001e52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <SystemClock_Config+0xcc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e64:	2302      	movs	r3, #2
 8001e66:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e6c:	2310      	movs	r3, #16
 8001e6e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e70:	2302      	movs	r3, #2
 8001e72:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e74:	2300      	movs	r3, #0
 8001e76:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001e78:	2308      	movs	r3, #8
 8001e7a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8001e7c:	2364      	movs	r3, #100	; 0x64
 8001e7e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e80:	2302      	movs	r3, #2
 8001e82:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e84:	2304      	movs	r3, #4
 8001e86:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001e88:	f107 0320 	add.w	r3, r7, #32
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f001 fdcd 	bl	8003a2c <HAL_RCC_OscConfig>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <SystemClock_Config+0x94>
		Error_Handler();
 8001e98:	f000 f81e 	bl	8001ed8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001e9c:	230f      	movs	r3, #15
 8001e9e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eac:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8001eb2:	f107 030c 	add.w	r3, r7, #12
 8001eb6:	2103      	movs	r1, #3
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f002 f82f 	bl	8003f1c <HAL_RCC_ClockConfig>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <SystemClock_Config+0xc0>
		Error_Handler();
 8001ec4:	f000 f808 	bl	8001ed8 <Error_Handler>
	}
}
 8001ec8:	bf00      	nop
 8001eca:	3750      	adds	r7, #80	; 0x50
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40007000 	.word	0x40007000

08001ed8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001edc:	b672      	cpsid	i
}
 8001ede:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ee0:	e7fe      	b.n	8001ee0 <Error_Handler+0x8>
	...

08001ee4 <AccConstrain>:
extern volatile int16_t x_acc;
extern volatile int16_t y_acc;
extern volatile int16_t z_acc;

void AccConstrain()
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
	if (x_acc<=200 && x_acc>-200) {
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <AccConstrain+0x64>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	b21b      	sxth	r3, r3
 8001eee:	2bc8      	cmp	r3, #200	; 0xc8
 8001ef0:	dc08      	bgt.n	8001f04 <AccConstrain+0x20>
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <AccConstrain+0x64>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	b21b      	sxth	r3, r3
 8001ef8:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 8001efc:	db02      	blt.n	8001f04 <AccConstrain+0x20>
		x_acc = 1;
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <AccConstrain+0x64>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	801a      	strh	r2, [r3, #0]
	}
	if (y_acc<=200 && y_acc>-200) {
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <AccConstrain+0x68>)
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	2bc8      	cmp	r3, #200	; 0xc8
 8001f0c:	dc08      	bgt.n	8001f20 <AccConstrain+0x3c>
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <AccConstrain+0x68>)
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	b21b      	sxth	r3, r3
 8001f14:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 8001f18:	db02      	blt.n	8001f20 <AccConstrain+0x3c>
		y_acc = 1;
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <AccConstrain+0x68>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	801a      	strh	r2, [r3, #0]
	}
	if (z_acc<=200 && z_acc>-200) {
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <AccConstrain+0x6c>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	b21b      	sxth	r3, r3
 8001f26:	2bc8      	cmp	r3, #200	; 0xc8
 8001f28:	dc08      	bgt.n	8001f3c <AccConstrain+0x58>
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <AccConstrain+0x6c>)
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 8001f34:	db02      	blt.n	8001f3c <AccConstrain+0x58>
		z_acc = 1;
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <AccConstrain+0x6c>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	801a      	strh	r2, [r3, #0]
	}
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000048 	.word	0x20000048
 8001f4c:	2000004a 	.word	0x2000004a
 8001f50:	2000004c 	.word	0x2000004c

08001f54 <weightCoordinatesCalc>:

float weightCoordinatesCalc()
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
	float angle = 5.0;
 8001f5a:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <weightCoordinatesCalc+0x60>)
 8001f5c:	607b      	str	r3, [r7, #4]
	angle = atan((float)y_acc/(float)z_acc);
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <weightCoordinatesCalc+0x64>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	b21b      	sxth	r3, r3
 8001f64:	ee07 3a90 	vmov	s15, r3
 8001f68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <weightCoordinatesCalc+0x68>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b21b      	sxth	r3, r3
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001f7e:	ee16 0a90 	vmov	r0, s13
 8001f82:	f7fe fa8d 	bl	80004a0 <__aeabi_f2d>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	ec43 2b10 	vmov	d0, r2, r3
 8001f8e:	f003 fc67 	bl	8005860 <atan>
 8001f92:	ec53 2b10 	vmov	r2, r3, d0
 8001f96:	4610      	mov	r0, r2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f7fe fd9b 	bl	8000ad4 <__aeabi_d2f>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	607b      	str	r3, [r7, #4]
	return angle;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	ee07 3a90 	vmov	s15, r3
}
 8001fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40a00000 	.word	0x40a00000
 8001fb8:	2000004a 	.word	0x2000004a
 8001fbc:	2000004c 	.word	0x2000004c

08001fc0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001fc4:	4b17      	ldr	r3, [pc, #92]	; (8002024 <MX_SPI1_Init+0x64>)
 8001fc6:	4a18      	ldr	r2, [pc, #96]	; (8002028 <MX_SPI1_Init+0x68>)
 8001fc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fca:	4b16      	ldr	r3, [pc, #88]	; (8002024 <MX_SPI1_Init+0x64>)
 8001fcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <MX_SPI1_Init+0x64>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <MX_SPI1_Init+0x64>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <MX_SPI1_Init+0x64>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <MX_SPI1_Init+0x64>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <MX_SPI1_Init+0x64>)
 8001fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ff0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <MX_SPI1_Init+0x64>)
 8001ff4:	2238      	movs	r2, #56	; 0x38
 8001ff6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <MX_SPI1_Init+0x64>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <MX_SPI1_Init+0x64>)
 8002000:	2200      	movs	r2, #0
 8002002:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <MX_SPI1_Init+0x64>)
 8002006:	2200      	movs	r2, #0
 8002008:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <MX_SPI1_Init+0x64>)
 800200c:	220a      	movs	r2, #10
 800200e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002010:	4804      	ldr	r0, [pc, #16]	; (8002024 <MX_SPI1_Init+0x64>)
 8002012:	f002 f963 	bl	80042dc <HAL_SPI_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800201c:	f7ff ff5c 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}
 8002024:	200001ac 	.word	0x200001ac
 8002028:	40013000 	.word	0x40013000

0800202c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	; 0x28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <HAL_SPI_MspInit+0x84>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d12b      	bne.n	80020a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <HAL_SPI_MspInit+0x88>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	4a17      	ldr	r2, [pc, #92]	; (80020b4 <HAL_SPI_MspInit+0x88>)
 8002058:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800205c:	6453      	str	r3, [r2, #68]	; 0x44
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <HAL_SPI_MspInit+0x88>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <HAL_SPI_MspInit+0x88>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a10      	ldr	r2, [pc, #64]	; (80020b4 <HAL_SPI_MspInit+0x88>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_SPI_MspInit+0x88>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002086:	23a0      	movs	r3, #160	; 0xa0
 8002088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002096:	2305      	movs	r3, #5
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	4805      	ldr	r0, [pc, #20]	; (80020b8 <HAL_SPI_MspInit+0x8c>)
 80020a2:	f000 fb65 	bl	8002770 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80020a6:	bf00      	nop
 80020a8:	3728      	adds	r7, #40	; 0x28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40013000 	.word	0x40013000
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020000 	.word	0x40020000

080020bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <HAL_MspInit+0x4c>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <HAL_MspInit+0x4c>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <HAL_MspInit+0x4c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_MspInit+0x4c>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a08      	ldr	r2, [pc, #32]	; (8002108 <HAL_MspInit+0x4c>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_MspInit+0x4c>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800

0800210c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002110:	e7fe      	b.n	8002110 <NMI_Handler+0x4>

08002112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002116:	e7fe      	b.n	8002116 <HardFault_Handler+0x4>

08002118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800211c:	e7fe      	b.n	800211c <MemManage_Handler+0x4>

0800211e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002122:	e7fe      	b.n	8002122 <BusFault_Handler+0x4>

08002124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <UsageFault_Handler+0x4>

0800212a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002158:	f000 f9b4 	bl	80024c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	bd80      	pop	{r7, pc}

08002160 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
//i++;
//if(i>50000){
//	i=0;
//}
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002166:	f002 fc08 	bl	800497a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000204 	.word	0x20000204

08002174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <SystemInit+0x20>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	4a05      	ldr	r2, [pc, #20]	; (8002194 <SystemInit+0x20>)
 8002180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b092      	sub	sp, #72	; 0x48
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
 80021b8:	615a      	str	r2, [r3, #20]
 80021ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	2220      	movs	r2, #32
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 fb44 	bl	8005850 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021c8:	4b31      	ldr	r3, [pc, #196]	; (8002290 <MX_TIM1_Init+0xf8>)
 80021ca:	4a32      	ldr	r2, [pc, #200]	; (8002294 <MX_TIM1_Init+0xfc>)
 80021cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5;
 80021ce:	4b30      	ldr	r3, [pc, #192]	; (8002290 <MX_TIM1_Init+0xf8>)
 80021d0:	2205      	movs	r2, #5
 80021d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d4:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <MX_TIM1_Init+0xf8>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 80021da:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <MX_TIM1_Init+0xf8>)
 80021dc:	f24c 3250 	movw	r2, #50000	; 0xc350
 80021e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e2:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <MX_TIM1_Init+0xf8>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021e8:	4b29      	ldr	r3, [pc, #164]	; (8002290 <MX_TIM1_Init+0xf8>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ee:	4b28      	ldr	r3, [pc, #160]	; (8002290 <MX_TIM1_Init+0xf8>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80021f4:	4826      	ldr	r0, [pc, #152]	; (8002290 <MX_TIM1_Init+0xf8>)
 80021f6:	f002 fb71 	bl	80048dc <HAL_TIM_OC_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002200:	f7ff fe6a 	bl	8001ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002204:	2300      	movs	r3, #0
 8002206:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800220c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002210:	4619      	mov	r1, r3
 8002212:	481f      	ldr	r0, [pc, #124]	; (8002290 <MX_TIM1_Init+0xf8>)
 8002214:	f002 ff54 	bl	80050c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800221e:	f7ff fe5b 	bl	8001ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800222a:	2300      	movs	r3, #0
 800222c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800222e:	2300      	movs	r3, #0
 8002230:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002236:	2300      	movs	r3, #0
 8002238:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800223e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002242:	2200      	movs	r2, #0
 8002244:	4619      	mov	r1, r3
 8002246:	4812      	ldr	r0, [pc, #72]	; (8002290 <MX_TIM1_Init+0xf8>)
 8002248:	f002 fca0 	bl	8004b8c <HAL_TIM_OC_ConfigChannel>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002252:	f7ff fe41 	bl	8001ed8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800226a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800226e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002270:	2300      	movs	r3, #0
 8002272:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	4619      	mov	r1, r3
 8002278:	4805      	ldr	r0, [pc, #20]	; (8002290 <MX_TIM1_Init+0xf8>)
 800227a:	f002 ff8f 	bl	800519c <HAL_TIMEx_ConfigBreakDeadTime>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002284:	f7ff fe28 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002288:	bf00      	nop
 800228a:	3748      	adds	r7, #72	; 0x48
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000204 	.word	0x20000204
 8002294:	40010000 	.word	0x40010000

08002298 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <HAL_TIM_OC_MspInit+0x48>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d115      	bne.n	80022d6 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <HAL_TIM_OC_MspInit+0x4c>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	4a0c      	ldr	r2, [pc, #48]	; (80022e4 <HAL_TIM_OC_MspInit+0x4c>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_TIM_OC_MspInit+0x4c>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	2019      	movs	r0, #25
 80022cc:	f000 fa19 	bl	8002702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022d0:	2019      	movs	r0, #25
 80022d2:	f000 fa32 	bl	800273a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40010000 	.word	0x40010000
 80022e4:	40023800 	.word	0x40023800

080022e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <MX_USART1_UART_Init+0x4c>)
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <MX_USART1_UART_Init+0x50>)
 80022f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <MX_USART1_UART_Init+0x4c>)
 80022f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <MX_USART1_UART_Init+0x4c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <MX_USART1_UART_Init+0x4c>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <MX_USART1_UART_Init+0x4c>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800230c:	4b09      	ldr	r3, [pc, #36]	; (8002334 <MX_USART1_UART_Init+0x4c>)
 800230e:	220c      	movs	r2, #12
 8002310:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <MX_USART1_UART_Init+0x4c>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <MX_USART1_UART_Init+0x4c>)
 800231a:	2200      	movs	r2, #0
 800231c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <MX_USART1_UART_Init+0x4c>)
 8002320:	f002 ffa2 	bl	8005268 <HAL_UART_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800232a:	f7ff fdd5 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	2000024c 	.word	0x2000024c
 8002338:	40011000 	.word	0x40011000

0800233c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a19      	ldr	r2, [pc, #100]	; (80023c0 <HAL_UART_MspInit+0x84>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d12c      	bne.n	80023b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <HAL_UART_MspInit+0x88>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	4a17      	ldr	r2, [pc, #92]	; (80023c4 <HAL_UART_MspInit+0x88>)
 8002368:	f043 0310 	orr.w	r3, r3, #16
 800236c:	6453      	str	r3, [r2, #68]	; 0x44
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <HAL_UART_MspInit+0x88>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_UART_MspInit+0x88>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a10      	ldr	r2, [pc, #64]	; (80023c4 <HAL_UART_MspInit+0x88>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <HAL_UART_MspInit+0x88>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002396:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800239a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023a8:	2307      	movs	r3, #7
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	4619      	mov	r1, r3
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <HAL_UART_MspInit+0x8c>)
 80023b4:	f000 f9dc 	bl	8002770 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80023b8:	bf00      	nop
 80023ba:	3728      	adds	r7, #40	; 0x28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40011000 	.word	0x40011000
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40020000 	.word	0x40020000

080023cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002404 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023d0:	480d      	ldr	r0, [pc, #52]	; (8002408 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023d2:	490e      	ldr	r1, [pc, #56]	; (800240c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023d4:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d8:	e002      	b.n	80023e0 <LoopCopyDataInit>

080023da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023de:	3304      	adds	r3, #4

080023e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e4:	d3f9      	bcc.n	80023da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e6:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023e8:	4c0b      	ldr	r4, [pc, #44]	; (8002418 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ec:	e001      	b.n	80023f2 <LoopFillZerobss>

080023ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f0:	3204      	adds	r2, #4

080023f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f4:	d3fb      	bcc.n	80023ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023f6:	f7ff febd 	bl	8002174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023fa:	f003 f9f7 	bl	80057ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023fe:	f7ff fc05 	bl	8001c0c <main>
  bx  lr    
 8002402:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002404:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800240c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8002410:	08006f40 	.word	0x08006f40
  ldr r2, =_sbss
 8002414:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8002418:	20000294 	.word	0x20000294

0800241c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800241c:	e7fe      	b.n	800241c <ADC_IRQHandler>
	...

08002420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <HAL_Init+0x40>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0d      	ldr	r2, [pc, #52]	; (8002460 <HAL_Init+0x40>)
 800242a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800242e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_Init+0x40>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <HAL_Init+0x40>)
 8002436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800243a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <HAL_Init+0x40>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a07      	ldr	r2, [pc, #28]	; (8002460 <HAL_Init+0x40>)
 8002442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002448:	2003      	movs	r0, #3
 800244a:	f000 f94f 	bl	80026ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800244e:	200f      	movs	r0, #15
 8002450:	f000 f808 	bl	8002464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002454:	f7ff fe32 	bl	80020bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023c00 	.word	0x40023c00

08002464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <HAL_InitTick+0x54>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_InitTick+0x58>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4619      	mov	r1, r3
 8002476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247a:	fbb3 f3f1 	udiv	r3, r3, r1
 800247e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f967 	bl	8002756 <HAL_SYSTICK_Config>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e00e      	b.n	80024b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b0f      	cmp	r3, #15
 8002496:	d80a      	bhi.n	80024ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002498:	2200      	movs	r2, #0
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	f000 f92f 	bl	8002702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024a4:	4a06      	ldr	r2, [pc, #24]	; (80024c0 <HAL_InitTick+0x5c>)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e000      	b.n	80024b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000020 	.word	0x20000020
 80024bc:	20000028 	.word	0x20000028
 80024c0:	20000024 	.word	0x20000024

080024c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_IncTick+0x20>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_IncTick+0x24>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4413      	add	r3, r2
 80024d4:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <HAL_IncTick+0x24>)
 80024d6:	6013      	str	r3, [r2, #0]
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000028 	.word	0x20000028
 80024e8:	20000290 	.word	0x20000290

080024ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return uwTick;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <HAL_GetTick+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000290 	.word	0x20000290

08002504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800250c:	f7ff ffee 	bl	80024ec <HAL_GetTick>
 8002510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d005      	beq.n	800252a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <HAL_Delay+0x44>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800252a:	bf00      	nop
 800252c:	f7ff ffde 	bl	80024ec <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	429a      	cmp	r2, r3
 800253a:	d8f7      	bhi.n	800252c <HAL_Delay+0x28>
  {
  }
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000028 	.word	0x20000028

0800254c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002568:	4013      	ands	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257e:	4a04      	ldr	r2, [pc, #16]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	60d3      	str	r3, [r2, #12]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <__NVIC_GetPriorityGrouping+0x18>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	f003 0307 	and.w	r3, r3, #7
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	db0b      	blt.n	80025da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4907      	ldr	r1, [pc, #28]	; (80025e8 <__NVIC_EnableIRQ+0x38>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	2001      	movs	r0, #1
 80025d2:	fa00 f202 	lsl.w	r2, r0, r2
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000e100 	.word	0xe000e100

080025ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	db0a      	blt.n	8002616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	490c      	ldr	r1, [pc, #48]	; (8002638 <__NVIC_SetPriority+0x4c>)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	0112      	lsls	r2, r2, #4
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	440b      	add	r3, r1
 8002610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002614:	e00a      	b.n	800262c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	4908      	ldr	r1, [pc, #32]	; (800263c <__NVIC_SetPriority+0x50>)
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	3b04      	subs	r3, #4
 8002624:	0112      	lsls	r2, r2, #4
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	440b      	add	r3, r1
 800262a:	761a      	strb	r2, [r3, #24]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000e100 	.word	0xe000e100
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f1c3 0307 	rsb	r3, r3, #7
 800265a:	2b04      	cmp	r3, #4
 800265c:	bf28      	it	cs
 800265e:	2304      	movcs	r3, #4
 8002660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3304      	adds	r3, #4
 8002666:	2b06      	cmp	r3, #6
 8002668:	d902      	bls.n	8002670 <NVIC_EncodePriority+0x30>
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3b03      	subs	r3, #3
 800266e:	e000      	b.n	8002672 <NVIC_EncodePriority+0x32>
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	f04f 32ff 	mov.w	r2, #4294967295
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43da      	mvns	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	401a      	ands	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002688:	f04f 31ff 	mov.w	r1, #4294967295
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	43d9      	mvns	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	4313      	orrs	r3, r2
         );
}
 800269a:	4618      	mov	r0, r3
 800269c:	3724      	adds	r7, #36	; 0x24
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b8:	d301      	bcc.n	80026be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00f      	b.n	80026de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <SysTick_Config+0x40>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026c6:	210f      	movs	r1, #15
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295
 80026cc:	f7ff ff8e 	bl	80025ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <SysTick_Config+0x40>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <SysTick_Config+0x40>)
 80026d8:	2207      	movs	r2, #7
 80026da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	e000e010 	.word	0xe000e010

080026ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff ff29 	bl	800254c <__NVIC_SetPriorityGrouping>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002702:	b580      	push	{r7, lr}
 8002704:	b086      	sub	sp, #24
 8002706:	af00      	add	r7, sp, #0
 8002708:	4603      	mov	r3, r0
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002714:	f7ff ff3e 	bl	8002594 <__NVIC_GetPriorityGrouping>
 8002718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	6978      	ldr	r0, [r7, #20]
 8002720:	f7ff ff8e 	bl	8002640 <NVIC_EncodePriority>
 8002724:	4602      	mov	r2, r0
 8002726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff5d 	bl	80025ec <__NVIC_SetPriority>
}
 8002732:	bf00      	nop
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	4603      	mov	r3, r0
 8002742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff31 	bl	80025b0 <__NVIC_EnableIRQ>
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff ffa2 	bl	80026a8 <SysTick_Config>
 8002764:	4603      	mov	r3, r0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002770:	b480      	push	{r7}
 8002772:	b089      	sub	sp, #36	; 0x24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	e159      	b.n	8002a40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800278c:	2201      	movs	r2, #1
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	f040 8148 	bne.w	8002a3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d005      	beq.n	80027c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d130      	bne.n	8002824 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	2203      	movs	r2, #3
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f8:	2201      	movs	r2, #1
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 0201 	and.w	r2, r3, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b03      	cmp	r3, #3
 800282e:	d017      	beq.n	8002860 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2203      	movs	r2, #3
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d123      	bne.n	80028b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	08da      	lsrs	r2, r3, #3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3208      	adds	r2, #8
 8002874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002878:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	220f      	movs	r2, #15
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	08da      	lsrs	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3208      	adds	r2, #8
 80028ae:	69b9      	ldr	r1, [r7, #24]
 80028b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	2203      	movs	r2, #3
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0203 	and.w	r2, r3, #3
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80a2 	beq.w	8002a3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	4b57      	ldr	r3, [pc, #348]	; (8002a58 <HAL_GPIO_Init+0x2e8>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	4a56      	ldr	r2, [pc, #344]	; (8002a58 <HAL_GPIO_Init+0x2e8>)
 8002900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002904:	6453      	str	r3, [r2, #68]	; 0x44
 8002906:	4b54      	ldr	r3, [pc, #336]	; (8002a58 <HAL_GPIO_Init+0x2e8>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002912:	4a52      	ldr	r2, [pc, #328]	; (8002a5c <HAL_GPIO_Init+0x2ec>)
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	089b      	lsrs	r3, r3, #2
 8002918:	3302      	adds	r3, #2
 800291a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	220f      	movs	r2, #15
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a49      	ldr	r2, [pc, #292]	; (8002a60 <HAL_GPIO_Init+0x2f0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d019      	beq.n	8002972 <HAL_GPIO_Init+0x202>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a48      	ldr	r2, [pc, #288]	; (8002a64 <HAL_GPIO_Init+0x2f4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d013      	beq.n	800296e <HAL_GPIO_Init+0x1fe>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a47      	ldr	r2, [pc, #284]	; (8002a68 <HAL_GPIO_Init+0x2f8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00d      	beq.n	800296a <HAL_GPIO_Init+0x1fa>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a46      	ldr	r2, [pc, #280]	; (8002a6c <HAL_GPIO_Init+0x2fc>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d007      	beq.n	8002966 <HAL_GPIO_Init+0x1f6>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a45      	ldr	r2, [pc, #276]	; (8002a70 <HAL_GPIO_Init+0x300>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_GPIO_Init+0x1f2>
 800295e:	2304      	movs	r3, #4
 8002960:	e008      	b.n	8002974 <HAL_GPIO_Init+0x204>
 8002962:	2307      	movs	r3, #7
 8002964:	e006      	b.n	8002974 <HAL_GPIO_Init+0x204>
 8002966:	2303      	movs	r3, #3
 8002968:	e004      	b.n	8002974 <HAL_GPIO_Init+0x204>
 800296a:	2302      	movs	r3, #2
 800296c:	e002      	b.n	8002974 <HAL_GPIO_Init+0x204>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_GPIO_Init+0x204>
 8002972:	2300      	movs	r3, #0
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	f002 0203 	and.w	r2, r2, #3
 800297a:	0092      	lsls	r2, r2, #2
 800297c:	4093      	lsls	r3, r2
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002984:	4935      	ldr	r1, [pc, #212]	; (8002a5c <HAL_GPIO_Init+0x2ec>)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	3302      	adds	r3, #2
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002992:	4b38      	ldr	r3, [pc, #224]	; (8002a74 <HAL_GPIO_Init+0x304>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029b6:	4a2f      	ldr	r2, [pc, #188]	; (8002a74 <HAL_GPIO_Init+0x304>)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029bc:	4b2d      	ldr	r3, [pc, #180]	; (8002a74 <HAL_GPIO_Init+0x304>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e0:	4a24      	ldr	r2, [pc, #144]	; (8002a74 <HAL_GPIO_Init+0x304>)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029e6:	4b23      	ldr	r3, [pc, #140]	; (8002a74 <HAL_GPIO_Init+0x304>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a0a:	4a1a      	ldr	r2, [pc, #104]	; (8002a74 <HAL_GPIO_Init+0x304>)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a10:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <HAL_GPIO_Init+0x304>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a34:	4a0f      	ldr	r2, [pc, #60]	; (8002a74 <HAL_GPIO_Init+0x304>)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b0f      	cmp	r3, #15
 8002a44:	f67f aea2 	bls.w	800278c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3724      	adds	r7, #36	; 0x24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40013800 	.word	0x40013800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40020400 	.word	0x40020400
 8002a68:	40020800 	.word	0x40020800
 8002a6c:	40020c00 	.word	0x40020c00
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40013c00 	.word	0x40013c00

08002a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	807b      	strh	r3, [r7, #2]
 8002a84:	4613      	mov	r3, r2
 8002a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a88:	787b      	ldrb	r3, [r7, #1]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a94:	e003      	b.n	8002a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a96:	887b      	ldrh	r3, [r7, #2]
 8002a98:	041a      	lsls	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	619a      	str	r2, [r3, #24]
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e12b      	b.n	8002d16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7fe ff86 	bl	80019e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2224      	movs	r2, #36	; 0x24
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002afe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b10:	f001 fbbc 	bl	800428c <HAL_RCC_GetPCLK1Freq>
 8002b14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4a81      	ldr	r2, [pc, #516]	; (8002d20 <HAL_I2C_Init+0x274>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d807      	bhi.n	8002b30 <HAL_I2C_Init+0x84>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4a80      	ldr	r2, [pc, #512]	; (8002d24 <HAL_I2C_Init+0x278>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	bf94      	ite	ls
 8002b28:	2301      	movls	r3, #1
 8002b2a:	2300      	movhi	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	e006      	b.n	8002b3e <HAL_I2C_Init+0x92>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4a7d      	ldr	r2, [pc, #500]	; (8002d28 <HAL_I2C_Init+0x27c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	bf94      	ite	ls
 8002b38:	2301      	movls	r3, #1
 8002b3a:	2300      	movhi	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e0e7      	b.n	8002d16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4a78      	ldr	r2, [pc, #480]	; (8002d2c <HAL_I2C_Init+0x280>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	0c9b      	lsrs	r3, r3, #18
 8002b50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4a6a      	ldr	r2, [pc, #424]	; (8002d20 <HAL_I2C_Init+0x274>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d802      	bhi.n	8002b80 <HAL_I2C_Init+0xd4>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	e009      	b.n	8002b94 <HAL_I2C_Init+0xe8>
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b86:	fb02 f303 	mul.w	r3, r2, r3
 8002b8a:	4a69      	ldr	r2, [pc, #420]	; (8002d30 <HAL_I2C_Init+0x284>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	099b      	lsrs	r3, r3, #6
 8002b92:	3301      	adds	r3, #1
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ba6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	495c      	ldr	r1, [pc, #368]	; (8002d20 <HAL_I2C_Init+0x274>)
 8002bb0:	428b      	cmp	r3, r1
 8002bb2:	d819      	bhi.n	8002be8 <HAL_I2C_Init+0x13c>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1e59      	subs	r1, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bc2:	1c59      	adds	r1, r3, #1
 8002bc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bc8:	400b      	ands	r3, r1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_I2C_Init+0x138>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1e59      	subs	r1, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bdc:	3301      	adds	r3, #1
 8002bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be2:	e051      	b.n	8002c88 <HAL_I2C_Init+0x1dc>
 8002be4:	2304      	movs	r3, #4
 8002be6:	e04f      	b.n	8002c88 <HAL_I2C_Init+0x1dc>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d111      	bne.n	8002c14 <HAL_I2C_Init+0x168>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1e58      	subs	r0, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6859      	ldr	r1, [r3, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	440b      	add	r3, r1
 8002bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c02:	3301      	adds	r3, #1
 8002c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	bf0c      	ite	eq
 8002c0c:	2301      	moveq	r3, #1
 8002c0e:	2300      	movne	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	e012      	b.n	8002c3a <HAL_I2C_Init+0x18e>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	1e58      	subs	r0, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6859      	ldr	r1, [r3, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	0099      	lsls	r1, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	bf0c      	ite	eq
 8002c34:	2301      	moveq	r3, #1
 8002c36:	2300      	movne	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_I2C_Init+0x196>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e022      	b.n	8002c88 <HAL_I2C_Init+0x1dc>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10e      	bne.n	8002c68 <HAL_I2C_Init+0x1bc>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1e58      	subs	r0, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6859      	ldr	r1, [r3, #4]
 8002c52:	460b      	mov	r3, r1
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	440b      	add	r3, r1
 8002c58:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c66:	e00f      	b.n	8002c88 <HAL_I2C_Init+0x1dc>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1e58      	subs	r0, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6859      	ldr	r1, [r3, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	0099      	lsls	r1, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c7e:	3301      	adds	r3, #1
 8002c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	6809      	ldr	r1, [r1, #0]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69da      	ldr	r2, [r3, #28]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6911      	ldr	r1, [r2, #16]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68d2      	ldr	r2, [r2, #12]
 8002cc2:	4311      	orrs	r1, r2
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	000186a0 	.word	0x000186a0
 8002d24:	001e847f 	.word	0x001e847f
 8002d28:	003d08ff 	.word	0x003d08ff
 8002d2c:	431bde83 	.word	0x431bde83
 8002d30:	10624dd3 	.word	0x10624dd3

08002d34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	4608      	mov	r0, r1
 8002d3e:	4611      	mov	r1, r2
 8002d40:	461a      	mov	r2, r3
 8002d42:	4603      	mov	r3, r0
 8002d44:	817b      	strh	r3, [r7, #10]
 8002d46:	460b      	mov	r3, r1
 8002d48:	813b      	strh	r3, [r7, #8]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d4e:	f7ff fbcd 	bl	80024ec <HAL_GetTick>
 8002d52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	f040 80d9 	bne.w	8002f14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	2319      	movs	r3, #25
 8002d68:	2201      	movs	r2, #1
 8002d6a:	496d      	ldr	r1, [pc, #436]	; (8002f20 <HAL_I2C_Mem_Write+0x1ec>)
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fc7f 	bl	8003670 <I2C_WaitOnFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e0cc      	b.n	8002f16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_I2C_Mem_Write+0x56>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e0c5      	b.n	8002f16 <HAL_I2C_Mem_Write+0x1e2>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d007      	beq.n	8002db0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2221      	movs	r2, #33	; 0x21
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2240      	movs	r2, #64	; 0x40
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a3a      	ldr	r2, [r7, #32]
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002de0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4a4d      	ldr	r2, [pc, #308]	; (8002f24 <HAL_I2C_Mem_Write+0x1f0>)
 8002df0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002df2:	88f8      	ldrh	r0, [r7, #6]
 8002df4:	893a      	ldrh	r2, [r7, #8]
 8002df6:	8979      	ldrh	r1, [r7, #10]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	9301      	str	r3, [sp, #4]
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	4603      	mov	r3, r0
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 fab6 	bl	8003374 <I2C_RequestMemoryWrite>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d052      	beq.n	8002eb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e081      	b.n	8002f16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 fd00 	bl	800381c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00d      	beq.n	8002e3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d107      	bne.n	8002e3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e06b      	b.n	8002f16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	781a      	ldrb	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d11b      	bne.n	8002eb4 <HAL_I2C_Mem_Write+0x180>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d017      	beq.n	8002eb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	781a      	ldrb	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1aa      	bne.n	8002e12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 fcec 	bl	800389e <I2C_WaitOnBTFFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00d      	beq.n	8002ee8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d107      	bne.n	8002ee4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e016      	b.n	8002f16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	e000      	b.n	8002f16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f14:	2302      	movs	r3, #2
  }
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	00100002 	.word	0x00100002
 8002f24:	ffff0000 	.word	0xffff0000

08002f28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08c      	sub	sp, #48	; 0x30
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	4608      	mov	r0, r1
 8002f32:	4611      	mov	r1, r2
 8002f34:	461a      	mov	r2, r3
 8002f36:	4603      	mov	r3, r0
 8002f38:	817b      	strh	r3, [r7, #10]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	813b      	strh	r3, [r7, #8]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f42:	f7ff fad3 	bl	80024ec <HAL_GetTick>
 8002f46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b20      	cmp	r3, #32
 8002f52:	f040 8208 	bne.w	8003366 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	2319      	movs	r3, #25
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	497b      	ldr	r1, [pc, #492]	; (800314c <HAL_I2C_Mem_Read+0x224>)
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fb85 	bl	8003670 <I2C_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e1fb      	b.n	8003368 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_I2C_Mem_Read+0x56>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e1f4      	b.n	8003368 <HAL_I2C_Mem_Read+0x440>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d007      	beq.n	8002fa4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2222      	movs	r2, #34	; 0x22
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2240      	movs	r2, #64	; 0x40
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4a5b      	ldr	r2, [pc, #364]	; (8003150 <HAL_I2C_Mem_Read+0x228>)
 8002fe4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fe6:	88f8      	ldrh	r0, [r7, #6]
 8002fe8:	893a      	ldrh	r2, [r7, #8]
 8002fea:	8979      	ldrh	r1, [r7, #10]
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fa52 	bl	80034a0 <I2C_RequestMemoryRead>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e1b0      	b.n	8003368 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300a:	2b00      	cmp	r3, #0
 800300c:	d113      	bne.n	8003036 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300e:	2300      	movs	r3, #0
 8003010:	623b      	str	r3, [r7, #32]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	623b      	str	r3, [r7, #32]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	623b      	str	r3, [r7, #32]
 8003022:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	e184      	b.n	8003340 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303a:	2b01      	cmp	r3, #1
 800303c:	d11b      	bne.n	8003076 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800304c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	e164      	b.n	8003340 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307a:	2b02      	cmp	r3, #2
 800307c:	d11b      	bne.n	80030b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800308c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800309c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	61bb      	str	r3, [r7, #24]
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	e144      	b.n	8003340 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030cc:	e138      	b.n	8003340 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	f200 80f1 	bhi.w	80032ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d123      	bne.n	8003128 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 fc1b 	bl	8003920 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e139      	b.n	8003368 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003126:	e10b      	b.n	8003340 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312c:	2b02      	cmp	r3, #2
 800312e:	d14e      	bne.n	80031ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003136:	2200      	movs	r2, #0
 8003138:	4906      	ldr	r1, [pc, #24]	; (8003154 <HAL_I2C_Mem_Read+0x22c>)
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fa98 	bl	8003670 <I2C_WaitOnFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d008      	beq.n	8003158 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e10e      	b.n	8003368 <HAL_I2C_Mem_Read+0x440>
 800314a:	bf00      	nop
 800314c:	00100002 	.word	0x00100002
 8003150:	ffff0000 	.word	0xffff0000
 8003154:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031cc:	e0b8      	b.n	8003340 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d4:	2200      	movs	r2, #0
 80031d6:	4966      	ldr	r1, [pc, #408]	; (8003370 <HAL_I2C_Mem_Read+0x448>)
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fa49 	bl	8003670 <I2C_WaitOnFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0bf      	b.n	8003368 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003230:	2200      	movs	r2, #0
 8003232:	494f      	ldr	r1, [pc, #316]	; (8003370 <HAL_I2C_Mem_Read+0x448>)
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 fa1b 	bl	8003670 <I2C_WaitOnFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e091      	b.n	8003368 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032b8:	e042      	b.n	8003340 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 fb2e 	bl	8003920 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e04c      	b.n	8003368 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b04      	cmp	r3, #4
 800330c:	d118      	bne.n	8003340 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003336:	b29b      	uxth	r3, r3
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	f47f aec2 	bne.w	80030ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	e000      	b.n	8003368 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003366:	2302      	movs	r3, #2
  }
}
 8003368:	4618      	mov	r0, r3
 800336a:	3728      	adds	r7, #40	; 0x28
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	00010004 	.word	0x00010004

08003374 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	4608      	mov	r0, r1
 800337e:	4611      	mov	r1, r2
 8003380:	461a      	mov	r2, r3
 8003382:	4603      	mov	r3, r0
 8003384:	817b      	strh	r3, [r7, #10]
 8003386:	460b      	mov	r3, r1
 8003388:	813b      	strh	r3, [r7, #8]
 800338a:	4613      	mov	r3, r2
 800338c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800339c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f960 	bl	8003670 <I2C_WaitOnFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00d      	beq.n	80033d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c4:	d103      	bne.n	80033ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e05f      	b.n	8003492 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033d2:	897b      	ldrh	r3, [r7, #10]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	6a3a      	ldr	r2, [r7, #32]
 80033e6:	492d      	ldr	r1, [pc, #180]	; (800349c <I2C_RequestMemoryWrite+0x128>)
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f998 	bl	800371e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e04c      	b.n	8003492 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800340e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003410:	6a39      	ldr	r1, [r7, #32]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fa02 	bl	800381c <I2C_WaitOnTXEFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00d      	beq.n	800343a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	2b04      	cmp	r3, #4
 8003424:	d107      	bne.n	8003436 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003434:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e02b      	b.n	8003492 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d105      	bne.n	800344c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003440:	893b      	ldrh	r3, [r7, #8]
 8003442:	b2da      	uxtb	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	611a      	str	r2, [r3, #16]
 800344a:	e021      	b.n	8003490 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800344c:	893b      	ldrh	r3, [r7, #8]
 800344e:	0a1b      	lsrs	r3, r3, #8
 8003450:	b29b      	uxth	r3, r3
 8003452:	b2da      	uxtb	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800345a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345c:	6a39      	ldr	r1, [r7, #32]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f9dc 	bl	800381c <I2C_WaitOnTXEFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00d      	beq.n	8003486 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	2b04      	cmp	r3, #4
 8003470:	d107      	bne.n	8003482 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003480:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e005      	b.n	8003492 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003486:	893b      	ldrh	r3, [r7, #8]
 8003488:	b2da      	uxtb	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	00010002 	.word	0x00010002

080034a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	4608      	mov	r0, r1
 80034aa:	4611      	mov	r1, r2
 80034ac:	461a      	mov	r2, r3
 80034ae:	4603      	mov	r3, r0
 80034b0:	817b      	strh	r3, [r7, #10]
 80034b2:	460b      	mov	r3, r1
 80034b4:	813b      	strh	r3, [r7, #8]
 80034b6:	4613      	mov	r3, r2
 80034b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f8c2 	bl	8003670 <I2C_WaitOnFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00d      	beq.n	800350e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003500:	d103      	bne.n	800350a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003508:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e0aa      	b.n	8003664 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800350e:	897b      	ldrh	r3, [r7, #10]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800351c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	6a3a      	ldr	r2, [r7, #32]
 8003522:	4952      	ldr	r1, [pc, #328]	; (800366c <I2C_RequestMemoryRead+0x1cc>)
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f8fa 	bl	800371e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e097      	b.n	8003664 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800354a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354c:	6a39      	ldr	r1, [r7, #32]
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f964 	bl	800381c <I2C_WaitOnTXEFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00d      	beq.n	8003576 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	2b04      	cmp	r3, #4
 8003560:	d107      	bne.n	8003572 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003570:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e076      	b.n	8003664 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d105      	bne.n	8003588 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800357c:	893b      	ldrh	r3, [r7, #8]
 800357e:	b2da      	uxtb	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	611a      	str	r2, [r3, #16]
 8003586:	e021      	b.n	80035cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003588:	893b      	ldrh	r3, [r7, #8]
 800358a:	0a1b      	lsrs	r3, r3, #8
 800358c:	b29b      	uxth	r3, r3
 800358e:	b2da      	uxtb	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003598:	6a39      	ldr	r1, [r7, #32]
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f93e 	bl	800381c <I2C_WaitOnTXEFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00d      	beq.n	80035c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d107      	bne.n	80035be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e050      	b.n	8003664 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035c2:	893b      	ldrh	r3, [r7, #8]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ce:	6a39      	ldr	r1, [r7, #32]
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f923 	bl	800381c <I2C_WaitOnTXEFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00d      	beq.n	80035f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d107      	bne.n	80035f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e035      	b.n	8003664 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003606:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	2200      	movs	r2, #0
 8003610:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 f82b 	bl	8003670 <I2C_WaitOnFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00d      	beq.n	800363c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800362e:	d103      	bne.n	8003638 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003636:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e013      	b.n	8003664 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800363c:	897b      	ldrh	r3, [r7, #10]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	b2da      	uxtb	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	6a3a      	ldr	r2, [r7, #32]
 8003650:	4906      	ldr	r1, [pc, #24]	; (800366c <I2C_RequestMemoryRead+0x1cc>)
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f863 	bl	800371e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	00010002 	.word	0x00010002

08003670 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	4613      	mov	r3, r2
 800367e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003680:	e025      	b.n	80036ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003688:	d021      	beq.n	80036ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368a:	f7fe ff2f 	bl	80024ec <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d302      	bcc.n	80036a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d116      	bne.n	80036ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f043 0220 	orr.w	r2, r3, #32
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e023      	b.n	8003716 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	0c1b      	lsrs	r3, r3, #16
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d10d      	bne.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	43da      	mvns	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4013      	ands	r3, r2
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	bf0c      	ite	eq
 80036ea:	2301      	moveq	r3, #1
 80036ec:	2300      	movne	r3, #0
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	e00c      	b.n	800370e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	43da      	mvns	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4013      	ands	r3, r2
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	bf0c      	ite	eq
 8003706:	2301      	moveq	r3, #1
 8003708:	2300      	movne	r3, #0
 800370a:	b2db      	uxtb	r3, r3
 800370c:	461a      	mov	r2, r3
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	429a      	cmp	r2, r3
 8003712:	d0b6      	beq.n	8003682 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800372c:	e051      	b.n	80037d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373c:	d123      	bne.n	8003786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003756:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f043 0204 	orr.w	r2, r3, #4
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e046      	b.n	8003814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378c:	d021      	beq.n	80037d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378e:	f7fe fead 	bl	80024ec <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	429a      	cmp	r2, r3
 800379c:	d302      	bcc.n	80037a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d116      	bne.n	80037d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f043 0220 	orr.w	r2, r3, #32
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e020      	b.n	8003814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	0c1b      	lsrs	r3, r3, #16
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d10c      	bne.n	80037f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	43da      	mvns	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4013      	ands	r3, r2
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	bf14      	ite	ne
 80037ee:	2301      	movne	r3, #1
 80037f0:	2300      	moveq	r3, #0
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	e00b      	b.n	800380e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	43da      	mvns	r2, r3
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	4013      	ands	r3, r2
 8003802:	b29b      	uxth	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	bf14      	ite	ne
 8003808:	2301      	movne	r3, #1
 800380a:	2300      	moveq	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d18d      	bne.n	800372e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003828:	e02d      	b.n	8003886 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f8ce 	bl	80039cc <I2C_IsAcknowledgeFailed>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e02d      	b.n	8003896 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003840:	d021      	beq.n	8003886 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003842:	f7fe fe53 	bl	80024ec <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	429a      	cmp	r2, r3
 8003850:	d302      	bcc.n	8003858 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d116      	bne.n	8003886 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f043 0220 	orr.w	r2, r3, #32
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e007      	b.n	8003896 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003890:	2b80      	cmp	r3, #128	; 0x80
 8003892:	d1ca      	bne.n	800382a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038aa:	e02d      	b.n	8003908 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f88d 	bl	80039cc <I2C_IsAcknowledgeFailed>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e02d      	b.n	8003918 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c2:	d021      	beq.n	8003908 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c4:	f7fe fe12 	bl	80024ec <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d302      	bcc.n	80038da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d116      	bne.n	8003908 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	f043 0220 	orr.w	r2, r3, #32
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e007      	b.n	8003918 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	2b04      	cmp	r3, #4
 8003914:	d1ca      	bne.n	80038ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800392c:	e042      	b.n	80039b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b10      	cmp	r3, #16
 800393a:	d119      	bne.n	8003970 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0210 	mvn.w	r2, #16
 8003944:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e029      	b.n	80039c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003970:	f7fe fdbc 	bl	80024ec <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	429a      	cmp	r2, r3
 800397e:	d302      	bcc.n	8003986 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d116      	bne.n	80039b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	f043 0220 	orr.w	r2, r3, #32
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e007      	b.n	80039c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039be:	2b40      	cmp	r3, #64	; 0x40
 80039c0:	d1b5      	bne.n	800392e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e2:	d11b      	bne.n	8003a1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	f043 0204 	orr.w	r2, r3, #4
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e267      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d075      	beq.n	8003b36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a4a:	4b88      	ldr	r3, [pc, #544]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d00c      	beq.n	8003a70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a56:	4b85      	ldr	r3, [pc, #532]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d112      	bne.n	8003a88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a62:	4b82      	ldr	r3, [pc, #520]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a6e:	d10b      	bne.n	8003a88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a70:	4b7e      	ldr	r3, [pc, #504]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d05b      	beq.n	8003b34 <HAL_RCC_OscConfig+0x108>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d157      	bne.n	8003b34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e242      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a90:	d106      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x74>
 8003a92:	4b76      	ldr	r3, [pc, #472]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a75      	ldr	r2, [pc, #468]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e01d      	b.n	8003adc <HAL_RCC_OscConfig+0xb0>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x98>
 8003aaa:	4b70      	ldr	r3, [pc, #448]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a6f      	ldr	r2, [pc, #444]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	4b6d      	ldr	r3, [pc, #436]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6c      	ldr	r2, [pc, #432]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	e00b      	b.n	8003adc <HAL_RCC_OscConfig+0xb0>
 8003ac4:	4b69      	ldr	r3, [pc, #420]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a68      	ldr	r2, [pc, #416]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4b66      	ldr	r3, [pc, #408]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a65      	ldr	r2, [pc, #404]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d013      	beq.n	8003b0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fe fd02 	bl	80024ec <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aec:	f7fe fcfe 	bl	80024ec <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e207      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	4b5b      	ldr	r3, [pc, #364]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0xc0>
 8003b0a:	e014      	b.n	8003b36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fe fcee 	bl	80024ec <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b14:	f7fe fcea 	bl	80024ec <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	; 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e1f3      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b26:	4b51      	ldr	r3, [pc, #324]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0xe8>
 8003b32:	e000      	b.n	8003b36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d063      	beq.n	8003c0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b42:	4b4a      	ldr	r3, [pc, #296]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b4e:	4b47      	ldr	r3, [pc, #284]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d11c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b5a:	4b44      	ldr	r3, [pc, #272]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d116      	bne.n	8003b94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b66:	4b41      	ldr	r3, [pc, #260]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <HAL_RCC_OscConfig+0x152>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d001      	beq.n	8003b7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e1c7      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7e:	4b3b      	ldr	r3, [pc, #236]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4937      	ldr	r1, [pc, #220]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b92:	e03a      	b.n	8003c0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d020      	beq.n	8003bde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b9c:	4b34      	ldr	r3, [pc, #208]	; (8003c70 <HAL_RCC_OscConfig+0x244>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba2:	f7fe fca3 	bl	80024ec <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003baa:	f7fe fc9f 	bl	80024ec <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e1a8      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbc:	4b2b      	ldr	r3, [pc, #172]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc8:	4b28      	ldr	r3, [pc, #160]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4925      	ldr	r1, [pc, #148]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	600b      	str	r3, [r1, #0]
 8003bdc:	e015      	b.n	8003c0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bde:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <HAL_RCC_OscConfig+0x244>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fe fc82 	bl	80024ec <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bec:	f7fe fc7e 	bl	80024ec <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e187      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d036      	beq.n	8003c84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d016      	beq.n	8003c4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1e:	4b15      	ldr	r3, [pc, #84]	; (8003c74 <HAL_RCC_OscConfig+0x248>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c24:	f7fe fc62 	bl	80024ec <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c2c:	f7fe fc5e 	bl	80024ec <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e167      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x200>
 8003c4a:	e01b      	b.n	8003c84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c4c:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <HAL_RCC_OscConfig+0x248>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c52:	f7fe fc4b 	bl	80024ec <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c58:	e00e      	b.n	8003c78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c5a:	f7fe fc47 	bl	80024ec <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d907      	bls.n	8003c78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e150      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	42470000 	.word	0x42470000
 8003c74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c78:	4b88      	ldr	r3, [pc, #544]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ea      	bne.n	8003c5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8097 	beq.w	8003dc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c92:	2300      	movs	r3, #0
 8003c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c96:	4b81      	ldr	r3, [pc, #516]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10f      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	4b7d      	ldr	r3, [pc, #500]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	4a7c      	ldr	r2, [pc, #496]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb2:	4b7a      	ldr	r3, [pc, #488]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc2:	4b77      	ldr	r3, [pc, #476]	; (8003ea0 <HAL_RCC_OscConfig+0x474>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d118      	bne.n	8003d00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cce:	4b74      	ldr	r3, [pc, #464]	; (8003ea0 <HAL_RCC_OscConfig+0x474>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a73      	ldr	r2, [pc, #460]	; (8003ea0 <HAL_RCC_OscConfig+0x474>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cda:	f7fe fc07 	bl	80024ec <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce2:	f7fe fc03 	bl	80024ec <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e10c      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf4:	4b6a      	ldr	r3, [pc, #424]	; (8003ea0 <HAL_RCC_OscConfig+0x474>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d106      	bne.n	8003d16 <HAL_RCC_OscConfig+0x2ea>
 8003d08:	4b64      	ldr	r3, [pc, #400]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	4a63      	ldr	r2, [pc, #396]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	6713      	str	r3, [r2, #112]	; 0x70
 8003d14:	e01c      	b.n	8003d50 <HAL_RCC_OscConfig+0x324>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2b05      	cmp	r3, #5
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x30c>
 8003d1e:	4b5f      	ldr	r3, [pc, #380]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	4a5e      	ldr	r2, [pc, #376]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d24:	f043 0304 	orr.w	r3, r3, #4
 8003d28:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2a:	4b5c      	ldr	r3, [pc, #368]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	4a5b      	ldr	r2, [pc, #364]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	6713      	str	r3, [r2, #112]	; 0x70
 8003d36:	e00b      	b.n	8003d50 <HAL_RCC_OscConfig+0x324>
 8003d38:	4b58      	ldr	r3, [pc, #352]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3c:	4a57      	ldr	r2, [pc, #348]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	6713      	str	r3, [r2, #112]	; 0x70
 8003d44:	4b55      	ldr	r3, [pc, #340]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d48:	4a54      	ldr	r2, [pc, #336]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d4a:	f023 0304 	bic.w	r3, r3, #4
 8003d4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d015      	beq.n	8003d84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d58:	f7fe fbc8 	bl	80024ec <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d60:	f7fe fbc4 	bl	80024ec <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e0cb      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d76:	4b49      	ldr	r3, [pc, #292]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0ee      	beq.n	8003d60 <HAL_RCC_OscConfig+0x334>
 8003d82:	e014      	b.n	8003dae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d84:	f7fe fbb2 	bl	80024ec <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d8a:	e00a      	b.n	8003da2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d8c:	f7fe fbae 	bl	80024ec <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e0b5      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da2:	4b3e      	ldr	r3, [pc, #248]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1ee      	bne.n	8003d8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dae:	7dfb      	ldrb	r3, [r7, #23]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db4:	4b39      	ldr	r3, [pc, #228]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	4a38      	ldr	r2, [pc, #224]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80a1 	beq.w	8003f0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dca:	4b34      	ldr	r3, [pc, #208]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d05c      	beq.n	8003e90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d141      	bne.n	8003e62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dde:	4b31      	ldr	r3, [pc, #196]	; (8003ea4 <HAL_RCC_OscConfig+0x478>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de4:	f7fe fb82 	bl	80024ec <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dec:	f7fe fb7e 	bl	80024ec <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e087      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfe:	4b27      	ldr	r3, [pc, #156]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69da      	ldr	r2, [r3, #28]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	019b      	lsls	r3, r3, #6
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	085b      	lsrs	r3, r3, #1
 8003e22:	3b01      	subs	r3, #1
 8003e24:	041b      	lsls	r3, r3, #16
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	061b      	lsls	r3, r3, #24
 8003e2e:	491b      	ldr	r1, [pc, #108]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e34:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <HAL_RCC_OscConfig+0x478>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3a:	f7fe fb57 	bl	80024ec <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e42:	f7fe fb53 	bl	80024ec <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e05c      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e54:	4b11      	ldr	r3, [pc, #68]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x416>
 8003e60:	e054      	b.n	8003f0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e62:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <HAL_RCC_OscConfig+0x478>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fe fb40 	bl	80024ec <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e70:	f7fe fb3c 	bl	80024ec <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e045      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x444>
 8003e8e:	e03d      	b.n	8003f0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d107      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e038      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40007000 	.word	0x40007000
 8003ea4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <HAL_RCC_OscConfig+0x4ec>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d028      	beq.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d121      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d11a      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ed8:	4013      	ands	r3, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ede:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d111      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d107      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d001      	beq.n	8003f0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800

08003f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e0cc      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f30:	4b68      	ldr	r3, [pc, #416]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d90c      	bls.n	8003f58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3e:	4b65      	ldr	r3, [pc, #404]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f46:	4b63      	ldr	r3, [pc, #396]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0b8      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d020      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f70:	4b59      	ldr	r3, [pc, #356]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4a58      	ldr	r2, [pc, #352]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f88:	4b53      	ldr	r3, [pc, #332]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4a52      	ldr	r2, [pc, #328]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f94:	4b50      	ldr	r3, [pc, #320]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	494d      	ldr	r1, [pc, #308]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d044      	beq.n	800403c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d107      	bne.n	8003fca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	4b47      	ldr	r3, [pc, #284]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d119      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e07f      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d003      	beq.n	8003fda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d107      	bne.n	8003fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fda:	4b3f      	ldr	r3, [pc, #252]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e06f      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fea:	4b3b      	ldr	r3, [pc, #236]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e067      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ffa:	4b37      	ldr	r3, [pc, #220]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f023 0203 	bic.w	r2, r3, #3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4934      	ldr	r1, [pc, #208]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	4313      	orrs	r3, r2
 800400a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800400c:	f7fe fa6e 	bl	80024ec <HAL_GetTick>
 8004010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004012:	e00a      	b.n	800402a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004014:	f7fe fa6a 	bl	80024ec <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e04f      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 020c 	and.w	r2, r3, #12
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	429a      	cmp	r2, r3
 800403a:	d1eb      	bne.n	8004014 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800403c:	4b25      	ldr	r3, [pc, #148]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d20c      	bcs.n	8004064 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b22      	ldr	r3, [pc, #136]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	4b20      	ldr	r3, [pc, #128]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e032      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004070:	4b19      	ldr	r3, [pc, #100]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4916      	ldr	r1, [pc, #88]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d009      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800408e:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	490e      	ldr	r1, [pc, #56]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040a2:	f000 f821 	bl	80040e8 <HAL_RCC_GetSysClockFreq>
 80040a6:	4602      	mov	r2, r0
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	490a      	ldr	r1, [pc, #40]	; (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 80040b4:	5ccb      	ldrb	r3, [r1, r3]
 80040b6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ba:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040be:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <HAL_RCC_ClockConfig+0x1c8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fe f9ce 	bl	8002464 <HAL_InitTick>

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40023c00 	.word	0x40023c00
 80040d8:	40023800 	.word	0x40023800
 80040dc:	08006d00 	.word	0x08006d00
 80040e0:	20000020 	.word	0x20000020
 80040e4:	20000024 	.word	0x20000024

080040e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ec:	b090      	sub	sp, #64	; 0x40
 80040ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	637b      	str	r3, [r7, #52]	; 0x34
 80040f4:	2300      	movs	r3, #0
 80040f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040f8:	2300      	movs	r3, #0
 80040fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004100:	4b59      	ldr	r3, [pc, #356]	; (8004268 <HAL_RCC_GetSysClockFreq+0x180>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 030c 	and.w	r3, r3, #12
 8004108:	2b08      	cmp	r3, #8
 800410a:	d00d      	beq.n	8004128 <HAL_RCC_GetSysClockFreq+0x40>
 800410c:	2b08      	cmp	r3, #8
 800410e:	f200 80a1 	bhi.w	8004254 <HAL_RCC_GetSysClockFreq+0x16c>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_RCC_GetSysClockFreq+0x34>
 8004116:	2b04      	cmp	r3, #4
 8004118:	d003      	beq.n	8004122 <HAL_RCC_GetSysClockFreq+0x3a>
 800411a:	e09b      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800411c:	4b53      	ldr	r3, [pc, #332]	; (800426c <HAL_RCC_GetSysClockFreq+0x184>)
 800411e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004120:	e09b      	b.n	800425a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004122:	4b53      	ldr	r3, [pc, #332]	; (8004270 <HAL_RCC_GetSysClockFreq+0x188>)
 8004124:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004126:	e098      	b.n	800425a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004128:	4b4f      	ldr	r3, [pc, #316]	; (8004268 <HAL_RCC_GetSysClockFreq+0x180>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004130:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004132:	4b4d      	ldr	r3, [pc, #308]	; (8004268 <HAL_RCC_GetSysClockFreq+0x180>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d028      	beq.n	8004190 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800413e:	4b4a      	ldr	r3, [pc, #296]	; (8004268 <HAL_RCC_GetSysClockFreq+0x180>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	099b      	lsrs	r3, r3, #6
 8004144:	2200      	movs	r2, #0
 8004146:	623b      	str	r3, [r7, #32]
 8004148:	627a      	str	r2, [r7, #36]	; 0x24
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004150:	2100      	movs	r1, #0
 8004152:	4b47      	ldr	r3, [pc, #284]	; (8004270 <HAL_RCC_GetSysClockFreq+0x188>)
 8004154:	fb03 f201 	mul.w	r2, r3, r1
 8004158:	2300      	movs	r3, #0
 800415a:	fb00 f303 	mul.w	r3, r0, r3
 800415e:	4413      	add	r3, r2
 8004160:	4a43      	ldr	r2, [pc, #268]	; (8004270 <HAL_RCC_GetSysClockFreq+0x188>)
 8004162:	fba0 1202 	umull	r1, r2, r0, r2
 8004166:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004168:	460a      	mov	r2, r1
 800416a:	62ba      	str	r2, [r7, #40]	; 0x28
 800416c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800416e:	4413      	add	r3, r2
 8004170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004174:	2200      	movs	r2, #0
 8004176:	61bb      	str	r3, [r7, #24]
 8004178:	61fa      	str	r2, [r7, #28]
 800417a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800417e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004182:	f7fc fcf7 	bl	8000b74 <__aeabi_uldivmod>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4613      	mov	r3, r2
 800418c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800418e:	e053      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004190:	4b35      	ldr	r3, [pc, #212]	; (8004268 <HAL_RCC_GetSysClockFreq+0x180>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	099b      	lsrs	r3, r3, #6
 8004196:	2200      	movs	r2, #0
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	617a      	str	r2, [r7, #20]
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041a2:	f04f 0b00 	mov.w	fp, #0
 80041a6:	4652      	mov	r2, sl
 80041a8:	465b      	mov	r3, fp
 80041aa:	f04f 0000 	mov.w	r0, #0
 80041ae:	f04f 0100 	mov.w	r1, #0
 80041b2:	0159      	lsls	r1, r3, #5
 80041b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041b8:	0150      	lsls	r0, r2, #5
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	ebb2 080a 	subs.w	r8, r2, sl
 80041c2:	eb63 090b 	sbc.w	r9, r3, fp
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80041d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80041d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80041da:	ebb2 0408 	subs.w	r4, r2, r8
 80041de:	eb63 0509 	sbc.w	r5, r3, r9
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	00eb      	lsls	r3, r5, #3
 80041ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041f0:	00e2      	lsls	r2, r4, #3
 80041f2:	4614      	mov	r4, r2
 80041f4:	461d      	mov	r5, r3
 80041f6:	eb14 030a 	adds.w	r3, r4, sl
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	eb45 030b 	adc.w	r3, r5, fp
 8004200:	607b      	str	r3, [r7, #4]
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800420e:	4629      	mov	r1, r5
 8004210:	028b      	lsls	r3, r1, #10
 8004212:	4621      	mov	r1, r4
 8004214:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004218:	4621      	mov	r1, r4
 800421a:	028a      	lsls	r2, r1, #10
 800421c:	4610      	mov	r0, r2
 800421e:	4619      	mov	r1, r3
 8004220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004222:	2200      	movs	r2, #0
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	60fa      	str	r2, [r7, #12]
 8004228:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800422c:	f7fc fca2 	bl	8000b74 <__aeabi_uldivmod>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4613      	mov	r3, r2
 8004236:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <HAL_RCC_GetSysClockFreq+0x180>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	0c1b      	lsrs	r3, r3, #16
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	3301      	adds	r3, #1
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004248:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004252:	e002      	b.n	800425a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004254:	4b05      	ldr	r3, [pc, #20]	; (800426c <HAL_RCC_GetSysClockFreq+0x184>)
 8004256:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004258:	bf00      	nop
    }
  }
  return sysclockfreq;
 800425a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800425c:	4618      	mov	r0, r3
 800425e:	3740      	adds	r7, #64	; 0x40
 8004260:	46bd      	mov	sp, r7
 8004262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004266:	bf00      	nop
 8004268:	40023800 	.word	0x40023800
 800426c:	00f42400 	.word	0x00f42400
 8004270:	017d7840 	.word	0x017d7840

08004274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004278:	4b03      	ldr	r3, [pc, #12]	; (8004288 <HAL_RCC_GetHCLKFreq+0x14>)
 800427a:	681b      	ldr	r3, [r3, #0]
}
 800427c:	4618      	mov	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	20000020 	.word	0x20000020

0800428c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004290:	f7ff fff0 	bl	8004274 <HAL_RCC_GetHCLKFreq>
 8004294:	4602      	mov	r2, r0
 8004296:	4b05      	ldr	r3, [pc, #20]	; (80042ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	0a9b      	lsrs	r3, r3, #10
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	4903      	ldr	r1, [pc, #12]	; (80042b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042a2:	5ccb      	ldrb	r3, [r1, r3]
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40023800 	.word	0x40023800
 80042b0:	08006d10 	.word	0x08006d10

080042b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042b8:	f7ff ffdc 	bl	8004274 <HAL_RCC_GetHCLKFreq>
 80042bc:	4602      	mov	r2, r0
 80042be:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	0b5b      	lsrs	r3, r3, #13
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	4903      	ldr	r1, [pc, #12]	; (80042d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ca:	5ccb      	ldrb	r3, [r1, r3]
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40023800 	.word	0x40023800
 80042d8:	08006d10 	.word	0x08006d10

080042dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e07b      	b.n	80043e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d108      	bne.n	8004308 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042fe:	d009      	beq.n	8004314 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	61da      	str	r2, [r3, #28]
 8004306:	e005      	b.n	8004314 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fd fe7c 	bl	800202c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800434a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004398:	ea42 0103 	orr.w	r1, r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	0c1b      	lsrs	r3, r3, #16
 80043b2:	f003 0104 	and.w	r1, r3, #4
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	f003 0210 	and.w	r2, r3, #16
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b088      	sub	sp, #32
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	603b      	str	r3, [r7, #0]
 80043fa:	4613      	mov	r3, r2
 80043fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_SPI_Transmit+0x22>
 800440c:	2302      	movs	r3, #2
 800440e:	e126      	b.n	800465e <HAL_SPI_Transmit+0x270>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004418:	f7fe f868 	bl	80024ec <HAL_GetTick>
 800441c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b01      	cmp	r3, #1
 800442c:	d002      	beq.n	8004434 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800442e:	2302      	movs	r3, #2
 8004430:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004432:	e10b      	b.n	800464c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_SPI_Transmit+0x52>
 800443a:	88fb      	ldrh	r3, [r7, #6]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d102      	bne.n	8004446 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004444:	e102      	b.n	800464c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2203      	movs	r2, #3
 800444a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	88fa      	ldrh	r2, [r7, #6]
 800445e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	88fa      	ldrh	r2, [r7, #6]
 8004464:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800448c:	d10f      	bne.n	80044ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800449c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b8:	2b40      	cmp	r3, #64	; 0x40
 80044ba:	d007      	beq.n	80044cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044d4:	d14b      	bne.n	800456e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_SPI_Transmit+0xf6>
 80044de:	8afb      	ldrh	r3, [r7, #22]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d13e      	bne.n	8004562 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	881a      	ldrh	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	1c9a      	adds	r2, r3, #2
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004508:	e02b      	b.n	8004562 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b02      	cmp	r3, #2
 8004516:	d112      	bne.n	800453e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	881a      	ldrh	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	1c9a      	adds	r2, r3, #2
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	86da      	strh	r2, [r3, #54]	; 0x36
 800453c:	e011      	b.n	8004562 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800453e:	f7fd ffd5 	bl	80024ec <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d803      	bhi.n	8004556 <HAL_SPI_Transmit+0x168>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004554:	d102      	bne.n	800455c <HAL_SPI_Transmit+0x16e>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d102      	bne.n	8004562 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004560:	e074      	b.n	800464c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004566:	b29b      	uxth	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1ce      	bne.n	800450a <HAL_SPI_Transmit+0x11c>
 800456c:	e04c      	b.n	8004608 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <HAL_SPI_Transmit+0x18e>
 8004576:	8afb      	ldrh	r3, [r7, #22]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d140      	bne.n	80045fe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	330c      	adds	r3, #12
 8004586:	7812      	ldrb	r2, [r2, #0]
 8004588:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004598:	b29b      	uxth	r3, r3
 800459a:	3b01      	subs	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80045a2:	e02c      	b.n	80045fe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d113      	bne.n	80045da <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	330c      	adds	r3, #12
 80045bc:	7812      	ldrb	r2, [r2, #0]
 80045be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80045d8:	e011      	b.n	80045fe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045da:	f7fd ff87 	bl	80024ec <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d803      	bhi.n	80045f2 <HAL_SPI_Transmit+0x204>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f0:	d102      	bne.n	80045f8 <HAL_SPI_Transmit+0x20a>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d102      	bne.n	80045fe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045fc:	e026      	b.n	800464c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1cd      	bne.n	80045a4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	6839      	ldr	r1, [r7, #0]
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f8c1 	bl	8004794 <SPI_EndRxTxTransaction>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2220      	movs	r2, #32
 800461c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10a      	bne.n	800463c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004626:	2300      	movs	r3, #0
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	77fb      	strb	r3, [r7, #31]
 8004648:	e000      	b.n	800464c <HAL_SPI_Transmit+0x25e>
  }

error:
 800464a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800465c:	7ffb      	ldrb	r3, [r7, #31]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3720      	adds	r7, #32
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004674:	b2db      	uxtb	r3, r3
}
 8004676:	4618      	mov	r0, r3
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
	...

08004684 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	4613      	mov	r3, r2
 8004692:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004694:	f7fd ff2a 	bl	80024ec <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	4413      	add	r3, r2
 80046a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046a4:	f7fd ff22 	bl	80024ec <HAL_GetTick>
 80046a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046aa:	4b39      	ldr	r3, [pc, #228]	; (8004790 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	015b      	lsls	r3, r3, #5
 80046b0:	0d1b      	lsrs	r3, r3, #20
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	fb02 f303 	mul.w	r3, r2, r3
 80046b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ba:	e054      	b.n	8004766 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c2:	d050      	beq.n	8004766 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046c4:	f7fd ff12 	bl	80024ec <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d902      	bls.n	80046da <SPI_WaitFlagStateUntilTimeout+0x56>
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d13d      	bne.n	8004756 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046f2:	d111      	bne.n	8004718 <SPI_WaitFlagStateUntilTimeout+0x94>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046fc:	d004      	beq.n	8004708 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004706:	d107      	bne.n	8004718 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004716:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004720:	d10f      	bne.n	8004742 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004740:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e017      	b.n	8004786 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	3b01      	subs	r3, #1
 8004764:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4013      	ands	r3, r2
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	429a      	cmp	r2, r3
 8004774:	bf0c      	ite	eq
 8004776:	2301      	moveq	r3, #1
 8004778:	2300      	movne	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	429a      	cmp	r2, r3
 8004782:	d19b      	bne.n	80046bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3720      	adds	r7, #32
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	20000020 	.word	0x20000020

08004794 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047a0:	4b1b      	ldr	r3, [pc, #108]	; (8004810 <SPI_EndRxTxTransaction+0x7c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1b      	ldr	r2, [pc, #108]	; (8004814 <SPI_EndRxTxTransaction+0x80>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	0d5b      	lsrs	r3, r3, #21
 80047ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047b0:	fb02 f303 	mul.w	r3, r2, r3
 80047b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047be:	d112      	bne.n	80047e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2200      	movs	r2, #0
 80047c8:	2180      	movs	r1, #128	; 0x80
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7ff ff5a 	bl	8004684 <SPI_WaitFlagStateUntilTimeout>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d016      	beq.n	8004804 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047da:	f043 0220 	orr.w	r2, r3, #32
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e00f      	b.n	8004806 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fc:	2b80      	cmp	r3, #128	; 0x80
 80047fe:	d0f2      	beq.n	80047e6 <SPI_EndRxTxTransaction+0x52>
 8004800:	e000      	b.n	8004804 <SPI_EndRxTxTransaction+0x70>
        break;
 8004802:	bf00      	nop
  }

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000020 	.word	0x20000020
 8004814:	165e9f81 	.word	0x165e9f81

08004818 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	d001      	beq.n	8004830 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e044      	b.n	80048ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1e      	ldr	r2, [pc, #120]	; (80048c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d018      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x6c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485a:	d013      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x6c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1a      	ldr	r2, [pc, #104]	; (80048cc <HAL_TIM_Base_Start_IT+0xb4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00e      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x6c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a19      	ldr	r2, [pc, #100]	; (80048d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d009      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x6c>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a17      	ldr	r2, [pc, #92]	; (80048d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d004      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x6c>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a16      	ldr	r2, [pc, #88]	; (80048d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d111      	bne.n	80048a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b06      	cmp	r3, #6
 8004894:	d010      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0201 	orr.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a6:	e007      	b.n	80048b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40010000 	.word	0x40010000
 80048cc:	40000400 	.word	0x40000400
 80048d0:	40000800 	.word	0x40000800
 80048d4:	40000c00 	.word	0x40000c00
 80048d8:	40014000 	.word	0x40014000

080048dc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e041      	b.n	8004972 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fd fcc8 	bl	8002298 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3304      	adds	r3, #4
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f000 f9c4 	bl	8004ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b02      	cmp	r3, #2
 800498e:	d122      	bne.n	80049d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b02      	cmp	r3, #2
 800499c:	d11b      	bne.n	80049d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f06f 0202 	mvn.w	r2, #2
 80049a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	f003 0303 	and.w	r3, r3, #3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f955 	bl	8004c6c <HAL_TIM_IC_CaptureCallback>
 80049c2:	e005      	b.n	80049d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f947 	bl	8004c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f958 	bl	8004c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d122      	bne.n	8004a2a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d11b      	bne.n	8004a2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f06f 0204 	mvn.w	r2, #4
 80049fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f92b 	bl	8004c6c <HAL_TIM_IC_CaptureCallback>
 8004a16:	e005      	b.n	8004a24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f91d 	bl	8004c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f92e 	bl	8004c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d122      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d11b      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f06f 0208 	mvn.w	r2, #8
 8004a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2204      	movs	r2, #4
 8004a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f901 	bl	8004c6c <HAL_TIM_IC_CaptureCallback>
 8004a6a:	e005      	b.n	8004a78 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f8f3 	bl	8004c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f904 	bl	8004c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d122      	bne.n	8004ad2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d11b      	bne.n	8004ad2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f06f 0210 	mvn.w	r2, #16
 8004aa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2208      	movs	r2, #8
 8004aa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f8d7 	bl	8004c6c <HAL_TIM_IC_CaptureCallback>
 8004abe:	e005      	b.n	8004acc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f8c9 	bl	8004c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f8da 	bl	8004c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d10e      	bne.n	8004afe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d107      	bne.n	8004afe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f06f 0201 	mvn.w	r2, #1
 8004af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f8a3 	bl	8004c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b08:	2b80      	cmp	r3, #128	; 0x80
 8004b0a:	d10e      	bne.n	8004b2a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b16:	2b80      	cmp	r3, #128	; 0x80
 8004b18:	d107      	bne.n	8004b2a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 fb95 	bl	8005254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b34:	2b40      	cmp	r3, #64	; 0x40
 8004b36:	d10e      	bne.n	8004b56 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b42:	2b40      	cmp	r3, #64	; 0x40
 8004b44:	d107      	bne.n	8004b56 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f89f 	bl	8004c94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f003 0320 	and.w	r3, r3, #32
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d10e      	bne.n	8004b82 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d107      	bne.n	8004b82 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f06f 0220 	mvn.w	r2, #32
 8004b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fb5f 	bl	8005240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d101      	bne.n	8004baa <HAL_TIM_OC_ConfigChannel+0x1e>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e048      	b.n	8004c3c <HAL_TIM_OC_ConfigChannel+0xb0>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b0c      	cmp	r3, #12
 8004bb6:	d839      	bhi.n	8004c2c <HAL_TIM_OC_ConfigChannel+0xa0>
 8004bb8:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004bf5 	.word	0x08004bf5
 8004bc4:	08004c2d 	.word	0x08004c2d
 8004bc8:	08004c2d 	.word	0x08004c2d
 8004bcc:	08004c2d 	.word	0x08004c2d
 8004bd0:	08004c03 	.word	0x08004c03
 8004bd4:	08004c2d 	.word	0x08004c2d
 8004bd8:	08004c2d 	.word	0x08004c2d
 8004bdc:	08004c2d 	.word	0x08004c2d
 8004be0:	08004c11 	.word	0x08004c11
 8004be4:	08004c2d 	.word	0x08004c2d
 8004be8:	08004c2d 	.word	0x08004c2d
 8004bec:	08004c2d 	.word	0x08004c2d
 8004bf0:	08004c1f 	.word	0x08004c1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68b9      	ldr	r1, [r7, #8]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 f8d4 	bl	8004da8 <TIM_OC1_SetConfig>
      break;
 8004c00:	e017      	b.n	8004c32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68b9      	ldr	r1, [r7, #8]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 f933 	bl	8004e74 <TIM_OC2_SetConfig>
      break;
 8004c0e:	e010      	b.n	8004c32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 f998 	bl	8004f4c <TIM_OC3_SetConfig>
      break;
 8004c1c:	e009      	b.n	8004c32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 f9fb 	bl	8005020 <TIM_OC4_SetConfig>
      break;
 8004c2a:	e002      	b.n	8004c32 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a34      	ldr	r2, [pc, #208]	; (8004d8c <TIM_Base_SetConfig+0xe4>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00f      	beq.n	8004ce0 <TIM_Base_SetConfig+0x38>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc6:	d00b      	beq.n	8004ce0 <TIM_Base_SetConfig+0x38>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a31      	ldr	r2, [pc, #196]	; (8004d90 <TIM_Base_SetConfig+0xe8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d007      	beq.n	8004ce0 <TIM_Base_SetConfig+0x38>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a30      	ldr	r2, [pc, #192]	; (8004d94 <TIM_Base_SetConfig+0xec>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d003      	beq.n	8004ce0 <TIM_Base_SetConfig+0x38>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a2f      	ldr	r2, [pc, #188]	; (8004d98 <TIM_Base_SetConfig+0xf0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d108      	bne.n	8004cf2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a25      	ldr	r2, [pc, #148]	; (8004d8c <TIM_Base_SetConfig+0xe4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d01b      	beq.n	8004d32 <TIM_Base_SetConfig+0x8a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d00:	d017      	beq.n	8004d32 <TIM_Base_SetConfig+0x8a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a22      	ldr	r2, [pc, #136]	; (8004d90 <TIM_Base_SetConfig+0xe8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d013      	beq.n	8004d32 <TIM_Base_SetConfig+0x8a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a21      	ldr	r2, [pc, #132]	; (8004d94 <TIM_Base_SetConfig+0xec>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00f      	beq.n	8004d32 <TIM_Base_SetConfig+0x8a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a20      	ldr	r2, [pc, #128]	; (8004d98 <TIM_Base_SetConfig+0xf0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d00b      	beq.n	8004d32 <TIM_Base_SetConfig+0x8a>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a1f      	ldr	r2, [pc, #124]	; (8004d9c <TIM_Base_SetConfig+0xf4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d007      	beq.n	8004d32 <TIM_Base_SetConfig+0x8a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a1e      	ldr	r2, [pc, #120]	; (8004da0 <TIM_Base_SetConfig+0xf8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d003      	beq.n	8004d32 <TIM_Base_SetConfig+0x8a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a1d      	ldr	r2, [pc, #116]	; (8004da4 <TIM_Base_SetConfig+0xfc>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d108      	bne.n	8004d44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a08      	ldr	r2, [pc, #32]	; (8004d8c <TIM_Base_SetConfig+0xe4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d103      	bne.n	8004d78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	615a      	str	r2, [r3, #20]
}
 8004d7e:	bf00      	nop
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	40010000 	.word	0x40010000
 8004d90:	40000400 	.word	0x40000400
 8004d94:	40000800 	.word	0x40000800
 8004d98:	40000c00 	.word	0x40000c00
 8004d9c:	40014000 	.word	0x40014000
 8004da0:	40014400 	.word	0x40014400
 8004da4:	40014800 	.word	0x40014800

08004da8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	f023 0201 	bic.w	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0303 	bic.w	r3, r3, #3
 8004dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f023 0302 	bic.w	r3, r3, #2
 8004df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a1c      	ldr	r2, [pc, #112]	; (8004e70 <TIM_OC1_SetConfig+0xc8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d10c      	bne.n	8004e1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f023 0308 	bic.w	r3, r3, #8
 8004e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f023 0304 	bic.w	r3, r3, #4
 8004e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a13      	ldr	r2, [pc, #76]	; (8004e70 <TIM_OC1_SetConfig+0xc8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d111      	bne.n	8004e4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	621a      	str	r2, [r3, #32]
}
 8004e64:	bf00      	nop
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	40010000 	.word	0x40010000

08004e74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	f023 0210 	bic.w	r2, r3, #16
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f023 0320 	bic.w	r3, r3, #32
 8004ebe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a1e      	ldr	r2, [pc, #120]	; (8004f48 <TIM_OC2_SetConfig+0xd4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d10d      	bne.n	8004ef0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a15      	ldr	r2, [pc, #84]	; (8004f48 <TIM_OC2_SetConfig+0xd4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d113      	bne.n	8004f20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004efe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	621a      	str	r2, [r3, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40010000 	.word	0x40010000

08004f4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0303 	bic.w	r3, r3, #3
 8004f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a1d      	ldr	r2, [pc, #116]	; (800501c <TIM_OC3_SetConfig+0xd0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d10d      	bne.n	8004fc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	021b      	lsls	r3, r3, #8
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a14      	ldr	r2, [pc, #80]	; (800501c <TIM_OC3_SetConfig+0xd0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d113      	bne.n	8004ff6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	621a      	str	r2, [r3, #32]
}
 8005010:	bf00      	nop
 8005012:	371c      	adds	r7, #28
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	40010000 	.word	0x40010000

08005020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	021b      	lsls	r3, r3, #8
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4313      	orrs	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800506a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	031b      	lsls	r3, r3, #12
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a10      	ldr	r2, [pc, #64]	; (80050bc <TIM_OC4_SetConfig+0x9c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d109      	bne.n	8005094 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	019b      	lsls	r3, r3, #6
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4313      	orrs	r3, r2
 8005092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	621a      	str	r2, [r3, #32]
}
 80050ae:	bf00      	nop
 80050b0:	371c      	adds	r7, #28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	40010000 	.word	0x40010000

080050c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d101      	bne.n	80050d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050d4:	2302      	movs	r3, #2
 80050d6:	e050      	b.n	800517a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1c      	ldr	r2, [pc, #112]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d018      	beq.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005124:	d013      	beq.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a18      	ldr	r2, [pc, #96]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00e      	beq.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a16      	ldr	r2, [pc, #88]	; (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d009      	beq.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a15      	ldr	r2, [pc, #84]	; (8005194 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d004      	beq.n	800514e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a13      	ldr	r2, [pc, #76]	; (8005198 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d10c      	bne.n	8005168 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005154:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	4313      	orrs	r3, r2
 800515e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40010000 	.word	0x40010000
 800518c:	40000400 	.word	0x40000400
 8005190:	40000800 	.word	0x40000800
 8005194:	40000c00 	.word	0x40000c00
 8005198:	40014000 	.word	0x40014000

0800519c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e03d      	b.n	8005234 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	4313      	orrs	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e03f      	b.n	80052fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fd f854 	bl	800233c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2224      	movs	r2, #36	; 0x24
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f829 	bl	8005304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	695a      	ldr	r2, [r3, #20]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005308:	b0c0      	sub	sp, #256	; 0x100
 800530a:	af00      	add	r7, sp, #0
 800530c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005320:	68d9      	ldr	r1, [r3, #12]
 8005322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	ea40 0301 	orr.w	r3, r0, r1
 800532c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800532e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	431a      	orrs	r2, r3
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	431a      	orrs	r2, r3
 8005344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800535c:	f021 010c 	bic.w	r1, r1, #12
 8005360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800536a:	430b      	orrs	r3, r1
 800536c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800536e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800537a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537e:	6999      	ldr	r1, [r3, #24]
 8005380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	ea40 0301 	orr.w	r3, r0, r1
 800538a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800538c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4b8f      	ldr	r3, [pc, #572]	; (80055d0 <UART_SetConfig+0x2cc>)
 8005394:	429a      	cmp	r2, r3
 8005396:	d005      	beq.n	80053a4 <UART_SetConfig+0xa0>
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	4b8d      	ldr	r3, [pc, #564]	; (80055d4 <UART_SetConfig+0x2d0>)
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d104      	bne.n	80053ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053a4:	f7fe ff86 	bl	80042b4 <HAL_RCC_GetPCLK2Freq>
 80053a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053ac:	e003      	b.n	80053b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053ae:	f7fe ff6d 	bl	800428c <HAL_RCC_GetPCLK1Freq>
 80053b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053c0:	f040 810c 	bne.w	80055dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053c8:	2200      	movs	r2, #0
 80053ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80053ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053d6:	4622      	mov	r2, r4
 80053d8:	462b      	mov	r3, r5
 80053da:	1891      	adds	r1, r2, r2
 80053dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80053de:	415b      	adcs	r3, r3
 80053e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053e6:	4621      	mov	r1, r4
 80053e8:	eb12 0801 	adds.w	r8, r2, r1
 80053ec:	4629      	mov	r1, r5
 80053ee:	eb43 0901 	adc.w	r9, r3, r1
 80053f2:	f04f 0200 	mov.w	r2, #0
 80053f6:	f04f 0300 	mov.w	r3, #0
 80053fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005402:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005406:	4690      	mov	r8, r2
 8005408:	4699      	mov	r9, r3
 800540a:	4623      	mov	r3, r4
 800540c:	eb18 0303 	adds.w	r3, r8, r3
 8005410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005414:	462b      	mov	r3, r5
 8005416:	eb49 0303 	adc.w	r3, r9, r3
 800541a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800541e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800542a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800542e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005432:	460b      	mov	r3, r1
 8005434:	18db      	adds	r3, r3, r3
 8005436:	653b      	str	r3, [r7, #80]	; 0x50
 8005438:	4613      	mov	r3, r2
 800543a:	eb42 0303 	adc.w	r3, r2, r3
 800543e:	657b      	str	r3, [r7, #84]	; 0x54
 8005440:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005444:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005448:	f7fb fb94 	bl	8000b74 <__aeabi_uldivmod>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4b61      	ldr	r3, [pc, #388]	; (80055d8 <UART_SetConfig+0x2d4>)
 8005452:	fba3 2302 	umull	r2, r3, r3, r2
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	011c      	lsls	r4, r3, #4
 800545a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800545e:	2200      	movs	r2, #0
 8005460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005464:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005468:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800546c:	4642      	mov	r2, r8
 800546e:	464b      	mov	r3, r9
 8005470:	1891      	adds	r1, r2, r2
 8005472:	64b9      	str	r1, [r7, #72]	; 0x48
 8005474:	415b      	adcs	r3, r3
 8005476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005478:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800547c:	4641      	mov	r1, r8
 800547e:	eb12 0a01 	adds.w	sl, r2, r1
 8005482:	4649      	mov	r1, r9
 8005484:	eb43 0b01 	adc.w	fp, r3, r1
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	f04f 0300 	mov.w	r3, #0
 8005490:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005494:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005498:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800549c:	4692      	mov	sl, r2
 800549e:	469b      	mov	fp, r3
 80054a0:	4643      	mov	r3, r8
 80054a2:	eb1a 0303 	adds.w	r3, sl, r3
 80054a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054aa:	464b      	mov	r3, r9
 80054ac:	eb4b 0303 	adc.w	r3, fp, r3
 80054b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80054c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054c8:	460b      	mov	r3, r1
 80054ca:	18db      	adds	r3, r3, r3
 80054cc:	643b      	str	r3, [r7, #64]	; 0x40
 80054ce:	4613      	mov	r3, r2
 80054d0:	eb42 0303 	adc.w	r3, r2, r3
 80054d4:	647b      	str	r3, [r7, #68]	; 0x44
 80054d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054de:	f7fb fb49 	bl	8000b74 <__aeabi_uldivmod>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4611      	mov	r1, r2
 80054e8:	4b3b      	ldr	r3, [pc, #236]	; (80055d8 <UART_SetConfig+0x2d4>)
 80054ea:	fba3 2301 	umull	r2, r3, r3, r1
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	2264      	movs	r2, #100	; 0x64
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
 80054f6:	1acb      	subs	r3, r1, r3
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80054fe:	4b36      	ldr	r3, [pc, #216]	; (80055d8 <UART_SetConfig+0x2d4>)
 8005500:	fba3 2302 	umull	r2, r3, r3, r2
 8005504:	095b      	lsrs	r3, r3, #5
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800550c:	441c      	add	r4, r3
 800550e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005512:	2200      	movs	r2, #0
 8005514:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005518:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800551c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005520:	4642      	mov	r2, r8
 8005522:	464b      	mov	r3, r9
 8005524:	1891      	adds	r1, r2, r2
 8005526:	63b9      	str	r1, [r7, #56]	; 0x38
 8005528:	415b      	adcs	r3, r3
 800552a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800552c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005530:	4641      	mov	r1, r8
 8005532:	1851      	adds	r1, r2, r1
 8005534:	6339      	str	r1, [r7, #48]	; 0x30
 8005536:	4649      	mov	r1, r9
 8005538:	414b      	adcs	r3, r1
 800553a:	637b      	str	r3, [r7, #52]	; 0x34
 800553c:	f04f 0200 	mov.w	r2, #0
 8005540:	f04f 0300 	mov.w	r3, #0
 8005544:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005548:	4659      	mov	r1, fp
 800554a:	00cb      	lsls	r3, r1, #3
 800554c:	4651      	mov	r1, sl
 800554e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005552:	4651      	mov	r1, sl
 8005554:	00ca      	lsls	r2, r1, #3
 8005556:	4610      	mov	r0, r2
 8005558:	4619      	mov	r1, r3
 800555a:	4603      	mov	r3, r0
 800555c:	4642      	mov	r2, r8
 800555e:	189b      	adds	r3, r3, r2
 8005560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005564:	464b      	mov	r3, r9
 8005566:	460a      	mov	r2, r1
 8005568:	eb42 0303 	adc.w	r3, r2, r3
 800556c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800557c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005580:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005584:	460b      	mov	r3, r1
 8005586:	18db      	adds	r3, r3, r3
 8005588:	62bb      	str	r3, [r7, #40]	; 0x28
 800558a:	4613      	mov	r3, r2
 800558c:	eb42 0303 	adc.w	r3, r2, r3
 8005590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005592:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005596:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800559a:	f7fb faeb 	bl	8000b74 <__aeabi_uldivmod>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <UART_SetConfig+0x2d4>)
 80055a4:	fba3 1302 	umull	r1, r3, r3, r2
 80055a8:	095b      	lsrs	r3, r3, #5
 80055aa:	2164      	movs	r1, #100	; 0x64
 80055ac:	fb01 f303 	mul.w	r3, r1, r3
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	3332      	adds	r3, #50	; 0x32
 80055b6:	4a08      	ldr	r2, [pc, #32]	; (80055d8 <UART_SetConfig+0x2d4>)
 80055b8:	fba2 2303 	umull	r2, r3, r2, r3
 80055bc:	095b      	lsrs	r3, r3, #5
 80055be:	f003 0207 	and.w	r2, r3, #7
 80055c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4422      	add	r2, r4
 80055ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055cc:	e105      	b.n	80057da <UART_SetConfig+0x4d6>
 80055ce:	bf00      	nop
 80055d0:	40011000 	.word	0x40011000
 80055d4:	40011400 	.word	0x40011400
 80055d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055e0:	2200      	movs	r2, #0
 80055e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80055ee:	4642      	mov	r2, r8
 80055f0:	464b      	mov	r3, r9
 80055f2:	1891      	adds	r1, r2, r2
 80055f4:	6239      	str	r1, [r7, #32]
 80055f6:	415b      	adcs	r3, r3
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
 80055fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055fe:	4641      	mov	r1, r8
 8005600:	1854      	adds	r4, r2, r1
 8005602:	4649      	mov	r1, r9
 8005604:	eb43 0501 	adc.w	r5, r3, r1
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	f04f 0300 	mov.w	r3, #0
 8005610:	00eb      	lsls	r3, r5, #3
 8005612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005616:	00e2      	lsls	r2, r4, #3
 8005618:	4614      	mov	r4, r2
 800561a:	461d      	mov	r5, r3
 800561c:	4643      	mov	r3, r8
 800561e:	18e3      	adds	r3, r4, r3
 8005620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005624:	464b      	mov	r3, r9
 8005626:	eb45 0303 	adc.w	r3, r5, r3
 800562a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800562e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800563a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	f04f 0300 	mov.w	r3, #0
 8005646:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800564a:	4629      	mov	r1, r5
 800564c:	008b      	lsls	r3, r1, #2
 800564e:	4621      	mov	r1, r4
 8005650:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005654:	4621      	mov	r1, r4
 8005656:	008a      	lsls	r2, r1, #2
 8005658:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800565c:	f7fb fa8a 	bl	8000b74 <__aeabi_uldivmod>
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4b60      	ldr	r3, [pc, #384]	; (80057e8 <UART_SetConfig+0x4e4>)
 8005666:	fba3 2302 	umull	r2, r3, r3, r2
 800566a:	095b      	lsrs	r3, r3, #5
 800566c:	011c      	lsls	r4, r3, #4
 800566e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005672:	2200      	movs	r2, #0
 8005674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005678:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800567c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005680:	4642      	mov	r2, r8
 8005682:	464b      	mov	r3, r9
 8005684:	1891      	adds	r1, r2, r2
 8005686:	61b9      	str	r1, [r7, #24]
 8005688:	415b      	adcs	r3, r3
 800568a:	61fb      	str	r3, [r7, #28]
 800568c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005690:	4641      	mov	r1, r8
 8005692:	1851      	adds	r1, r2, r1
 8005694:	6139      	str	r1, [r7, #16]
 8005696:	4649      	mov	r1, r9
 8005698:	414b      	adcs	r3, r1
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	f04f 0300 	mov.w	r3, #0
 80056a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056a8:	4659      	mov	r1, fp
 80056aa:	00cb      	lsls	r3, r1, #3
 80056ac:	4651      	mov	r1, sl
 80056ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056b2:	4651      	mov	r1, sl
 80056b4:	00ca      	lsls	r2, r1, #3
 80056b6:	4610      	mov	r0, r2
 80056b8:	4619      	mov	r1, r3
 80056ba:	4603      	mov	r3, r0
 80056bc:	4642      	mov	r2, r8
 80056be:	189b      	adds	r3, r3, r2
 80056c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056c4:	464b      	mov	r3, r9
 80056c6:	460a      	mov	r2, r1
 80056c8:	eb42 0303 	adc.w	r3, r2, r3
 80056cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80056da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80056e8:	4649      	mov	r1, r9
 80056ea:	008b      	lsls	r3, r1, #2
 80056ec:	4641      	mov	r1, r8
 80056ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056f2:	4641      	mov	r1, r8
 80056f4:	008a      	lsls	r2, r1, #2
 80056f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80056fa:	f7fb fa3b 	bl	8000b74 <__aeabi_uldivmod>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4b39      	ldr	r3, [pc, #228]	; (80057e8 <UART_SetConfig+0x4e4>)
 8005704:	fba3 1302 	umull	r1, r3, r3, r2
 8005708:	095b      	lsrs	r3, r3, #5
 800570a:	2164      	movs	r1, #100	; 0x64
 800570c:	fb01 f303 	mul.w	r3, r1, r3
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	3332      	adds	r3, #50	; 0x32
 8005716:	4a34      	ldr	r2, [pc, #208]	; (80057e8 <UART_SetConfig+0x4e4>)
 8005718:	fba2 2303 	umull	r2, r3, r2, r3
 800571c:	095b      	lsrs	r3, r3, #5
 800571e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005722:	441c      	add	r4, r3
 8005724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005728:	2200      	movs	r2, #0
 800572a:	673b      	str	r3, [r7, #112]	; 0x70
 800572c:	677a      	str	r2, [r7, #116]	; 0x74
 800572e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005732:	4642      	mov	r2, r8
 8005734:	464b      	mov	r3, r9
 8005736:	1891      	adds	r1, r2, r2
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	415b      	adcs	r3, r3
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005742:	4641      	mov	r1, r8
 8005744:	1851      	adds	r1, r2, r1
 8005746:	6039      	str	r1, [r7, #0]
 8005748:	4649      	mov	r1, r9
 800574a:	414b      	adcs	r3, r1
 800574c:	607b      	str	r3, [r7, #4]
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800575a:	4659      	mov	r1, fp
 800575c:	00cb      	lsls	r3, r1, #3
 800575e:	4651      	mov	r1, sl
 8005760:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005764:	4651      	mov	r1, sl
 8005766:	00ca      	lsls	r2, r1, #3
 8005768:	4610      	mov	r0, r2
 800576a:	4619      	mov	r1, r3
 800576c:	4603      	mov	r3, r0
 800576e:	4642      	mov	r2, r8
 8005770:	189b      	adds	r3, r3, r2
 8005772:	66bb      	str	r3, [r7, #104]	; 0x68
 8005774:	464b      	mov	r3, r9
 8005776:	460a      	mov	r2, r1
 8005778:	eb42 0303 	adc.w	r3, r2, r3
 800577c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800577e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	663b      	str	r3, [r7, #96]	; 0x60
 8005788:	667a      	str	r2, [r7, #100]	; 0x64
 800578a:	f04f 0200 	mov.w	r2, #0
 800578e:	f04f 0300 	mov.w	r3, #0
 8005792:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005796:	4649      	mov	r1, r9
 8005798:	008b      	lsls	r3, r1, #2
 800579a:	4641      	mov	r1, r8
 800579c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057a0:	4641      	mov	r1, r8
 80057a2:	008a      	lsls	r2, r1, #2
 80057a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057a8:	f7fb f9e4 	bl	8000b74 <__aeabi_uldivmod>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4b0d      	ldr	r3, [pc, #52]	; (80057e8 <UART_SetConfig+0x4e4>)
 80057b2:	fba3 1302 	umull	r1, r3, r3, r2
 80057b6:	095b      	lsrs	r3, r3, #5
 80057b8:	2164      	movs	r1, #100	; 0x64
 80057ba:	fb01 f303 	mul.w	r3, r1, r3
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	3332      	adds	r3, #50	; 0x32
 80057c4:	4a08      	ldr	r2, [pc, #32]	; (80057e8 <UART_SetConfig+0x4e4>)
 80057c6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	f003 020f 	and.w	r2, r3, #15
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4422      	add	r2, r4
 80057d8:	609a      	str	r2, [r3, #8]
}
 80057da:	bf00      	nop
 80057dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057e0:	46bd      	mov	sp, r7
 80057e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057e6:	bf00      	nop
 80057e8:	51eb851f 	.word	0x51eb851f

080057ec <__libc_init_array>:
 80057ec:	b570      	push	{r4, r5, r6, lr}
 80057ee:	4d0d      	ldr	r5, [pc, #52]	; (8005824 <__libc_init_array+0x38>)
 80057f0:	4c0d      	ldr	r4, [pc, #52]	; (8005828 <__libc_init_array+0x3c>)
 80057f2:	1b64      	subs	r4, r4, r5
 80057f4:	10a4      	asrs	r4, r4, #2
 80057f6:	2600      	movs	r6, #0
 80057f8:	42a6      	cmp	r6, r4
 80057fa:	d109      	bne.n	8005810 <__libc_init_array+0x24>
 80057fc:	4d0b      	ldr	r5, [pc, #44]	; (800582c <__libc_init_array+0x40>)
 80057fe:	4c0c      	ldr	r4, [pc, #48]	; (8005830 <__libc_init_array+0x44>)
 8005800:	f001 fa70 	bl	8006ce4 <_init>
 8005804:	1b64      	subs	r4, r4, r5
 8005806:	10a4      	asrs	r4, r4, #2
 8005808:	2600      	movs	r6, #0
 800580a:	42a6      	cmp	r6, r4
 800580c:	d105      	bne.n	800581a <__libc_init_array+0x2e>
 800580e:	bd70      	pop	{r4, r5, r6, pc}
 8005810:	f855 3b04 	ldr.w	r3, [r5], #4
 8005814:	4798      	blx	r3
 8005816:	3601      	adds	r6, #1
 8005818:	e7ee      	b.n	80057f8 <__libc_init_array+0xc>
 800581a:	f855 3b04 	ldr.w	r3, [r5], #4
 800581e:	4798      	blx	r3
 8005820:	3601      	adds	r6, #1
 8005822:	e7f2      	b.n	800580a <__libc_init_array+0x1e>
 8005824:	08006f38 	.word	0x08006f38
 8005828:	08006f38 	.word	0x08006f38
 800582c:	08006f38 	.word	0x08006f38
 8005830:	08006f3c 	.word	0x08006f3c

08005834 <memcpy>:
 8005834:	440a      	add	r2, r1
 8005836:	4291      	cmp	r1, r2
 8005838:	f100 33ff 	add.w	r3, r0, #4294967295
 800583c:	d100      	bne.n	8005840 <memcpy+0xc>
 800583e:	4770      	bx	lr
 8005840:	b510      	push	{r4, lr}
 8005842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800584a:	4291      	cmp	r1, r2
 800584c:	d1f9      	bne.n	8005842 <memcpy+0xe>
 800584e:	bd10      	pop	{r4, pc}

08005850 <memset>:
 8005850:	4402      	add	r2, r0
 8005852:	4603      	mov	r3, r0
 8005854:	4293      	cmp	r3, r2
 8005856:	d100      	bne.n	800585a <memset+0xa>
 8005858:	4770      	bx	lr
 800585a:	f803 1b01 	strb.w	r1, [r3], #1
 800585e:	e7f9      	b.n	8005854 <memset+0x4>

08005860 <atan>:
 8005860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005864:	ec55 4b10 	vmov	r4, r5, d0
 8005868:	4bc3      	ldr	r3, [pc, #780]	; (8005b78 <atan+0x318>)
 800586a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800586e:	429e      	cmp	r6, r3
 8005870:	46ab      	mov	fp, r5
 8005872:	dd18      	ble.n	80058a6 <atan+0x46>
 8005874:	4bc1      	ldr	r3, [pc, #772]	; (8005b7c <atan+0x31c>)
 8005876:	429e      	cmp	r6, r3
 8005878:	dc01      	bgt.n	800587e <atan+0x1e>
 800587a:	d109      	bne.n	8005890 <atan+0x30>
 800587c:	b144      	cbz	r4, 8005890 <atan+0x30>
 800587e:	4622      	mov	r2, r4
 8005880:	462b      	mov	r3, r5
 8005882:	4620      	mov	r0, r4
 8005884:	4629      	mov	r1, r5
 8005886:	f7fa fcad 	bl	80001e4 <__adddf3>
 800588a:	4604      	mov	r4, r0
 800588c:	460d      	mov	r5, r1
 800588e:	e006      	b.n	800589e <atan+0x3e>
 8005890:	f1bb 0f00 	cmp.w	fp, #0
 8005894:	f300 8131 	bgt.w	8005afa <atan+0x29a>
 8005898:	a59b      	add	r5, pc, #620	; (adr r5, 8005b08 <atan+0x2a8>)
 800589a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800589e:	ec45 4b10 	vmov	d0, r4, r5
 80058a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a6:	4bb6      	ldr	r3, [pc, #728]	; (8005b80 <atan+0x320>)
 80058a8:	429e      	cmp	r6, r3
 80058aa:	dc14      	bgt.n	80058d6 <atan+0x76>
 80058ac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80058b0:	429e      	cmp	r6, r3
 80058b2:	dc0d      	bgt.n	80058d0 <atan+0x70>
 80058b4:	a396      	add	r3, pc, #600	; (adr r3, 8005b10 <atan+0x2b0>)
 80058b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ba:	ee10 0a10 	vmov	r0, s0
 80058be:	4629      	mov	r1, r5
 80058c0:	f7fa fc90 	bl	80001e4 <__adddf3>
 80058c4:	4baf      	ldr	r3, [pc, #700]	; (8005b84 <atan+0x324>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	f7fb f8d2 	bl	8000a70 <__aeabi_dcmpgt>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d1e6      	bne.n	800589e <atan+0x3e>
 80058d0:	f04f 3aff 	mov.w	sl, #4294967295
 80058d4:	e02b      	b.n	800592e <atan+0xce>
 80058d6:	f000 f9b7 	bl	8005c48 <fabs>
 80058da:	4bab      	ldr	r3, [pc, #684]	; (8005b88 <atan+0x328>)
 80058dc:	429e      	cmp	r6, r3
 80058de:	ec55 4b10 	vmov	r4, r5, d0
 80058e2:	f300 80bf 	bgt.w	8005a64 <atan+0x204>
 80058e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80058ea:	429e      	cmp	r6, r3
 80058ec:	f300 80a0 	bgt.w	8005a30 <atan+0x1d0>
 80058f0:	ee10 2a10 	vmov	r2, s0
 80058f4:	ee10 0a10 	vmov	r0, s0
 80058f8:	462b      	mov	r3, r5
 80058fa:	4629      	mov	r1, r5
 80058fc:	f7fa fc72 	bl	80001e4 <__adddf3>
 8005900:	4ba0      	ldr	r3, [pc, #640]	; (8005b84 <atan+0x324>)
 8005902:	2200      	movs	r2, #0
 8005904:	f7fa fc6c 	bl	80001e0 <__aeabi_dsub>
 8005908:	2200      	movs	r2, #0
 800590a:	4606      	mov	r6, r0
 800590c:	460f      	mov	r7, r1
 800590e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005912:	4620      	mov	r0, r4
 8005914:	4629      	mov	r1, r5
 8005916:	f7fa fc65 	bl	80001e4 <__adddf3>
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	4630      	mov	r0, r6
 8005920:	4639      	mov	r1, r7
 8005922:	f7fa ff3f 	bl	80007a4 <__aeabi_ddiv>
 8005926:	f04f 0a00 	mov.w	sl, #0
 800592a:	4604      	mov	r4, r0
 800592c:	460d      	mov	r5, r1
 800592e:	4622      	mov	r2, r4
 8005930:	462b      	mov	r3, r5
 8005932:	4620      	mov	r0, r4
 8005934:	4629      	mov	r1, r5
 8005936:	f7fa fe0b 	bl	8000550 <__aeabi_dmul>
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	4680      	mov	r8, r0
 8005940:	4689      	mov	r9, r1
 8005942:	f7fa fe05 	bl	8000550 <__aeabi_dmul>
 8005946:	a374      	add	r3, pc, #464	; (adr r3, 8005b18 <atan+0x2b8>)
 8005948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594c:	4606      	mov	r6, r0
 800594e:	460f      	mov	r7, r1
 8005950:	f7fa fdfe 	bl	8000550 <__aeabi_dmul>
 8005954:	a372      	add	r3, pc, #456	; (adr r3, 8005b20 <atan+0x2c0>)
 8005956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595a:	f7fa fc43 	bl	80001e4 <__adddf3>
 800595e:	4632      	mov	r2, r6
 8005960:	463b      	mov	r3, r7
 8005962:	f7fa fdf5 	bl	8000550 <__aeabi_dmul>
 8005966:	a370      	add	r3, pc, #448	; (adr r3, 8005b28 <atan+0x2c8>)
 8005968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596c:	f7fa fc3a 	bl	80001e4 <__adddf3>
 8005970:	4632      	mov	r2, r6
 8005972:	463b      	mov	r3, r7
 8005974:	f7fa fdec 	bl	8000550 <__aeabi_dmul>
 8005978:	a36d      	add	r3, pc, #436	; (adr r3, 8005b30 <atan+0x2d0>)
 800597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597e:	f7fa fc31 	bl	80001e4 <__adddf3>
 8005982:	4632      	mov	r2, r6
 8005984:	463b      	mov	r3, r7
 8005986:	f7fa fde3 	bl	8000550 <__aeabi_dmul>
 800598a:	a36b      	add	r3, pc, #428	; (adr r3, 8005b38 <atan+0x2d8>)
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f7fa fc28 	bl	80001e4 <__adddf3>
 8005994:	4632      	mov	r2, r6
 8005996:	463b      	mov	r3, r7
 8005998:	f7fa fdda 	bl	8000550 <__aeabi_dmul>
 800599c:	a368      	add	r3, pc, #416	; (adr r3, 8005b40 <atan+0x2e0>)
 800599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a2:	f7fa fc1f 	bl	80001e4 <__adddf3>
 80059a6:	4642      	mov	r2, r8
 80059a8:	464b      	mov	r3, r9
 80059aa:	f7fa fdd1 	bl	8000550 <__aeabi_dmul>
 80059ae:	a366      	add	r3, pc, #408	; (adr r3, 8005b48 <atan+0x2e8>)
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	4680      	mov	r8, r0
 80059b6:	4689      	mov	r9, r1
 80059b8:	4630      	mov	r0, r6
 80059ba:	4639      	mov	r1, r7
 80059bc:	f7fa fdc8 	bl	8000550 <__aeabi_dmul>
 80059c0:	a363      	add	r3, pc, #396	; (adr r3, 8005b50 <atan+0x2f0>)
 80059c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c6:	f7fa fc0b 	bl	80001e0 <__aeabi_dsub>
 80059ca:	4632      	mov	r2, r6
 80059cc:	463b      	mov	r3, r7
 80059ce:	f7fa fdbf 	bl	8000550 <__aeabi_dmul>
 80059d2:	a361      	add	r3, pc, #388	; (adr r3, 8005b58 <atan+0x2f8>)
 80059d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d8:	f7fa fc02 	bl	80001e0 <__aeabi_dsub>
 80059dc:	4632      	mov	r2, r6
 80059de:	463b      	mov	r3, r7
 80059e0:	f7fa fdb6 	bl	8000550 <__aeabi_dmul>
 80059e4:	a35e      	add	r3, pc, #376	; (adr r3, 8005b60 <atan+0x300>)
 80059e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ea:	f7fa fbf9 	bl	80001e0 <__aeabi_dsub>
 80059ee:	4632      	mov	r2, r6
 80059f0:	463b      	mov	r3, r7
 80059f2:	f7fa fdad 	bl	8000550 <__aeabi_dmul>
 80059f6:	a35c      	add	r3, pc, #368	; (adr r3, 8005b68 <atan+0x308>)
 80059f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fc:	f7fa fbf0 	bl	80001e0 <__aeabi_dsub>
 8005a00:	4632      	mov	r2, r6
 8005a02:	463b      	mov	r3, r7
 8005a04:	f7fa fda4 	bl	8000550 <__aeabi_dmul>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4640      	mov	r0, r8
 8005a0e:	4649      	mov	r1, r9
 8005a10:	f7fa fbe8 	bl	80001e4 <__adddf3>
 8005a14:	4622      	mov	r2, r4
 8005a16:	462b      	mov	r3, r5
 8005a18:	f7fa fd9a 	bl	8000550 <__aeabi_dmul>
 8005a1c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	d14b      	bne.n	8005abe <atan+0x25e>
 8005a26:	4620      	mov	r0, r4
 8005a28:	4629      	mov	r1, r5
 8005a2a:	f7fa fbd9 	bl	80001e0 <__aeabi_dsub>
 8005a2e:	e72c      	b.n	800588a <atan+0x2a>
 8005a30:	ee10 0a10 	vmov	r0, s0
 8005a34:	4b53      	ldr	r3, [pc, #332]	; (8005b84 <atan+0x324>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	4629      	mov	r1, r5
 8005a3a:	f7fa fbd1 	bl	80001e0 <__aeabi_dsub>
 8005a3e:	4b51      	ldr	r3, [pc, #324]	; (8005b84 <atan+0x324>)
 8005a40:	4606      	mov	r6, r0
 8005a42:	460f      	mov	r7, r1
 8005a44:	2200      	movs	r2, #0
 8005a46:	4620      	mov	r0, r4
 8005a48:	4629      	mov	r1, r5
 8005a4a:	f7fa fbcb 	bl	80001e4 <__adddf3>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	4630      	mov	r0, r6
 8005a54:	4639      	mov	r1, r7
 8005a56:	f7fa fea5 	bl	80007a4 <__aeabi_ddiv>
 8005a5a:	f04f 0a01 	mov.w	sl, #1
 8005a5e:	4604      	mov	r4, r0
 8005a60:	460d      	mov	r5, r1
 8005a62:	e764      	b.n	800592e <atan+0xce>
 8005a64:	4b49      	ldr	r3, [pc, #292]	; (8005b8c <atan+0x32c>)
 8005a66:	429e      	cmp	r6, r3
 8005a68:	da1d      	bge.n	8005aa6 <atan+0x246>
 8005a6a:	ee10 0a10 	vmov	r0, s0
 8005a6e:	4b48      	ldr	r3, [pc, #288]	; (8005b90 <atan+0x330>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	4629      	mov	r1, r5
 8005a74:	f7fa fbb4 	bl	80001e0 <__aeabi_dsub>
 8005a78:	4b45      	ldr	r3, [pc, #276]	; (8005b90 <atan+0x330>)
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	460f      	mov	r7, r1
 8005a7e:	2200      	movs	r2, #0
 8005a80:	4620      	mov	r0, r4
 8005a82:	4629      	mov	r1, r5
 8005a84:	f7fa fd64 	bl	8000550 <__aeabi_dmul>
 8005a88:	4b3e      	ldr	r3, [pc, #248]	; (8005b84 <atan+0x324>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f7fa fbaa 	bl	80001e4 <__adddf3>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	4630      	mov	r0, r6
 8005a96:	4639      	mov	r1, r7
 8005a98:	f7fa fe84 	bl	80007a4 <__aeabi_ddiv>
 8005a9c:	f04f 0a02 	mov.w	sl, #2
 8005aa0:	4604      	mov	r4, r0
 8005aa2:	460d      	mov	r5, r1
 8005aa4:	e743      	b.n	800592e <atan+0xce>
 8005aa6:	462b      	mov	r3, r5
 8005aa8:	ee10 2a10 	vmov	r2, s0
 8005aac:	4939      	ldr	r1, [pc, #228]	; (8005b94 <atan+0x334>)
 8005aae:	2000      	movs	r0, #0
 8005ab0:	f7fa fe78 	bl	80007a4 <__aeabi_ddiv>
 8005ab4:	f04f 0a03 	mov.w	sl, #3
 8005ab8:	4604      	mov	r4, r0
 8005aba:	460d      	mov	r5, r1
 8005abc:	e737      	b.n	800592e <atan+0xce>
 8005abe:	4b36      	ldr	r3, [pc, #216]	; (8005b98 <atan+0x338>)
 8005ac0:	4e36      	ldr	r6, [pc, #216]	; (8005b9c <atan+0x33c>)
 8005ac2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005ac6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8005aca:	e9da 2300 	ldrd	r2, r3, [sl]
 8005ace:	f7fa fb87 	bl	80001e0 <__aeabi_dsub>
 8005ad2:	4622      	mov	r2, r4
 8005ad4:	462b      	mov	r3, r5
 8005ad6:	f7fa fb83 	bl	80001e0 <__aeabi_dsub>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005ae2:	f7fa fb7d 	bl	80001e0 <__aeabi_dsub>
 8005ae6:	f1bb 0f00 	cmp.w	fp, #0
 8005aea:	4604      	mov	r4, r0
 8005aec:	460d      	mov	r5, r1
 8005aee:	f6bf aed6 	bge.w	800589e <atan+0x3e>
 8005af2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005af6:	461d      	mov	r5, r3
 8005af8:	e6d1      	b.n	800589e <atan+0x3e>
 8005afa:	a51d      	add	r5, pc, #116	; (adr r5, 8005b70 <atan+0x310>)
 8005afc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005b00:	e6cd      	b.n	800589e <atan+0x3e>
 8005b02:	bf00      	nop
 8005b04:	f3af 8000 	nop.w
 8005b08:	54442d18 	.word	0x54442d18
 8005b0c:	bff921fb 	.word	0xbff921fb
 8005b10:	8800759c 	.word	0x8800759c
 8005b14:	7e37e43c 	.word	0x7e37e43c
 8005b18:	e322da11 	.word	0xe322da11
 8005b1c:	3f90ad3a 	.word	0x3f90ad3a
 8005b20:	24760deb 	.word	0x24760deb
 8005b24:	3fa97b4b 	.word	0x3fa97b4b
 8005b28:	a0d03d51 	.word	0xa0d03d51
 8005b2c:	3fb10d66 	.word	0x3fb10d66
 8005b30:	c54c206e 	.word	0xc54c206e
 8005b34:	3fb745cd 	.word	0x3fb745cd
 8005b38:	920083ff 	.word	0x920083ff
 8005b3c:	3fc24924 	.word	0x3fc24924
 8005b40:	5555550d 	.word	0x5555550d
 8005b44:	3fd55555 	.word	0x3fd55555
 8005b48:	2c6a6c2f 	.word	0x2c6a6c2f
 8005b4c:	bfa2b444 	.word	0xbfa2b444
 8005b50:	52defd9a 	.word	0x52defd9a
 8005b54:	3fadde2d 	.word	0x3fadde2d
 8005b58:	af749a6d 	.word	0xaf749a6d
 8005b5c:	3fb3b0f2 	.word	0x3fb3b0f2
 8005b60:	fe231671 	.word	0xfe231671
 8005b64:	3fbc71c6 	.word	0x3fbc71c6
 8005b68:	9998ebc4 	.word	0x9998ebc4
 8005b6c:	3fc99999 	.word	0x3fc99999
 8005b70:	54442d18 	.word	0x54442d18
 8005b74:	3ff921fb 	.word	0x3ff921fb
 8005b78:	440fffff 	.word	0x440fffff
 8005b7c:	7ff00000 	.word	0x7ff00000
 8005b80:	3fdbffff 	.word	0x3fdbffff
 8005b84:	3ff00000 	.word	0x3ff00000
 8005b88:	3ff2ffff 	.word	0x3ff2ffff
 8005b8c:	40038000 	.word	0x40038000
 8005b90:	3ff80000 	.word	0x3ff80000
 8005b94:	bff00000 	.word	0xbff00000
 8005b98:	08006d38 	.word	0x08006d38
 8005b9c:	08006d18 	.word	0x08006d18

08005ba0 <cos>:
 8005ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ba2:	ec53 2b10 	vmov	r2, r3, d0
 8005ba6:	4826      	ldr	r0, [pc, #152]	; (8005c40 <cos+0xa0>)
 8005ba8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005bac:	4281      	cmp	r1, r0
 8005bae:	dc06      	bgt.n	8005bbe <cos+0x1e>
 8005bb0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005c38 <cos+0x98>
 8005bb4:	b005      	add	sp, #20
 8005bb6:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bba:	f000 bab5 	b.w	8006128 <__kernel_cos>
 8005bbe:	4821      	ldr	r0, [pc, #132]	; (8005c44 <cos+0xa4>)
 8005bc0:	4281      	cmp	r1, r0
 8005bc2:	dd09      	ble.n	8005bd8 <cos+0x38>
 8005bc4:	ee10 0a10 	vmov	r0, s0
 8005bc8:	4619      	mov	r1, r3
 8005bca:	f7fa fb09 	bl	80001e0 <__aeabi_dsub>
 8005bce:	ec41 0b10 	vmov	d0, r0, r1
 8005bd2:	b005      	add	sp, #20
 8005bd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005bd8:	4668      	mov	r0, sp
 8005bda:	f000 f899 	bl	8005d10 <__ieee754_rem_pio2>
 8005bde:	f000 0003 	and.w	r0, r0, #3
 8005be2:	2801      	cmp	r0, #1
 8005be4:	d00b      	beq.n	8005bfe <cos+0x5e>
 8005be6:	2802      	cmp	r0, #2
 8005be8:	d016      	beq.n	8005c18 <cos+0x78>
 8005bea:	b9e0      	cbnz	r0, 8005c26 <cos+0x86>
 8005bec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005bf0:	ed9d 0b00 	vldr	d0, [sp]
 8005bf4:	f000 fa98 	bl	8006128 <__kernel_cos>
 8005bf8:	ec51 0b10 	vmov	r0, r1, d0
 8005bfc:	e7e7      	b.n	8005bce <cos+0x2e>
 8005bfe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005c02:	ed9d 0b00 	vldr	d0, [sp]
 8005c06:	f000 fea7 	bl	8006958 <__kernel_sin>
 8005c0a:	ec53 2b10 	vmov	r2, r3, d0
 8005c0e:	ee10 0a10 	vmov	r0, s0
 8005c12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005c16:	e7da      	b.n	8005bce <cos+0x2e>
 8005c18:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005c1c:	ed9d 0b00 	vldr	d0, [sp]
 8005c20:	f000 fa82 	bl	8006128 <__kernel_cos>
 8005c24:	e7f1      	b.n	8005c0a <cos+0x6a>
 8005c26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005c2a:	ed9d 0b00 	vldr	d0, [sp]
 8005c2e:	2001      	movs	r0, #1
 8005c30:	f000 fe92 	bl	8006958 <__kernel_sin>
 8005c34:	e7e0      	b.n	8005bf8 <cos+0x58>
 8005c36:	bf00      	nop
	...
 8005c40:	3fe921fb 	.word	0x3fe921fb
 8005c44:	7fefffff 	.word	0x7fefffff

08005c48 <fabs>:
 8005c48:	ec51 0b10 	vmov	r0, r1, d0
 8005c4c:	ee10 2a10 	vmov	r2, s0
 8005c50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005c54:	ec43 2b10 	vmov	d0, r2, r3
 8005c58:	4770      	bx	lr
 8005c5a:	0000      	movs	r0, r0
 8005c5c:	0000      	movs	r0, r0
	...

08005c60 <sin>:
 8005c60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c62:	ec53 2b10 	vmov	r2, r3, d0
 8005c66:	4828      	ldr	r0, [pc, #160]	; (8005d08 <sin+0xa8>)
 8005c68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005c6c:	4281      	cmp	r1, r0
 8005c6e:	dc07      	bgt.n	8005c80 <sin+0x20>
 8005c70:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005d00 <sin+0xa0>
 8005c74:	2000      	movs	r0, #0
 8005c76:	b005      	add	sp, #20
 8005c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c7c:	f000 be6c 	b.w	8006958 <__kernel_sin>
 8005c80:	4822      	ldr	r0, [pc, #136]	; (8005d0c <sin+0xac>)
 8005c82:	4281      	cmp	r1, r0
 8005c84:	dd09      	ble.n	8005c9a <sin+0x3a>
 8005c86:	ee10 0a10 	vmov	r0, s0
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	f7fa faa8 	bl	80001e0 <__aeabi_dsub>
 8005c90:	ec41 0b10 	vmov	d0, r0, r1
 8005c94:	b005      	add	sp, #20
 8005c96:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c9a:	4668      	mov	r0, sp
 8005c9c:	f000 f838 	bl	8005d10 <__ieee754_rem_pio2>
 8005ca0:	f000 0003 	and.w	r0, r0, #3
 8005ca4:	2801      	cmp	r0, #1
 8005ca6:	d00c      	beq.n	8005cc2 <sin+0x62>
 8005ca8:	2802      	cmp	r0, #2
 8005caa:	d011      	beq.n	8005cd0 <sin+0x70>
 8005cac:	b9f0      	cbnz	r0, 8005cec <sin+0x8c>
 8005cae:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005cb2:	ed9d 0b00 	vldr	d0, [sp]
 8005cb6:	2001      	movs	r0, #1
 8005cb8:	f000 fe4e 	bl	8006958 <__kernel_sin>
 8005cbc:	ec51 0b10 	vmov	r0, r1, d0
 8005cc0:	e7e6      	b.n	8005c90 <sin+0x30>
 8005cc2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005cc6:	ed9d 0b00 	vldr	d0, [sp]
 8005cca:	f000 fa2d 	bl	8006128 <__kernel_cos>
 8005cce:	e7f5      	b.n	8005cbc <sin+0x5c>
 8005cd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005cd4:	ed9d 0b00 	vldr	d0, [sp]
 8005cd8:	2001      	movs	r0, #1
 8005cda:	f000 fe3d 	bl	8006958 <__kernel_sin>
 8005cde:	ec53 2b10 	vmov	r2, r3, d0
 8005ce2:	ee10 0a10 	vmov	r0, s0
 8005ce6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005cea:	e7d1      	b.n	8005c90 <sin+0x30>
 8005cec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005cf0:	ed9d 0b00 	vldr	d0, [sp]
 8005cf4:	f000 fa18 	bl	8006128 <__kernel_cos>
 8005cf8:	e7f1      	b.n	8005cde <sin+0x7e>
 8005cfa:	bf00      	nop
 8005cfc:	f3af 8000 	nop.w
	...
 8005d08:	3fe921fb 	.word	0x3fe921fb
 8005d0c:	7fefffff 	.word	0x7fefffff

08005d10 <__ieee754_rem_pio2>:
 8005d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d14:	ed2d 8b02 	vpush	{d8}
 8005d18:	ec55 4b10 	vmov	r4, r5, d0
 8005d1c:	4bca      	ldr	r3, [pc, #808]	; (8006048 <__ieee754_rem_pio2+0x338>)
 8005d1e:	b08b      	sub	sp, #44	; 0x2c
 8005d20:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005d24:	4598      	cmp	r8, r3
 8005d26:	4682      	mov	sl, r0
 8005d28:	9502      	str	r5, [sp, #8]
 8005d2a:	dc08      	bgt.n	8005d3e <__ieee754_rem_pio2+0x2e>
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	2300      	movs	r3, #0
 8005d30:	ed80 0b00 	vstr	d0, [r0]
 8005d34:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005d38:	f04f 0b00 	mov.w	fp, #0
 8005d3c:	e028      	b.n	8005d90 <__ieee754_rem_pio2+0x80>
 8005d3e:	4bc3      	ldr	r3, [pc, #780]	; (800604c <__ieee754_rem_pio2+0x33c>)
 8005d40:	4598      	cmp	r8, r3
 8005d42:	dc78      	bgt.n	8005e36 <__ieee754_rem_pio2+0x126>
 8005d44:	9b02      	ldr	r3, [sp, #8]
 8005d46:	4ec2      	ldr	r6, [pc, #776]	; (8006050 <__ieee754_rem_pio2+0x340>)
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	ee10 0a10 	vmov	r0, s0
 8005d4e:	a3b0      	add	r3, pc, #704	; (adr r3, 8006010 <__ieee754_rem_pio2+0x300>)
 8005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d54:	4629      	mov	r1, r5
 8005d56:	dd39      	ble.n	8005dcc <__ieee754_rem_pio2+0xbc>
 8005d58:	f7fa fa42 	bl	80001e0 <__aeabi_dsub>
 8005d5c:	45b0      	cmp	r8, r6
 8005d5e:	4604      	mov	r4, r0
 8005d60:	460d      	mov	r5, r1
 8005d62:	d01b      	beq.n	8005d9c <__ieee754_rem_pio2+0x8c>
 8005d64:	a3ac      	add	r3, pc, #688	; (adr r3, 8006018 <__ieee754_rem_pio2+0x308>)
 8005d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6a:	f7fa fa39 	bl	80001e0 <__aeabi_dsub>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	e9ca 2300 	strd	r2, r3, [sl]
 8005d76:	4620      	mov	r0, r4
 8005d78:	4629      	mov	r1, r5
 8005d7a:	f7fa fa31 	bl	80001e0 <__aeabi_dsub>
 8005d7e:	a3a6      	add	r3, pc, #664	; (adr r3, 8006018 <__ieee754_rem_pio2+0x308>)
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	f7fa fa2c 	bl	80001e0 <__aeabi_dsub>
 8005d88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005d8c:	f04f 0b01 	mov.w	fp, #1
 8005d90:	4658      	mov	r0, fp
 8005d92:	b00b      	add	sp, #44	; 0x2c
 8005d94:	ecbd 8b02 	vpop	{d8}
 8005d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d9c:	a3a0      	add	r3, pc, #640	; (adr r3, 8006020 <__ieee754_rem_pio2+0x310>)
 8005d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da2:	f7fa fa1d 	bl	80001e0 <__aeabi_dsub>
 8005da6:	a3a0      	add	r3, pc, #640	; (adr r3, 8006028 <__ieee754_rem_pio2+0x318>)
 8005da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dac:	4604      	mov	r4, r0
 8005dae:	460d      	mov	r5, r1
 8005db0:	f7fa fa16 	bl	80001e0 <__aeabi_dsub>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	e9ca 2300 	strd	r2, r3, [sl]
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	4629      	mov	r1, r5
 8005dc0:	f7fa fa0e 	bl	80001e0 <__aeabi_dsub>
 8005dc4:	a398      	add	r3, pc, #608	; (adr r3, 8006028 <__ieee754_rem_pio2+0x318>)
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	e7db      	b.n	8005d84 <__ieee754_rem_pio2+0x74>
 8005dcc:	f7fa fa0a 	bl	80001e4 <__adddf3>
 8005dd0:	45b0      	cmp	r8, r6
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	460d      	mov	r5, r1
 8005dd6:	d016      	beq.n	8005e06 <__ieee754_rem_pio2+0xf6>
 8005dd8:	a38f      	add	r3, pc, #572	; (adr r3, 8006018 <__ieee754_rem_pio2+0x308>)
 8005dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dde:	f7fa fa01 	bl	80001e4 <__adddf3>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	e9ca 2300 	strd	r2, r3, [sl]
 8005dea:	4620      	mov	r0, r4
 8005dec:	4629      	mov	r1, r5
 8005dee:	f7fa f9f7 	bl	80001e0 <__aeabi_dsub>
 8005df2:	a389      	add	r3, pc, #548	; (adr r3, 8006018 <__ieee754_rem_pio2+0x308>)
 8005df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df8:	f7fa f9f4 	bl	80001e4 <__adddf3>
 8005dfc:	f04f 3bff 	mov.w	fp, #4294967295
 8005e00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005e04:	e7c4      	b.n	8005d90 <__ieee754_rem_pio2+0x80>
 8005e06:	a386      	add	r3, pc, #536	; (adr r3, 8006020 <__ieee754_rem_pio2+0x310>)
 8005e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0c:	f7fa f9ea 	bl	80001e4 <__adddf3>
 8005e10:	a385      	add	r3, pc, #532	; (adr r3, 8006028 <__ieee754_rem_pio2+0x318>)
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	4604      	mov	r4, r0
 8005e18:	460d      	mov	r5, r1
 8005e1a:	f7fa f9e3 	bl	80001e4 <__adddf3>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	e9ca 2300 	strd	r2, r3, [sl]
 8005e26:	4620      	mov	r0, r4
 8005e28:	4629      	mov	r1, r5
 8005e2a:	f7fa f9d9 	bl	80001e0 <__aeabi_dsub>
 8005e2e:	a37e      	add	r3, pc, #504	; (adr r3, 8006028 <__ieee754_rem_pio2+0x318>)
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	e7e0      	b.n	8005df8 <__ieee754_rem_pio2+0xe8>
 8005e36:	4b87      	ldr	r3, [pc, #540]	; (8006054 <__ieee754_rem_pio2+0x344>)
 8005e38:	4598      	cmp	r8, r3
 8005e3a:	f300 80d9 	bgt.w	8005ff0 <__ieee754_rem_pio2+0x2e0>
 8005e3e:	f7ff ff03 	bl	8005c48 <fabs>
 8005e42:	ec55 4b10 	vmov	r4, r5, d0
 8005e46:	ee10 0a10 	vmov	r0, s0
 8005e4a:	a379      	add	r3, pc, #484	; (adr r3, 8006030 <__ieee754_rem_pio2+0x320>)
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	4629      	mov	r1, r5
 8005e52:	f7fa fb7d 	bl	8000550 <__aeabi_dmul>
 8005e56:	4b80      	ldr	r3, [pc, #512]	; (8006058 <__ieee754_rem_pio2+0x348>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f7fa f9c3 	bl	80001e4 <__adddf3>
 8005e5e:	f7fa fe11 	bl	8000a84 <__aeabi_d2iz>
 8005e62:	4683      	mov	fp, r0
 8005e64:	f7fa fb0a 	bl	800047c <__aeabi_i2d>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	ec43 2b18 	vmov	d8, r2, r3
 8005e70:	a367      	add	r3, pc, #412	; (adr r3, 8006010 <__ieee754_rem_pio2+0x300>)
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	f7fa fb6b 	bl	8000550 <__aeabi_dmul>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4620      	mov	r0, r4
 8005e80:	4629      	mov	r1, r5
 8005e82:	f7fa f9ad 	bl	80001e0 <__aeabi_dsub>
 8005e86:	a364      	add	r3, pc, #400	; (adr r3, 8006018 <__ieee754_rem_pio2+0x308>)
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	4606      	mov	r6, r0
 8005e8e:	460f      	mov	r7, r1
 8005e90:	ec51 0b18 	vmov	r0, r1, d8
 8005e94:	f7fa fb5c 	bl	8000550 <__aeabi_dmul>
 8005e98:	f1bb 0f1f 	cmp.w	fp, #31
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	460d      	mov	r5, r1
 8005ea0:	dc0d      	bgt.n	8005ebe <__ieee754_rem_pio2+0x1ae>
 8005ea2:	4b6e      	ldr	r3, [pc, #440]	; (800605c <__ieee754_rem_pio2+0x34c>)
 8005ea4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eac:	4543      	cmp	r3, r8
 8005eae:	d006      	beq.n	8005ebe <__ieee754_rem_pio2+0x1ae>
 8005eb0:	4622      	mov	r2, r4
 8005eb2:	462b      	mov	r3, r5
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	4639      	mov	r1, r7
 8005eb8:	f7fa f992 	bl	80001e0 <__aeabi_dsub>
 8005ebc:	e00f      	b.n	8005ede <__ieee754_rem_pio2+0x1ce>
 8005ebe:	462b      	mov	r3, r5
 8005ec0:	4622      	mov	r2, r4
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	4639      	mov	r1, r7
 8005ec6:	f7fa f98b 	bl	80001e0 <__aeabi_dsub>
 8005eca:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005ece:	9303      	str	r3, [sp, #12]
 8005ed0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005ed4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005ed8:	f1b8 0f10 	cmp.w	r8, #16
 8005edc:	dc02      	bgt.n	8005ee4 <__ieee754_rem_pio2+0x1d4>
 8005ede:	e9ca 0100 	strd	r0, r1, [sl]
 8005ee2:	e039      	b.n	8005f58 <__ieee754_rem_pio2+0x248>
 8005ee4:	a34e      	add	r3, pc, #312	; (adr r3, 8006020 <__ieee754_rem_pio2+0x310>)
 8005ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eea:	ec51 0b18 	vmov	r0, r1, d8
 8005eee:	f7fa fb2f 	bl	8000550 <__aeabi_dmul>
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	460d      	mov	r5, r1
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4630      	mov	r0, r6
 8005efc:	4639      	mov	r1, r7
 8005efe:	f7fa f96f 	bl	80001e0 <__aeabi_dsub>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4680      	mov	r8, r0
 8005f08:	4689      	mov	r9, r1
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	4639      	mov	r1, r7
 8005f0e:	f7fa f967 	bl	80001e0 <__aeabi_dsub>
 8005f12:	4622      	mov	r2, r4
 8005f14:	462b      	mov	r3, r5
 8005f16:	f7fa f963 	bl	80001e0 <__aeabi_dsub>
 8005f1a:	a343      	add	r3, pc, #268	; (adr r3, 8006028 <__ieee754_rem_pio2+0x318>)
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	4604      	mov	r4, r0
 8005f22:	460d      	mov	r5, r1
 8005f24:	ec51 0b18 	vmov	r0, r1, d8
 8005f28:	f7fa fb12 	bl	8000550 <__aeabi_dmul>
 8005f2c:	4622      	mov	r2, r4
 8005f2e:	462b      	mov	r3, r5
 8005f30:	f7fa f956 	bl	80001e0 <__aeabi_dsub>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4604      	mov	r4, r0
 8005f3a:	460d      	mov	r5, r1
 8005f3c:	4640      	mov	r0, r8
 8005f3e:	4649      	mov	r1, r9
 8005f40:	f7fa f94e 	bl	80001e0 <__aeabi_dsub>
 8005f44:	9a03      	ldr	r2, [sp, #12]
 8005f46:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b31      	cmp	r3, #49	; 0x31
 8005f4e:	dc24      	bgt.n	8005f9a <__ieee754_rem_pio2+0x28a>
 8005f50:	e9ca 0100 	strd	r0, r1, [sl]
 8005f54:	4646      	mov	r6, r8
 8005f56:	464f      	mov	r7, r9
 8005f58:	e9da 8900 	ldrd	r8, r9, [sl]
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	4642      	mov	r2, r8
 8005f60:	464b      	mov	r3, r9
 8005f62:	4639      	mov	r1, r7
 8005f64:	f7fa f93c 	bl	80001e0 <__aeabi_dsub>
 8005f68:	462b      	mov	r3, r5
 8005f6a:	4622      	mov	r2, r4
 8005f6c:	f7fa f938 	bl	80001e0 <__aeabi_dsub>
 8005f70:	9b02      	ldr	r3, [sp, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005f78:	f6bf af0a 	bge.w	8005d90 <__ieee754_rem_pio2+0x80>
 8005f7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005f80:	f8ca 3004 	str.w	r3, [sl, #4]
 8005f84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f88:	f8ca 8000 	str.w	r8, [sl]
 8005f8c:	f8ca 0008 	str.w	r0, [sl, #8]
 8005f90:	f8ca 300c 	str.w	r3, [sl, #12]
 8005f94:	f1cb 0b00 	rsb	fp, fp, #0
 8005f98:	e6fa      	b.n	8005d90 <__ieee754_rem_pio2+0x80>
 8005f9a:	a327      	add	r3, pc, #156	; (adr r3, 8006038 <__ieee754_rem_pio2+0x328>)
 8005f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa0:	ec51 0b18 	vmov	r0, r1, d8
 8005fa4:	f7fa fad4 	bl	8000550 <__aeabi_dmul>
 8005fa8:	4604      	mov	r4, r0
 8005faa:	460d      	mov	r5, r1
 8005fac:	4602      	mov	r2, r0
 8005fae:	460b      	mov	r3, r1
 8005fb0:	4640      	mov	r0, r8
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	f7fa f914 	bl	80001e0 <__aeabi_dsub>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4606      	mov	r6, r0
 8005fbe:	460f      	mov	r7, r1
 8005fc0:	4640      	mov	r0, r8
 8005fc2:	4649      	mov	r1, r9
 8005fc4:	f7fa f90c 	bl	80001e0 <__aeabi_dsub>
 8005fc8:	4622      	mov	r2, r4
 8005fca:	462b      	mov	r3, r5
 8005fcc:	f7fa f908 	bl	80001e0 <__aeabi_dsub>
 8005fd0:	a31b      	add	r3, pc, #108	; (adr r3, 8006040 <__ieee754_rem_pio2+0x330>)
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	460d      	mov	r5, r1
 8005fda:	ec51 0b18 	vmov	r0, r1, d8
 8005fde:	f7fa fab7 	bl	8000550 <__aeabi_dmul>
 8005fe2:	4622      	mov	r2, r4
 8005fe4:	462b      	mov	r3, r5
 8005fe6:	f7fa f8fb 	bl	80001e0 <__aeabi_dsub>
 8005fea:	4604      	mov	r4, r0
 8005fec:	460d      	mov	r5, r1
 8005fee:	e75f      	b.n	8005eb0 <__ieee754_rem_pio2+0x1a0>
 8005ff0:	4b1b      	ldr	r3, [pc, #108]	; (8006060 <__ieee754_rem_pio2+0x350>)
 8005ff2:	4598      	cmp	r8, r3
 8005ff4:	dd36      	ble.n	8006064 <__ieee754_rem_pio2+0x354>
 8005ff6:	ee10 2a10 	vmov	r2, s0
 8005ffa:	462b      	mov	r3, r5
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	4629      	mov	r1, r5
 8006000:	f7fa f8ee 	bl	80001e0 <__aeabi_dsub>
 8006004:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006008:	e9ca 0100 	strd	r0, r1, [sl]
 800600c:	e694      	b.n	8005d38 <__ieee754_rem_pio2+0x28>
 800600e:	bf00      	nop
 8006010:	54400000 	.word	0x54400000
 8006014:	3ff921fb 	.word	0x3ff921fb
 8006018:	1a626331 	.word	0x1a626331
 800601c:	3dd0b461 	.word	0x3dd0b461
 8006020:	1a600000 	.word	0x1a600000
 8006024:	3dd0b461 	.word	0x3dd0b461
 8006028:	2e037073 	.word	0x2e037073
 800602c:	3ba3198a 	.word	0x3ba3198a
 8006030:	6dc9c883 	.word	0x6dc9c883
 8006034:	3fe45f30 	.word	0x3fe45f30
 8006038:	2e000000 	.word	0x2e000000
 800603c:	3ba3198a 	.word	0x3ba3198a
 8006040:	252049c1 	.word	0x252049c1
 8006044:	397b839a 	.word	0x397b839a
 8006048:	3fe921fb 	.word	0x3fe921fb
 800604c:	4002d97b 	.word	0x4002d97b
 8006050:	3ff921fb 	.word	0x3ff921fb
 8006054:	413921fb 	.word	0x413921fb
 8006058:	3fe00000 	.word	0x3fe00000
 800605c:	08006d58 	.word	0x08006d58
 8006060:	7fefffff 	.word	0x7fefffff
 8006064:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006068:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800606c:	ee10 0a10 	vmov	r0, s0
 8006070:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006074:	ee10 6a10 	vmov	r6, s0
 8006078:	460f      	mov	r7, r1
 800607a:	f7fa fd03 	bl	8000a84 <__aeabi_d2iz>
 800607e:	f7fa f9fd 	bl	800047c <__aeabi_i2d>
 8006082:	4602      	mov	r2, r0
 8006084:	460b      	mov	r3, r1
 8006086:	4630      	mov	r0, r6
 8006088:	4639      	mov	r1, r7
 800608a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800608e:	f7fa f8a7 	bl	80001e0 <__aeabi_dsub>
 8006092:	4b23      	ldr	r3, [pc, #140]	; (8006120 <__ieee754_rem_pio2+0x410>)
 8006094:	2200      	movs	r2, #0
 8006096:	f7fa fa5b 	bl	8000550 <__aeabi_dmul>
 800609a:	460f      	mov	r7, r1
 800609c:	4606      	mov	r6, r0
 800609e:	f7fa fcf1 	bl	8000a84 <__aeabi_d2iz>
 80060a2:	f7fa f9eb 	bl	800047c <__aeabi_i2d>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4630      	mov	r0, r6
 80060ac:	4639      	mov	r1, r7
 80060ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80060b2:	f7fa f895 	bl	80001e0 <__aeabi_dsub>
 80060b6:	4b1a      	ldr	r3, [pc, #104]	; (8006120 <__ieee754_rem_pio2+0x410>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	f7fa fa49 	bl	8000550 <__aeabi_dmul>
 80060be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80060c2:	ad04      	add	r5, sp, #16
 80060c4:	f04f 0803 	mov.w	r8, #3
 80060c8:	46a9      	mov	r9, r5
 80060ca:	2600      	movs	r6, #0
 80060cc:	2700      	movs	r7, #0
 80060ce:	4632      	mov	r2, r6
 80060d0:	463b      	mov	r3, r7
 80060d2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80060d6:	46c3      	mov	fp, r8
 80060d8:	3d08      	subs	r5, #8
 80060da:	f108 38ff 	add.w	r8, r8, #4294967295
 80060de:	f7fa fc9f 	bl	8000a20 <__aeabi_dcmpeq>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d1f3      	bne.n	80060ce <__ieee754_rem_pio2+0x3be>
 80060e6:	4b0f      	ldr	r3, [pc, #60]	; (8006124 <__ieee754_rem_pio2+0x414>)
 80060e8:	9301      	str	r3, [sp, #4]
 80060ea:	2302      	movs	r3, #2
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	4622      	mov	r2, r4
 80060f0:	465b      	mov	r3, fp
 80060f2:	4651      	mov	r1, sl
 80060f4:	4648      	mov	r0, r9
 80060f6:	f000 f8df 	bl	80062b8 <__kernel_rem_pio2>
 80060fa:	9b02      	ldr	r3, [sp, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	4683      	mov	fp, r0
 8006100:	f6bf ae46 	bge.w	8005d90 <__ieee754_rem_pio2+0x80>
 8006104:	e9da 2100 	ldrd	r2, r1, [sl]
 8006108:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800610c:	e9ca 2300 	strd	r2, r3, [sl]
 8006110:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006114:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006118:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800611c:	e73a      	b.n	8005f94 <__ieee754_rem_pio2+0x284>
 800611e:	bf00      	nop
 8006120:	41700000 	.word	0x41700000
 8006124:	08006dd8 	.word	0x08006dd8

08006128 <__kernel_cos>:
 8006128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612c:	ec57 6b10 	vmov	r6, r7, d0
 8006130:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006134:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006138:	ed8d 1b00 	vstr	d1, [sp]
 800613c:	da07      	bge.n	800614e <__kernel_cos+0x26>
 800613e:	ee10 0a10 	vmov	r0, s0
 8006142:	4639      	mov	r1, r7
 8006144:	f7fa fc9e 	bl	8000a84 <__aeabi_d2iz>
 8006148:	2800      	cmp	r0, #0
 800614a:	f000 8088 	beq.w	800625e <__kernel_cos+0x136>
 800614e:	4632      	mov	r2, r6
 8006150:	463b      	mov	r3, r7
 8006152:	4630      	mov	r0, r6
 8006154:	4639      	mov	r1, r7
 8006156:	f7fa f9fb 	bl	8000550 <__aeabi_dmul>
 800615a:	4b51      	ldr	r3, [pc, #324]	; (80062a0 <__kernel_cos+0x178>)
 800615c:	2200      	movs	r2, #0
 800615e:	4604      	mov	r4, r0
 8006160:	460d      	mov	r5, r1
 8006162:	f7fa f9f5 	bl	8000550 <__aeabi_dmul>
 8006166:	a340      	add	r3, pc, #256	; (adr r3, 8006268 <__kernel_cos+0x140>)
 8006168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616c:	4682      	mov	sl, r0
 800616e:	468b      	mov	fp, r1
 8006170:	4620      	mov	r0, r4
 8006172:	4629      	mov	r1, r5
 8006174:	f7fa f9ec 	bl	8000550 <__aeabi_dmul>
 8006178:	a33d      	add	r3, pc, #244	; (adr r3, 8006270 <__kernel_cos+0x148>)
 800617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617e:	f7fa f831 	bl	80001e4 <__adddf3>
 8006182:	4622      	mov	r2, r4
 8006184:	462b      	mov	r3, r5
 8006186:	f7fa f9e3 	bl	8000550 <__aeabi_dmul>
 800618a:	a33b      	add	r3, pc, #236	; (adr r3, 8006278 <__kernel_cos+0x150>)
 800618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006190:	f7fa f826 	bl	80001e0 <__aeabi_dsub>
 8006194:	4622      	mov	r2, r4
 8006196:	462b      	mov	r3, r5
 8006198:	f7fa f9da 	bl	8000550 <__aeabi_dmul>
 800619c:	a338      	add	r3, pc, #224	; (adr r3, 8006280 <__kernel_cos+0x158>)
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	f7fa f81f 	bl	80001e4 <__adddf3>
 80061a6:	4622      	mov	r2, r4
 80061a8:	462b      	mov	r3, r5
 80061aa:	f7fa f9d1 	bl	8000550 <__aeabi_dmul>
 80061ae:	a336      	add	r3, pc, #216	; (adr r3, 8006288 <__kernel_cos+0x160>)
 80061b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b4:	f7fa f814 	bl	80001e0 <__aeabi_dsub>
 80061b8:	4622      	mov	r2, r4
 80061ba:	462b      	mov	r3, r5
 80061bc:	f7fa f9c8 	bl	8000550 <__aeabi_dmul>
 80061c0:	a333      	add	r3, pc, #204	; (adr r3, 8006290 <__kernel_cos+0x168>)
 80061c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c6:	f7fa f80d 	bl	80001e4 <__adddf3>
 80061ca:	4622      	mov	r2, r4
 80061cc:	462b      	mov	r3, r5
 80061ce:	f7fa f9bf 	bl	8000550 <__aeabi_dmul>
 80061d2:	4622      	mov	r2, r4
 80061d4:	462b      	mov	r3, r5
 80061d6:	f7fa f9bb 	bl	8000550 <__aeabi_dmul>
 80061da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061de:	4604      	mov	r4, r0
 80061e0:	460d      	mov	r5, r1
 80061e2:	4630      	mov	r0, r6
 80061e4:	4639      	mov	r1, r7
 80061e6:	f7fa f9b3 	bl	8000550 <__aeabi_dmul>
 80061ea:	460b      	mov	r3, r1
 80061ec:	4602      	mov	r2, r0
 80061ee:	4629      	mov	r1, r5
 80061f0:	4620      	mov	r0, r4
 80061f2:	f7f9 fff5 	bl	80001e0 <__aeabi_dsub>
 80061f6:	4b2b      	ldr	r3, [pc, #172]	; (80062a4 <__kernel_cos+0x17c>)
 80061f8:	4598      	cmp	r8, r3
 80061fa:	4606      	mov	r6, r0
 80061fc:	460f      	mov	r7, r1
 80061fe:	dc10      	bgt.n	8006222 <__kernel_cos+0xfa>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4650      	mov	r0, sl
 8006206:	4659      	mov	r1, fp
 8006208:	f7f9 ffea 	bl	80001e0 <__aeabi_dsub>
 800620c:	460b      	mov	r3, r1
 800620e:	4926      	ldr	r1, [pc, #152]	; (80062a8 <__kernel_cos+0x180>)
 8006210:	4602      	mov	r2, r0
 8006212:	2000      	movs	r0, #0
 8006214:	f7f9 ffe4 	bl	80001e0 <__aeabi_dsub>
 8006218:	ec41 0b10 	vmov	d0, r0, r1
 800621c:	b003      	add	sp, #12
 800621e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006222:	4b22      	ldr	r3, [pc, #136]	; (80062ac <__kernel_cos+0x184>)
 8006224:	4920      	ldr	r1, [pc, #128]	; (80062a8 <__kernel_cos+0x180>)
 8006226:	4598      	cmp	r8, r3
 8006228:	bfcc      	ite	gt
 800622a:	4d21      	ldrgt	r5, [pc, #132]	; (80062b0 <__kernel_cos+0x188>)
 800622c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006230:	2400      	movs	r4, #0
 8006232:	4622      	mov	r2, r4
 8006234:	462b      	mov	r3, r5
 8006236:	2000      	movs	r0, #0
 8006238:	f7f9 ffd2 	bl	80001e0 <__aeabi_dsub>
 800623c:	4622      	mov	r2, r4
 800623e:	4680      	mov	r8, r0
 8006240:	4689      	mov	r9, r1
 8006242:	462b      	mov	r3, r5
 8006244:	4650      	mov	r0, sl
 8006246:	4659      	mov	r1, fp
 8006248:	f7f9 ffca 	bl	80001e0 <__aeabi_dsub>
 800624c:	4632      	mov	r2, r6
 800624e:	463b      	mov	r3, r7
 8006250:	f7f9 ffc6 	bl	80001e0 <__aeabi_dsub>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4640      	mov	r0, r8
 800625a:	4649      	mov	r1, r9
 800625c:	e7da      	b.n	8006214 <__kernel_cos+0xec>
 800625e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006298 <__kernel_cos+0x170>
 8006262:	e7db      	b.n	800621c <__kernel_cos+0xf4>
 8006264:	f3af 8000 	nop.w
 8006268:	be8838d4 	.word	0xbe8838d4
 800626c:	bda8fae9 	.word	0xbda8fae9
 8006270:	bdb4b1c4 	.word	0xbdb4b1c4
 8006274:	3e21ee9e 	.word	0x3e21ee9e
 8006278:	809c52ad 	.word	0x809c52ad
 800627c:	3e927e4f 	.word	0x3e927e4f
 8006280:	19cb1590 	.word	0x19cb1590
 8006284:	3efa01a0 	.word	0x3efa01a0
 8006288:	16c15177 	.word	0x16c15177
 800628c:	3f56c16c 	.word	0x3f56c16c
 8006290:	5555554c 	.word	0x5555554c
 8006294:	3fa55555 	.word	0x3fa55555
 8006298:	00000000 	.word	0x00000000
 800629c:	3ff00000 	.word	0x3ff00000
 80062a0:	3fe00000 	.word	0x3fe00000
 80062a4:	3fd33332 	.word	0x3fd33332
 80062a8:	3ff00000 	.word	0x3ff00000
 80062ac:	3fe90000 	.word	0x3fe90000
 80062b0:	3fd20000 	.word	0x3fd20000
 80062b4:	00000000 	.word	0x00000000

080062b8 <__kernel_rem_pio2>:
 80062b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062bc:	ed2d 8b02 	vpush	{d8}
 80062c0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80062c4:	f112 0f14 	cmn.w	r2, #20
 80062c8:	9308      	str	r3, [sp, #32]
 80062ca:	9101      	str	r1, [sp, #4]
 80062cc:	4bc4      	ldr	r3, [pc, #784]	; (80065e0 <__kernel_rem_pio2+0x328>)
 80062ce:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80062d0:	900b      	str	r0, [sp, #44]	; 0x2c
 80062d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80062d6:	9302      	str	r3, [sp, #8]
 80062d8:	9b08      	ldr	r3, [sp, #32]
 80062da:	f103 33ff 	add.w	r3, r3, #4294967295
 80062de:	bfa8      	it	ge
 80062e0:	1ed4      	subge	r4, r2, #3
 80062e2:	9306      	str	r3, [sp, #24]
 80062e4:	bfb2      	itee	lt
 80062e6:	2400      	movlt	r4, #0
 80062e8:	2318      	movge	r3, #24
 80062ea:	fb94 f4f3 	sdivge	r4, r4, r3
 80062ee:	f06f 0317 	mvn.w	r3, #23
 80062f2:	fb04 3303 	mla	r3, r4, r3, r3
 80062f6:	eb03 0a02 	add.w	sl, r3, r2
 80062fa:	9b02      	ldr	r3, [sp, #8]
 80062fc:	9a06      	ldr	r2, [sp, #24]
 80062fe:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80065d0 <__kernel_rem_pio2+0x318>
 8006302:	eb03 0802 	add.w	r8, r3, r2
 8006306:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006308:	1aa7      	subs	r7, r4, r2
 800630a:	ae22      	add	r6, sp, #136	; 0x88
 800630c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006310:	2500      	movs	r5, #0
 8006312:	4545      	cmp	r5, r8
 8006314:	dd13      	ble.n	800633e <__kernel_rem_pio2+0x86>
 8006316:	9b08      	ldr	r3, [sp, #32]
 8006318:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80065d0 <__kernel_rem_pio2+0x318>
 800631c:	aa22      	add	r2, sp, #136	; 0x88
 800631e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006322:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006326:	f04f 0800 	mov.w	r8, #0
 800632a:	9b02      	ldr	r3, [sp, #8]
 800632c:	4598      	cmp	r8, r3
 800632e:	dc2f      	bgt.n	8006390 <__kernel_rem_pio2+0xd8>
 8006330:	ed8d 8b04 	vstr	d8, [sp, #16]
 8006334:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8006338:	462f      	mov	r7, r5
 800633a:	2600      	movs	r6, #0
 800633c:	e01b      	b.n	8006376 <__kernel_rem_pio2+0xbe>
 800633e:	42ef      	cmn	r7, r5
 8006340:	d407      	bmi.n	8006352 <__kernel_rem_pio2+0x9a>
 8006342:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006346:	f7fa f899 	bl	800047c <__aeabi_i2d>
 800634a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800634e:	3501      	adds	r5, #1
 8006350:	e7df      	b.n	8006312 <__kernel_rem_pio2+0x5a>
 8006352:	ec51 0b18 	vmov	r0, r1, d8
 8006356:	e7f8      	b.n	800634a <__kernel_rem_pio2+0x92>
 8006358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800635c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006360:	f7fa f8f6 	bl	8000550 <__aeabi_dmul>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800636c:	f7f9 ff3a 	bl	80001e4 <__adddf3>
 8006370:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006374:	3601      	adds	r6, #1
 8006376:	9b06      	ldr	r3, [sp, #24]
 8006378:	429e      	cmp	r6, r3
 800637a:	f1a7 0708 	sub.w	r7, r7, #8
 800637e:	ddeb      	ble.n	8006358 <__kernel_rem_pio2+0xa0>
 8006380:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006384:	f108 0801 	add.w	r8, r8, #1
 8006388:	ecab 7b02 	vstmia	fp!, {d7}
 800638c:	3508      	adds	r5, #8
 800638e:	e7cc      	b.n	800632a <__kernel_rem_pio2+0x72>
 8006390:	9b02      	ldr	r3, [sp, #8]
 8006392:	aa0e      	add	r2, sp, #56	; 0x38
 8006394:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006398:	930d      	str	r3, [sp, #52]	; 0x34
 800639a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800639c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80063a0:	9c02      	ldr	r4, [sp, #8]
 80063a2:	930c      	str	r3, [sp, #48]	; 0x30
 80063a4:	00e3      	lsls	r3, r4, #3
 80063a6:	930a      	str	r3, [sp, #40]	; 0x28
 80063a8:	ab9a      	add	r3, sp, #616	; 0x268
 80063aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80063ae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80063b2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80063b6:	ab72      	add	r3, sp, #456	; 0x1c8
 80063b8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80063bc:	46c3      	mov	fp, r8
 80063be:	46a1      	mov	r9, r4
 80063c0:	f1b9 0f00 	cmp.w	r9, #0
 80063c4:	f1a5 0508 	sub.w	r5, r5, #8
 80063c8:	dc77      	bgt.n	80064ba <__kernel_rem_pio2+0x202>
 80063ca:	ec47 6b10 	vmov	d0, r6, r7
 80063ce:	4650      	mov	r0, sl
 80063d0:	f000 fc02 	bl	8006bd8 <scalbn>
 80063d4:	ec57 6b10 	vmov	r6, r7, d0
 80063d8:	2200      	movs	r2, #0
 80063da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80063de:	ee10 0a10 	vmov	r0, s0
 80063e2:	4639      	mov	r1, r7
 80063e4:	f7fa f8b4 	bl	8000550 <__aeabi_dmul>
 80063e8:	ec41 0b10 	vmov	d0, r0, r1
 80063ec:	f000 fb74 	bl	8006ad8 <floor>
 80063f0:	4b7c      	ldr	r3, [pc, #496]	; (80065e4 <__kernel_rem_pio2+0x32c>)
 80063f2:	ec51 0b10 	vmov	r0, r1, d0
 80063f6:	2200      	movs	r2, #0
 80063f8:	f7fa f8aa 	bl	8000550 <__aeabi_dmul>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4630      	mov	r0, r6
 8006402:	4639      	mov	r1, r7
 8006404:	f7f9 feec 	bl	80001e0 <__aeabi_dsub>
 8006408:	460f      	mov	r7, r1
 800640a:	4606      	mov	r6, r0
 800640c:	f7fa fb3a 	bl	8000a84 <__aeabi_d2iz>
 8006410:	9004      	str	r0, [sp, #16]
 8006412:	f7fa f833 	bl	800047c <__aeabi_i2d>
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	4630      	mov	r0, r6
 800641c:	4639      	mov	r1, r7
 800641e:	f7f9 fedf 	bl	80001e0 <__aeabi_dsub>
 8006422:	f1ba 0f00 	cmp.w	sl, #0
 8006426:	4606      	mov	r6, r0
 8006428:	460f      	mov	r7, r1
 800642a:	dd6d      	ble.n	8006508 <__kernel_rem_pio2+0x250>
 800642c:	1e62      	subs	r2, r4, #1
 800642e:	ab0e      	add	r3, sp, #56	; 0x38
 8006430:	9d04      	ldr	r5, [sp, #16]
 8006432:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006436:	f1ca 0118 	rsb	r1, sl, #24
 800643a:	fa40 f301 	asr.w	r3, r0, r1
 800643e:	441d      	add	r5, r3
 8006440:	408b      	lsls	r3, r1
 8006442:	1ac0      	subs	r0, r0, r3
 8006444:	ab0e      	add	r3, sp, #56	; 0x38
 8006446:	9504      	str	r5, [sp, #16]
 8006448:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800644c:	f1ca 0317 	rsb	r3, sl, #23
 8006450:	fa40 fb03 	asr.w	fp, r0, r3
 8006454:	f1bb 0f00 	cmp.w	fp, #0
 8006458:	dd65      	ble.n	8006526 <__kernel_rem_pio2+0x26e>
 800645a:	9b04      	ldr	r3, [sp, #16]
 800645c:	2200      	movs	r2, #0
 800645e:	3301      	adds	r3, #1
 8006460:	9304      	str	r3, [sp, #16]
 8006462:	4615      	mov	r5, r2
 8006464:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006468:	4294      	cmp	r4, r2
 800646a:	f300 809c 	bgt.w	80065a6 <__kernel_rem_pio2+0x2ee>
 800646e:	f1ba 0f00 	cmp.w	sl, #0
 8006472:	dd07      	ble.n	8006484 <__kernel_rem_pio2+0x1cc>
 8006474:	f1ba 0f01 	cmp.w	sl, #1
 8006478:	f000 80c0 	beq.w	80065fc <__kernel_rem_pio2+0x344>
 800647c:	f1ba 0f02 	cmp.w	sl, #2
 8006480:	f000 80c6 	beq.w	8006610 <__kernel_rem_pio2+0x358>
 8006484:	f1bb 0f02 	cmp.w	fp, #2
 8006488:	d14d      	bne.n	8006526 <__kernel_rem_pio2+0x26e>
 800648a:	4632      	mov	r2, r6
 800648c:	463b      	mov	r3, r7
 800648e:	4956      	ldr	r1, [pc, #344]	; (80065e8 <__kernel_rem_pio2+0x330>)
 8006490:	2000      	movs	r0, #0
 8006492:	f7f9 fea5 	bl	80001e0 <__aeabi_dsub>
 8006496:	4606      	mov	r6, r0
 8006498:	460f      	mov	r7, r1
 800649a:	2d00      	cmp	r5, #0
 800649c:	d043      	beq.n	8006526 <__kernel_rem_pio2+0x26e>
 800649e:	4650      	mov	r0, sl
 80064a0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80065d8 <__kernel_rem_pio2+0x320>
 80064a4:	f000 fb98 	bl	8006bd8 <scalbn>
 80064a8:	4630      	mov	r0, r6
 80064aa:	4639      	mov	r1, r7
 80064ac:	ec53 2b10 	vmov	r2, r3, d0
 80064b0:	f7f9 fe96 	bl	80001e0 <__aeabi_dsub>
 80064b4:	4606      	mov	r6, r0
 80064b6:	460f      	mov	r7, r1
 80064b8:	e035      	b.n	8006526 <__kernel_rem_pio2+0x26e>
 80064ba:	4b4c      	ldr	r3, [pc, #304]	; (80065ec <__kernel_rem_pio2+0x334>)
 80064bc:	2200      	movs	r2, #0
 80064be:	4630      	mov	r0, r6
 80064c0:	4639      	mov	r1, r7
 80064c2:	f7fa f845 	bl	8000550 <__aeabi_dmul>
 80064c6:	f7fa fadd 	bl	8000a84 <__aeabi_d2iz>
 80064ca:	f7f9 ffd7 	bl	800047c <__aeabi_i2d>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	ec43 2b18 	vmov	d8, r2, r3
 80064d6:	4b46      	ldr	r3, [pc, #280]	; (80065f0 <__kernel_rem_pio2+0x338>)
 80064d8:	2200      	movs	r2, #0
 80064da:	f7fa f839 	bl	8000550 <__aeabi_dmul>
 80064de:	4602      	mov	r2, r0
 80064e0:	460b      	mov	r3, r1
 80064e2:	4630      	mov	r0, r6
 80064e4:	4639      	mov	r1, r7
 80064e6:	f7f9 fe7b 	bl	80001e0 <__aeabi_dsub>
 80064ea:	f7fa facb 	bl	8000a84 <__aeabi_d2iz>
 80064ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064f2:	f84b 0b04 	str.w	r0, [fp], #4
 80064f6:	ec51 0b18 	vmov	r0, r1, d8
 80064fa:	f7f9 fe73 	bl	80001e4 <__adddf3>
 80064fe:	f109 39ff 	add.w	r9, r9, #4294967295
 8006502:	4606      	mov	r6, r0
 8006504:	460f      	mov	r7, r1
 8006506:	e75b      	b.n	80063c0 <__kernel_rem_pio2+0x108>
 8006508:	d106      	bne.n	8006518 <__kernel_rem_pio2+0x260>
 800650a:	1e63      	subs	r3, r4, #1
 800650c:	aa0e      	add	r2, sp, #56	; 0x38
 800650e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006512:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8006516:	e79d      	b.n	8006454 <__kernel_rem_pio2+0x19c>
 8006518:	4b36      	ldr	r3, [pc, #216]	; (80065f4 <__kernel_rem_pio2+0x33c>)
 800651a:	2200      	movs	r2, #0
 800651c:	f7fa fa9e 	bl	8000a5c <__aeabi_dcmpge>
 8006520:	2800      	cmp	r0, #0
 8006522:	d13d      	bne.n	80065a0 <__kernel_rem_pio2+0x2e8>
 8006524:	4683      	mov	fp, r0
 8006526:	2200      	movs	r2, #0
 8006528:	2300      	movs	r3, #0
 800652a:	4630      	mov	r0, r6
 800652c:	4639      	mov	r1, r7
 800652e:	f7fa fa77 	bl	8000a20 <__aeabi_dcmpeq>
 8006532:	2800      	cmp	r0, #0
 8006534:	f000 80c0 	beq.w	80066b8 <__kernel_rem_pio2+0x400>
 8006538:	1e65      	subs	r5, r4, #1
 800653a:	462b      	mov	r3, r5
 800653c:	2200      	movs	r2, #0
 800653e:	9902      	ldr	r1, [sp, #8]
 8006540:	428b      	cmp	r3, r1
 8006542:	da6c      	bge.n	800661e <__kernel_rem_pio2+0x366>
 8006544:	2a00      	cmp	r2, #0
 8006546:	f000 8089 	beq.w	800665c <__kernel_rem_pio2+0x3a4>
 800654a:	ab0e      	add	r3, sp, #56	; 0x38
 800654c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006550:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 80ad 	beq.w	80066b4 <__kernel_rem_pio2+0x3fc>
 800655a:	4650      	mov	r0, sl
 800655c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80065d8 <__kernel_rem_pio2+0x320>
 8006560:	f000 fb3a 	bl	8006bd8 <scalbn>
 8006564:	ab9a      	add	r3, sp, #616	; 0x268
 8006566:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800656a:	ec57 6b10 	vmov	r6, r7, d0
 800656e:	00ec      	lsls	r4, r5, #3
 8006570:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8006574:	46aa      	mov	sl, r5
 8006576:	f1ba 0f00 	cmp.w	sl, #0
 800657a:	f280 80d6 	bge.w	800672a <__kernel_rem_pio2+0x472>
 800657e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80065d0 <__kernel_rem_pio2+0x318>
 8006582:	462e      	mov	r6, r5
 8006584:	2e00      	cmp	r6, #0
 8006586:	f2c0 8104 	blt.w	8006792 <__kernel_rem_pio2+0x4da>
 800658a:	ab72      	add	r3, sp, #456	; 0x1c8
 800658c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8006590:	f8df a064 	ldr.w	sl, [pc, #100]	; 80065f8 <__kernel_rem_pio2+0x340>
 8006594:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8006598:	f04f 0800 	mov.w	r8, #0
 800659c:	1baf      	subs	r7, r5, r6
 800659e:	e0ea      	b.n	8006776 <__kernel_rem_pio2+0x4be>
 80065a0:	f04f 0b02 	mov.w	fp, #2
 80065a4:	e759      	b.n	800645a <__kernel_rem_pio2+0x1a2>
 80065a6:	f8d8 3000 	ldr.w	r3, [r8]
 80065aa:	b955      	cbnz	r5, 80065c2 <__kernel_rem_pio2+0x30a>
 80065ac:	b123      	cbz	r3, 80065b8 <__kernel_rem_pio2+0x300>
 80065ae:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80065b2:	f8c8 3000 	str.w	r3, [r8]
 80065b6:	2301      	movs	r3, #1
 80065b8:	3201      	adds	r2, #1
 80065ba:	f108 0804 	add.w	r8, r8, #4
 80065be:	461d      	mov	r5, r3
 80065c0:	e752      	b.n	8006468 <__kernel_rem_pio2+0x1b0>
 80065c2:	1acb      	subs	r3, r1, r3
 80065c4:	f8c8 3000 	str.w	r3, [r8]
 80065c8:	462b      	mov	r3, r5
 80065ca:	e7f5      	b.n	80065b8 <__kernel_rem_pio2+0x300>
 80065cc:	f3af 8000 	nop.w
	...
 80065dc:	3ff00000 	.word	0x3ff00000
 80065e0:	08006f20 	.word	0x08006f20
 80065e4:	40200000 	.word	0x40200000
 80065e8:	3ff00000 	.word	0x3ff00000
 80065ec:	3e700000 	.word	0x3e700000
 80065f0:	41700000 	.word	0x41700000
 80065f4:	3fe00000 	.word	0x3fe00000
 80065f8:	08006ee0 	.word	0x08006ee0
 80065fc:	1e62      	subs	r2, r4, #1
 80065fe:	ab0e      	add	r3, sp, #56	; 0x38
 8006600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006604:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006608:	a90e      	add	r1, sp, #56	; 0x38
 800660a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800660e:	e739      	b.n	8006484 <__kernel_rem_pio2+0x1cc>
 8006610:	1e62      	subs	r2, r4, #1
 8006612:	ab0e      	add	r3, sp, #56	; 0x38
 8006614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006618:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800661c:	e7f4      	b.n	8006608 <__kernel_rem_pio2+0x350>
 800661e:	a90e      	add	r1, sp, #56	; 0x38
 8006620:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006624:	3b01      	subs	r3, #1
 8006626:	430a      	orrs	r2, r1
 8006628:	e789      	b.n	800653e <__kernel_rem_pio2+0x286>
 800662a:	3301      	adds	r3, #1
 800662c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006630:	2900      	cmp	r1, #0
 8006632:	d0fa      	beq.n	800662a <__kernel_rem_pio2+0x372>
 8006634:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006636:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800663a:	446a      	add	r2, sp
 800663c:	3a98      	subs	r2, #152	; 0x98
 800663e:	920a      	str	r2, [sp, #40]	; 0x28
 8006640:	9a08      	ldr	r2, [sp, #32]
 8006642:	18e3      	adds	r3, r4, r3
 8006644:	18a5      	adds	r5, r4, r2
 8006646:	aa22      	add	r2, sp, #136	; 0x88
 8006648:	f104 0801 	add.w	r8, r4, #1
 800664c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006650:	9304      	str	r3, [sp, #16]
 8006652:	9b04      	ldr	r3, [sp, #16]
 8006654:	4543      	cmp	r3, r8
 8006656:	da04      	bge.n	8006662 <__kernel_rem_pio2+0x3aa>
 8006658:	461c      	mov	r4, r3
 800665a:	e6a3      	b.n	80063a4 <__kernel_rem_pio2+0xec>
 800665c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800665e:	2301      	movs	r3, #1
 8006660:	e7e4      	b.n	800662c <__kernel_rem_pio2+0x374>
 8006662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006664:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006668:	f7f9 ff08 	bl	800047c <__aeabi_i2d>
 800666c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006672:	46ab      	mov	fp, r5
 8006674:	461c      	mov	r4, r3
 8006676:	f04f 0900 	mov.w	r9, #0
 800667a:	2600      	movs	r6, #0
 800667c:	2700      	movs	r7, #0
 800667e:	9b06      	ldr	r3, [sp, #24]
 8006680:	4599      	cmp	r9, r3
 8006682:	dd06      	ble.n	8006692 <__kernel_rem_pio2+0x3da>
 8006684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006686:	e8e3 6702 	strd	r6, r7, [r3], #8
 800668a:	f108 0801 	add.w	r8, r8, #1
 800668e:	930a      	str	r3, [sp, #40]	; 0x28
 8006690:	e7df      	b.n	8006652 <__kernel_rem_pio2+0x39a>
 8006692:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006696:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800669a:	f7f9 ff59 	bl	8000550 <__aeabi_dmul>
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	4630      	mov	r0, r6
 80066a4:	4639      	mov	r1, r7
 80066a6:	f7f9 fd9d 	bl	80001e4 <__adddf3>
 80066aa:	f109 0901 	add.w	r9, r9, #1
 80066ae:	4606      	mov	r6, r0
 80066b0:	460f      	mov	r7, r1
 80066b2:	e7e4      	b.n	800667e <__kernel_rem_pio2+0x3c6>
 80066b4:	3d01      	subs	r5, #1
 80066b6:	e748      	b.n	800654a <__kernel_rem_pio2+0x292>
 80066b8:	ec47 6b10 	vmov	d0, r6, r7
 80066bc:	f1ca 0000 	rsb	r0, sl, #0
 80066c0:	f000 fa8a 	bl	8006bd8 <scalbn>
 80066c4:	ec57 6b10 	vmov	r6, r7, d0
 80066c8:	4ba0      	ldr	r3, [pc, #640]	; (800694c <__kernel_rem_pio2+0x694>)
 80066ca:	ee10 0a10 	vmov	r0, s0
 80066ce:	2200      	movs	r2, #0
 80066d0:	4639      	mov	r1, r7
 80066d2:	f7fa f9c3 	bl	8000a5c <__aeabi_dcmpge>
 80066d6:	b1f8      	cbz	r0, 8006718 <__kernel_rem_pio2+0x460>
 80066d8:	4b9d      	ldr	r3, [pc, #628]	; (8006950 <__kernel_rem_pio2+0x698>)
 80066da:	2200      	movs	r2, #0
 80066dc:	4630      	mov	r0, r6
 80066de:	4639      	mov	r1, r7
 80066e0:	f7f9 ff36 	bl	8000550 <__aeabi_dmul>
 80066e4:	f7fa f9ce 	bl	8000a84 <__aeabi_d2iz>
 80066e8:	4680      	mov	r8, r0
 80066ea:	f7f9 fec7 	bl	800047c <__aeabi_i2d>
 80066ee:	4b97      	ldr	r3, [pc, #604]	; (800694c <__kernel_rem_pio2+0x694>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	f7f9 ff2d 	bl	8000550 <__aeabi_dmul>
 80066f6:	460b      	mov	r3, r1
 80066f8:	4602      	mov	r2, r0
 80066fa:	4639      	mov	r1, r7
 80066fc:	4630      	mov	r0, r6
 80066fe:	f7f9 fd6f 	bl	80001e0 <__aeabi_dsub>
 8006702:	f7fa f9bf 	bl	8000a84 <__aeabi_d2iz>
 8006706:	1c65      	adds	r5, r4, #1
 8006708:	ab0e      	add	r3, sp, #56	; 0x38
 800670a:	f10a 0a18 	add.w	sl, sl, #24
 800670e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006712:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006716:	e720      	b.n	800655a <__kernel_rem_pio2+0x2a2>
 8006718:	4630      	mov	r0, r6
 800671a:	4639      	mov	r1, r7
 800671c:	f7fa f9b2 	bl	8000a84 <__aeabi_d2iz>
 8006720:	ab0e      	add	r3, sp, #56	; 0x38
 8006722:	4625      	mov	r5, r4
 8006724:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006728:	e717      	b.n	800655a <__kernel_rem_pio2+0x2a2>
 800672a:	ab0e      	add	r3, sp, #56	; 0x38
 800672c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006730:	f7f9 fea4 	bl	800047c <__aeabi_i2d>
 8006734:	4632      	mov	r2, r6
 8006736:	463b      	mov	r3, r7
 8006738:	f7f9 ff0a 	bl	8000550 <__aeabi_dmul>
 800673c:	4b84      	ldr	r3, [pc, #528]	; (8006950 <__kernel_rem_pio2+0x698>)
 800673e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8006742:	2200      	movs	r2, #0
 8006744:	4630      	mov	r0, r6
 8006746:	4639      	mov	r1, r7
 8006748:	f7f9 ff02 	bl	8000550 <__aeabi_dmul>
 800674c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006750:	4606      	mov	r6, r0
 8006752:	460f      	mov	r7, r1
 8006754:	e70f      	b.n	8006576 <__kernel_rem_pio2+0x2be>
 8006756:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800675a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800675e:	f7f9 fef7 	bl	8000550 <__aeabi_dmul>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800676a:	f7f9 fd3b 	bl	80001e4 <__adddf3>
 800676e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006772:	f108 0801 	add.w	r8, r8, #1
 8006776:	9b02      	ldr	r3, [sp, #8]
 8006778:	4598      	cmp	r8, r3
 800677a:	dc01      	bgt.n	8006780 <__kernel_rem_pio2+0x4c8>
 800677c:	45b8      	cmp	r8, r7
 800677e:	ddea      	ble.n	8006756 <__kernel_rem_pio2+0x49e>
 8006780:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006784:	ab4a      	add	r3, sp, #296	; 0x128
 8006786:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800678a:	ed87 7b00 	vstr	d7, [r7]
 800678e:	3e01      	subs	r6, #1
 8006790:	e6f8      	b.n	8006584 <__kernel_rem_pio2+0x2cc>
 8006792:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006794:	2b02      	cmp	r3, #2
 8006796:	dc0b      	bgt.n	80067b0 <__kernel_rem_pio2+0x4f8>
 8006798:	2b00      	cmp	r3, #0
 800679a:	dc35      	bgt.n	8006808 <__kernel_rem_pio2+0x550>
 800679c:	d059      	beq.n	8006852 <__kernel_rem_pio2+0x59a>
 800679e:	9b04      	ldr	r3, [sp, #16]
 80067a0:	f003 0007 	and.w	r0, r3, #7
 80067a4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80067a8:	ecbd 8b02 	vpop	{d8}
 80067ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d1f3      	bne.n	800679e <__kernel_rem_pio2+0x4e6>
 80067b6:	ab4a      	add	r3, sp, #296	; 0x128
 80067b8:	4423      	add	r3, r4
 80067ba:	9306      	str	r3, [sp, #24]
 80067bc:	461c      	mov	r4, r3
 80067be:	469a      	mov	sl, r3
 80067c0:	9502      	str	r5, [sp, #8]
 80067c2:	9b02      	ldr	r3, [sp, #8]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f1aa 0a08 	sub.w	sl, sl, #8
 80067ca:	dc6b      	bgt.n	80068a4 <__kernel_rem_pio2+0x5ec>
 80067cc:	46aa      	mov	sl, r5
 80067ce:	f1ba 0f01 	cmp.w	sl, #1
 80067d2:	f1a4 0408 	sub.w	r4, r4, #8
 80067d6:	f300 8085 	bgt.w	80068e4 <__kernel_rem_pio2+0x62c>
 80067da:	9c06      	ldr	r4, [sp, #24]
 80067dc:	2000      	movs	r0, #0
 80067de:	3408      	adds	r4, #8
 80067e0:	2100      	movs	r1, #0
 80067e2:	2d01      	cmp	r5, #1
 80067e4:	f300 809d 	bgt.w	8006922 <__kernel_rem_pio2+0x66a>
 80067e8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80067ec:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80067f0:	f1bb 0f00 	cmp.w	fp, #0
 80067f4:	f040 809b 	bne.w	800692e <__kernel_rem_pio2+0x676>
 80067f8:	9b01      	ldr	r3, [sp, #4]
 80067fa:	e9c3 5600 	strd	r5, r6, [r3]
 80067fe:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006802:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006806:	e7ca      	b.n	800679e <__kernel_rem_pio2+0x4e6>
 8006808:	3408      	adds	r4, #8
 800680a:	ab4a      	add	r3, sp, #296	; 0x128
 800680c:	441c      	add	r4, r3
 800680e:	462e      	mov	r6, r5
 8006810:	2000      	movs	r0, #0
 8006812:	2100      	movs	r1, #0
 8006814:	2e00      	cmp	r6, #0
 8006816:	da36      	bge.n	8006886 <__kernel_rem_pio2+0x5ce>
 8006818:	f1bb 0f00 	cmp.w	fp, #0
 800681c:	d039      	beq.n	8006892 <__kernel_rem_pio2+0x5da>
 800681e:	4602      	mov	r2, r0
 8006820:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006824:	9c01      	ldr	r4, [sp, #4]
 8006826:	e9c4 2300 	strd	r2, r3, [r4]
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006832:	f7f9 fcd5 	bl	80001e0 <__aeabi_dsub>
 8006836:	ae4c      	add	r6, sp, #304	; 0x130
 8006838:	2401      	movs	r4, #1
 800683a:	42a5      	cmp	r5, r4
 800683c:	da2c      	bge.n	8006898 <__kernel_rem_pio2+0x5e0>
 800683e:	f1bb 0f00 	cmp.w	fp, #0
 8006842:	d002      	beq.n	800684a <__kernel_rem_pio2+0x592>
 8006844:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006848:	4619      	mov	r1, r3
 800684a:	9b01      	ldr	r3, [sp, #4]
 800684c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006850:	e7a5      	b.n	800679e <__kernel_rem_pio2+0x4e6>
 8006852:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8006856:	eb0d 0403 	add.w	r4, sp, r3
 800685a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800685e:	2000      	movs	r0, #0
 8006860:	2100      	movs	r1, #0
 8006862:	2d00      	cmp	r5, #0
 8006864:	da09      	bge.n	800687a <__kernel_rem_pio2+0x5c2>
 8006866:	f1bb 0f00 	cmp.w	fp, #0
 800686a:	d002      	beq.n	8006872 <__kernel_rem_pio2+0x5ba>
 800686c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006870:	4619      	mov	r1, r3
 8006872:	9b01      	ldr	r3, [sp, #4]
 8006874:	e9c3 0100 	strd	r0, r1, [r3]
 8006878:	e791      	b.n	800679e <__kernel_rem_pio2+0x4e6>
 800687a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800687e:	f7f9 fcb1 	bl	80001e4 <__adddf3>
 8006882:	3d01      	subs	r5, #1
 8006884:	e7ed      	b.n	8006862 <__kernel_rem_pio2+0x5aa>
 8006886:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800688a:	f7f9 fcab 	bl	80001e4 <__adddf3>
 800688e:	3e01      	subs	r6, #1
 8006890:	e7c0      	b.n	8006814 <__kernel_rem_pio2+0x55c>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	e7c5      	b.n	8006824 <__kernel_rem_pio2+0x56c>
 8006898:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800689c:	f7f9 fca2 	bl	80001e4 <__adddf3>
 80068a0:	3401      	adds	r4, #1
 80068a2:	e7ca      	b.n	800683a <__kernel_rem_pio2+0x582>
 80068a4:	e9da 8900 	ldrd	r8, r9, [sl]
 80068a8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80068ac:	9b02      	ldr	r3, [sp, #8]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	9302      	str	r3, [sp, #8]
 80068b2:	4632      	mov	r2, r6
 80068b4:	463b      	mov	r3, r7
 80068b6:	4640      	mov	r0, r8
 80068b8:	4649      	mov	r1, r9
 80068ba:	f7f9 fc93 	bl	80001e4 <__adddf3>
 80068be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	4640      	mov	r0, r8
 80068c8:	4649      	mov	r1, r9
 80068ca:	f7f9 fc89 	bl	80001e0 <__aeabi_dsub>
 80068ce:	4632      	mov	r2, r6
 80068d0:	463b      	mov	r3, r7
 80068d2:	f7f9 fc87 	bl	80001e4 <__adddf3>
 80068d6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80068da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80068de:	ed8a 7b00 	vstr	d7, [sl]
 80068e2:	e76e      	b.n	80067c2 <__kernel_rem_pio2+0x50a>
 80068e4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80068e8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80068ec:	4640      	mov	r0, r8
 80068ee:	4632      	mov	r2, r6
 80068f0:	463b      	mov	r3, r7
 80068f2:	4649      	mov	r1, r9
 80068f4:	f7f9 fc76 	bl	80001e4 <__adddf3>
 80068f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4640      	mov	r0, r8
 8006902:	4649      	mov	r1, r9
 8006904:	f7f9 fc6c 	bl	80001e0 <__aeabi_dsub>
 8006908:	4632      	mov	r2, r6
 800690a:	463b      	mov	r3, r7
 800690c:	f7f9 fc6a 	bl	80001e4 <__adddf3>
 8006910:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006914:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006918:	ed84 7b00 	vstr	d7, [r4]
 800691c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006920:	e755      	b.n	80067ce <__kernel_rem_pio2+0x516>
 8006922:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006926:	f7f9 fc5d 	bl	80001e4 <__adddf3>
 800692a:	3d01      	subs	r5, #1
 800692c:	e759      	b.n	80067e2 <__kernel_rem_pio2+0x52a>
 800692e:	9b01      	ldr	r3, [sp, #4]
 8006930:	9a01      	ldr	r2, [sp, #4]
 8006932:	601d      	str	r5, [r3, #0]
 8006934:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8006938:	605c      	str	r4, [r3, #4]
 800693a:	609f      	str	r7, [r3, #8]
 800693c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006940:	60d3      	str	r3, [r2, #12]
 8006942:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006946:	6110      	str	r0, [r2, #16]
 8006948:	6153      	str	r3, [r2, #20]
 800694a:	e728      	b.n	800679e <__kernel_rem_pio2+0x4e6>
 800694c:	41700000 	.word	0x41700000
 8006950:	3e700000 	.word	0x3e700000
 8006954:	00000000 	.word	0x00000000

08006958 <__kernel_sin>:
 8006958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695c:	ed2d 8b04 	vpush	{d8-d9}
 8006960:	eeb0 8a41 	vmov.f32	s16, s2
 8006964:	eef0 8a61 	vmov.f32	s17, s3
 8006968:	ec55 4b10 	vmov	r4, r5, d0
 800696c:	b083      	sub	sp, #12
 800696e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006972:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006976:	9001      	str	r0, [sp, #4]
 8006978:	da06      	bge.n	8006988 <__kernel_sin+0x30>
 800697a:	ee10 0a10 	vmov	r0, s0
 800697e:	4629      	mov	r1, r5
 8006980:	f7fa f880 	bl	8000a84 <__aeabi_d2iz>
 8006984:	2800      	cmp	r0, #0
 8006986:	d051      	beq.n	8006a2c <__kernel_sin+0xd4>
 8006988:	4622      	mov	r2, r4
 800698a:	462b      	mov	r3, r5
 800698c:	4620      	mov	r0, r4
 800698e:	4629      	mov	r1, r5
 8006990:	f7f9 fdde 	bl	8000550 <__aeabi_dmul>
 8006994:	4682      	mov	sl, r0
 8006996:	468b      	mov	fp, r1
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	4620      	mov	r0, r4
 800699e:	4629      	mov	r1, r5
 80069a0:	f7f9 fdd6 	bl	8000550 <__aeabi_dmul>
 80069a4:	a341      	add	r3, pc, #260	; (adr r3, 8006aac <__kernel_sin+0x154>)
 80069a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069aa:	4680      	mov	r8, r0
 80069ac:	4689      	mov	r9, r1
 80069ae:	4650      	mov	r0, sl
 80069b0:	4659      	mov	r1, fp
 80069b2:	f7f9 fdcd 	bl	8000550 <__aeabi_dmul>
 80069b6:	a33f      	add	r3, pc, #252	; (adr r3, 8006ab4 <__kernel_sin+0x15c>)
 80069b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069bc:	f7f9 fc10 	bl	80001e0 <__aeabi_dsub>
 80069c0:	4652      	mov	r2, sl
 80069c2:	465b      	mov	r3, fp
 80069c4:	f7f9 fdc4 	bl	8000550 <__aeabi_dmul>
 80069c8:	a33c      	add	r3, pc, #240	; (adr r3, 8006abc <__kernel_sin+0x164>)
 80069ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ce:	f7f9 fc09 	bl	80001e4 <__adddf3>
 80069d2:	4652      	mov	r2, sl
 80069d4:	465b      	mov	r3, fp
 80069d6:	f7f9 fdbb 	bl	8000550 <__aeabi_dmul>
 80069da:	a33a      	add	r3, pc, #232	; (adr r3, 8006ac4 <__kernel_sin+0x16c>)
 80069dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e0:	f7f9 fbfe 	bl	80001e0 <__aeabi_dsub>
 80069e4:	4652      	mov	r2, sl
 80069e6:	465b      	mov	r3, fp
 80069e8:	f7f9 fdb2 	bl	8000550 <__aeabi_dmul>
 80069ec:	a337      	add	r3, pc, #220	; (adr r3, 8006acc <__kernel_sin+0x174>)
 80069ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f2:	f7f9 fbf7 	bl	80001e4 <__adddf3>
 80069f6:	9b01      	ldr	r3, [sp, #4]
 80069f8:	4606      	mov	r6, r0
 80069fa:	460f      	mov	r7, r1
 80069fc:	b9eb      	cbnz	r3, 8006a3a <__kernel_sin+0xe2>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	4650      	mov	r0, sl
 8006a04:	4659      	mov	r1, fp
 8006a06:	f7f9 fda3 	bl	8000550 <__aeabi_dmul>
 8006a0a:	a325      	add	r3, pc, #148	; (adr r3, 8006aa0 <__kernel_sin+0x148>)
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	f7f9 fbe6 	bl	80001e0 <__aeabi_dsub>
 8006a14:	4642      	mov	r2, r8
 8006a16:	464b      	mov	r3, r9
 8006a18:	f7f9 fd9a 	bl	8000550 <__aeabi_dmul>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4620      	mov	r0, r4
 8006a22:	4629      	mov	r1, r5
 8006a24:	f7f9 fbde 	bl	80001e4 <__adddf3>
 8006a28:	4604      	mov	r4, r0
 8006a2a:	460d      	mov	r5, r1
 8006a2c:	ec45 4b10 	vmov	d0, r4, r5
 8006a30:	b003      	add	sp, #12
 8006a32:	ecbd 8b04 	vpop	{d8-d9}
 8006a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3a:	4b1b      	ldr	r3, [pc, #108]	; (8006aa8 <__kernel_sin+0x150>)
 8006a3c:	ec51 0b18 	vmov	r0, r1, d8
 8006a40:	2200      	movs	r2, #0
 8006a42:	f7f9 fd85 	bl	8000550 <__aeabi_dmul>
 8006a46:	4632      	mov	r2, r6
 8006a48:	ec41 0b19 	vmov	d9, r0, r1
 8006a4c:	463b      	mov	r3, r7
 8006a4e:	4640      	mov	r0, r8
 8006a50:	4649      	mov	r1, r9
 8006a52:	f7f9 fd7d 	bl	8000550 <__aeabi_dmul>
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	ec51 0b19 	vmov	r0, r1, d9
 8006a5e:	f7f9 fbbf 	bl	80001e0 <__aeabi_dsub>
 8006a62:	4652      	mov	r2, sl
 8006a64:	465b      	mov	r3, fp
 8006a66:	f7f9 fd73 	bl	8000550 <__aeabi_dmul>
 8006a6a:	ec53 2b18 	vmov	r2, r3, d8
 8006a6e:	f7f9 fbb7 	bl	80001e0 <__aeabi_dsub>
 8006a72:	a30b      	add	r3, pc, #44	; (adr r3, 8006aa0 <__kernel_sin+0x148>)
 8006a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a78:	4606      	mov	r6, r0
 8006a7a:	460f      	mov	r7, r1
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	4649      	mov	r1, r9
 8006a80:	f7f9 fd66 	bl	8000550 <__aeabi_dmul>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4630      	mov	r0, r6
 8006a8a:	4639      	mov	r1, r7
 8006a8c:	f7f9 fbaa 	bl	80001e4 <__adddf3>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4620      	mov	r0, r4
 8006a96:	4629      	mov	r1, r5
 8006a98:	f7f9 fba2 	bl	80001e0 <__aeabi_dsub>
 8006a9c:	e7c4      	b.n	8006a28 <__kernel_sin+0xd0>
 8006a9e:	bf00      	nop
 8006aa0:	55555549 	.word	0x55555549
 8006aa4:	3fc55555 	.word	0x3fc55555
 8006aa8:	3fe00000 	.word	0x3fe00000
 8006aac:	5acfd57c 	.word	0x5acfd57c
 8006ab0:	3de5d93a 	.word	0x3de5d93a
 8006ab4:	8a2b9ceb 	.word	0x8a2b9ceb
 8006ab8:	3e5ae5e6 	.word	0x3e5ae5e6
 8006abc:	57b1fe7d 	.word	0x57b1fe7d
 8006ac0:	3ec71de3 	.word	0x3ec71de3
 8006ac4:	19c161d5 	.word	0x19c161d5
 8006ac8:	3f2a01a0 	.word	0x3f2a01a0
 8006acc:	1110f8a6 	.word	0x1110f8a6
 8006ad0:	3f811111 	.word	0x3f811111
 8006ad4:	00000000 	.word	0x00000000

08006ad8 <floor>:
 8006ad8:	ec51 0b10 	vmov	r0, r1, d0
 8006adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006ae4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006ae8:	2e13      	cmp	r6, #19
 8006aea:	ee10 5a10 	vmov	r5, s0
 8006aee:	ee10 8a10 	vmov	r8, s0
 8006af2:	460c      	mov	r4, r1
 8006af4:	dc32      	bgt.n	8006b5c <floor+0x84>
 8006af6:	2e00      	cmp	r6, #0
 8006af8:	da14      	bge.n	8006b24 <floor+0x4c>
 8006afa:	a333      	add	r3, pc, #204	; (adr r3, 8006bc8 <floor+0xf0>)
 8006afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b00:	f7f9 fb70 	bl	80001e4 <__adddf3>
 8006b04:	2200      	movs	r2, #0
 8006b06:	2300      	movs	r3, #0
 8006b08:	f7f9 ffb2 	bl	8000a70 <__aeabi_dcmpgt>
 8006b0c:	b138      	cbz	r0, 8006b1e <floor+0x46>
 8006b0e:	2c00      	cmp	r4, #0
 8006b10:	da57      	bge.n	8006bc2 <floor+0xea>
 8006b12:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006b16:	431d      	orrs	r5, r3
 8006b18:	d001      	beq.n	8006b1e <floor+0x46>
 8006b1a:	4c2d      	ldr	r4, [pc, #180]	; (8006bd0 <floor+0xf8>)
 8006b1c:	2500      	movs	r5, #0
 8006b1e:	4621      	mov	r1, r4
 8006b20:	4628      	mov	r0, r5
 8006b22:	e025      	b.n	8006b70 <floor+0x98>
 8006b24:	4f2b      	ldr	r7, [pc, #172]	; (8006bd4 <floor+0xfc>)
 8006b26:	4137      	asrs	r7, r6
 8006b28:	ea01 0307 	and.w	r3, r1, r7
 8006b2c:	4303      	orrs	r3, r0
 8006b2e:	d01f      	beq.n	8006b70 <floor+0x98>
 8006b30:	a325      	add	r3, pc, #148	; (adr r3, 8006bc8 <floor+0xf0>)
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f7f9 fb55 	bl	80001e4 <__adddf3>
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f7f9 ff97 	bl	8000a70 <__aeabi_dcmpgt>
 8006b42:	2800      	cmp	r0, #0
 8006b44:	d0eb      	beq.n	8006b1e <floor+0x46>
 8006b46:	2c00      	cmp	r4, #0
 8006b48:	bfbe      	ittt	lt
 8006b4a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006b4e:	fa43 f606 	asrlt.w	r6, r3, r6
 8006b52:	19a4      	addlt	r4, r4, r6
 8006b54:	ea24 0407 	bic.w	r4, r4, r7
 8006b58:	2500      	movs	r5, #0
 8006b5a:	e7e0      	b.n	8006b1e <floor+0x46>
 8006b5c:	2e33      	cmp	r6, #51	; 0x33
 8006b5e:	dd0b      	ble.n	8006b78 <floor+0xa0>
 8006b60:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006b64:	d104      	bne.n	8006b70 <floor+0x98>
 8006b66:	ee10 2a10 	vmov	r2, s0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	f7f9 fb3a 	bl	80001e4 <__adddf3>
 8006b70:	ec41 0b10 	vmov	d0, r0, r1
 8006b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b78:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b80:	fa23 f707 	lsr.w	r7, r3, r7
 8006b84:	4207      	tst	r7, r0
 8006b86:	d0f3      	beq.n	8006b70 <floor+0x98>
 8006b88:	a30f      	add	r3, pc, #60	; (adr r3, 8006bc8 <floor+0xf0>)
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	f7f9 fb29 	bl	80001e4 <__adddf3>
 8006b92:	2200      	movs	r2, #0
 8006b94:	2300      	movs	r3, #0
 8006b96:	f7f9 ff6b 	bl	8000a70 <__aeabi_dcmpgt>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	d0bf      	beq.n	8006b1e <floor+0x46>
 8006b9e:	2c00      	cmp	r4, #0
 8006ba0:	da02      	bge.n	8006ba8 <floor+0xd0>
 8006ba2:	2e14      	cmp	r6, #20
 8006ba4:	d103      	bne.n	8006bae <floor+0xd6>
 8006ba6:	3401      	adds	r4, #1
 8006ba8:	ea25 0507 	bic.w	r5, r5, r7
 8006bac:	e7b7      	b.n	8006b1e <floor+0x46>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006bb4:	fa03 f606 	lsl.w	r6, r3, r6
 8006bb8:	4435      	add	r5, r6
 8006bba:	4545      	cmp	r5, r8
 8006bbc:	bf38      	it	cc
 8006bbe:	18e4      	addcc	r4, r4, r3
 8006bc0:	e7f2      	b.n	8006ba8 <floor+0xd0>
 8006bc2:	2500      	movs	r5, #0
 8006bc4:	462c      	mov	r4, r5
 8006bc6:	e7aa      	b.n	8006b1e <floor+0x46>
 8006bc8:	8800759c 	.word	0x8800759c
 8006bcc:	7e37e43c 	.word	0x7e37e43c
 8006bd0:	bff00000 	.word	0xbff00000
 8006bd4:	000fffff 	.word	0x000fffff

08006bd8 <scalbn>:
 8006bd8:	b570      	push	{r4, r5, r6, lr}
 8006bda:	ec55 4b10 	vmov	r4, r5, d0
 8006bde:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006be2:	4606      	mov	r6, r0
 8006be4:	462b      	mov	r3, r5
 8006be6:	b99a      	cbnz	r2, 8006c10 <scalbn+0x38>
 8006be8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006bec:	4323      	orrs	r3, r4
 8006bee:	d036      	beq.n	8006c5e <scalbn+0x86>
 8006bf0:	4b39      	ldr	r3, [pc, #228]	; (8006cd8 <scalbn+0x100>)
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	ee10 0a10 	vmov	r0, s0
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f7f9 fca9 	bl	8000550 <__aeabi_dmul>
 8006bfe:	4b37      	ldr	r3, [pc, #220]	; (8006cdc <scalbn+0x104>)
 8006c00:	429e      	cmp	r6, r3
 8006c02:	4604      	mov	r4, r0
 8006c04:	460d      	mov	r5, r1
 8006c06:	da10      	bge.n	8006c2a <scalbn+0x52>
 8006c08:	a32b      	add	r3, pc, #172	; (adr r3, 8006cb8 <scalbn+0xe0>)
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	e03a      	b.n	8006c86 <scalbn+0xae>
 8006c10:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006c14:	428a      	cmp	r2, r1
 8006c16:	d10c      	bne.n	8006c32 <scalbn+0x5a>
 8006c18:	ee10 2a10 	vmov	r2, s0
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	4629      	mov	r1, r5
 8006c20:	f7f9 fae0 	bl	80001e4 <__adddf3>
 8006c24:	4604      	mov	r4, r0
 8006c26:	460d      	mov	r5, r1
 8006c28:	e019      	b.n	8006c5e <scalbn+0x86>
 8006c2a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006c2e:	460b      	mov	r3, r1
 8006c30:	3a36      	subs	r2, #54	; 0x36
 8006c32:	4432      	add	r2, r6
 8006c34:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006c38:	428a      	cmp	r2, r1
 8006c3a:	dd08      	ble.n	8006c4e <scalbn+0x76>
 8006c3c:	2d00      	cmp	r5, #0
 8006c3e:	a120      	add	r1, pc, #128	; (adr r1, 8006cc0 <scalbn+0xe8>)
 8006c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c44:	da1c      	bge.n	8006c80 <scalbn+0xa8>
 8006c46:	a120      	add	r1, pc, #128	; (adr r1, 8006cc8 <scalbn+0xf0>)
 8006c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c4c:	e018      	b.n	8006c80 <scalbn+0xa8>
 8006c4e:	2a00      	cmp	r2, #0
 8006c50:	dd08      	ble.n	8006c64 <scalbn+0x8c>
 8006c52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006c56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006c5e:	ec45 4b10 	vmov	d0, r4, r5
 8006c62:	bd70      	pop	{r4, r5, r6, pc}
 8006c64:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006c68:	da19      	bge.n	8006c9e <scalbn+0xc6>
 8006c6a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006c6e:	429e      	cmp	r6, r3
 8006c70:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006c74:	dd0a      	ble.n	8006c8c <scalbn+0xb4>
 8006c76:	a112      	add	r1, pc, #72	; (adr r1, 8006cc0 <scalbn+0xe8>)
 8006c78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1e2      	bne.n	8006c46 <scalbn+0x6e>
 8006c80:	a30f      	add	r3, pc, #60	; (adr r3, 8006cc0 <scalbn+0xe8>)
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	f7f9 fc63 	bl	8000550 <__aeabi_dmul>
 8006c8a:	e7cb      	b.n	8006c24 <scalbn+0x4c>
 8006c8c:	a10a      	add	r1, pc, #40	; (adr r1, 8006cb8 <scalbn+0xe0>)
 8006c8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0b8      	beq.n	8006c08 <scalbn+0x30>
 8006c96:	a10e      	add	r1, pc, #56	; (adr r1, 8006cd0 <scalbn+0xf8>)
 8006c98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c9c:	e7b4      	b.n	8006c08 <scalbn+0x30>
 8006c9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006ca2:	3236      	adds	r2, #54	; 0x36
 8006ca4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ca8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006cac:	4620      	mov	r0, r4
 8006cae:	4b0c      	ldr	r3, [pc, #48]	; (8006ce0 <scalbn+0x108>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	e7e8      	b.n	8006c86 <scalbn+0xae>
 8006cb4:	f3af 8000 	nop.w
 8006cb8:	c2f8f359 	.word	0xc2f8f359
 8006cbc:	01a56e1f 	.word	0x01a56e1f
 8006cc0:	8800759c 	.word	0x8800759c
 8006cc4:	7e37e43c 	.word	0x7e37e43c
 8006cc8:	8800759c 	.word	0x8800759c
 8006ccc:	fe37e43c 	.word	0xfe37e43c
 8006cd0:	c2f8f359 	.word	0xc2f8f359
 8006cd4:	81a56e1f 	.word	0x81a56e1f
 8006cd8:	43500000 	.word	0x43500000
 8006cdc:	ffff3cb0 	.word	0xffff3cb0
 8006ce0:	3c900000 	.word	0x3c900000

08006ce4 <_init>:
 8006ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce6:	bf00      	nop
 8006ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cea:	bc08      	pop	{r3}
 8006cec:	469e      	mov	lr, r3
 8006cee:	4770      	bx	lr

08006cf0 <_fini>:
 8006cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf2:	bf00      	nop
 8006cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cf6:	bc08      	pop	{r3}
 8006cf8:	469e      	mov	lr, r3
 8006cfa:	4770      	bx	lr
